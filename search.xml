<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MySQL基础</title>
    <url>/2021/09/30/MySQL%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>MySQL学习笔记分享，包含MySQL较全面的CRUD基本操作。该笔记是对《MySQL必知必会》的梳理，包含全部知识点、示例语句、本地运行结果以及自己做的一些总结。</p>
<p>书中代码基于MySQL 5.x版本，本机使用的是MySQL 8.0.25版本，个别不是皮欸的命令已标注解决方案。笔记内容如果存在问题我会努力及时更正。</p>
<span id="more"></span>



<hr>
<br>

<h2 id="1-了解SQL"><a href="#1-了解SQL" class="headerlink" title="1. 了解SQL"></a>1. 了解SQL</h2><p>综述：介绍数据库和SQL。</p>
<p><br><br><br></p>
<h3 id="1-1-数据库基础"><a href="#1-1-数据库基础" class="headerlink" title="1.1 数据库基础"></a>1.1 数据库基础</h3><p><br><br></p>
<h4 id="1-1-1-什么是数据库"><a href="#1-1-1-什么是数据库" class="headerlink" title="1.1.1 什么是数据库"></a>1.1.1 什么是数据库</h4><ul>
<li><strong>数据库（database）</strong>：保存有组织的数据的容器。（通常是一个文件或一组文件）</li>
</ul>
<blockquote>
<p>数据库可以理解为<strong>以一个有组织的方式存储</strong>的<strong>数据集合</strong>。可以将<strong>数据库</strong>想象为一个<strong>文件柜</strong>，此文件柜是一个存放数据的物理位置，不管数据是什么以及是如何组织的。</p>
<ul>
<li>概念区分：数据库与数据库软件<ul>
<li>数据库是一个保存数据的容器</li>
<li>数据库软件（DBMS：Database Management System）是数据库管理系统。</li>
<li><strong>使用者</strong>不直接访问数据库，而是<strong>通过DBMS</strong>访问和<strong>操作数据库</strong>。</li>
</ul>
</li>
</ul>
</blockquote>
<p><br><br></p>
<h4 id="1-1-2-表"><a href="#1-1-2-表" class="headerlink" title="1.1.2 表"></a>1.1.2 表</h4><ul>
<li><strong>表（table）</strong>：某种特定类型数据的结构化清单。<ul>
<li>注意：存储在表中的数据是<strong>一种类型的数据</strong>或<strong>一个清单</strong>。绝不可以将顾客的清单与订单的清单存储在同一个数据库表中。这样会导致检索和访问操作困难。</li>
<li><strong>表名</strong>：表名的唯一性取决于多个因素，如数据库名和表明的结合。<ul>
<li>同一数据库表名不可重复，不同数据库表名可重复。</li>
</ul>
</li>
<li><strong>模式（schema）</strong>：关于数据库和表的布局及特性的信息。</li>
</ul>
</li>
</ul>
<p><br><br></p>
<h4 id="1-1-3-列和数据类型"><a href="#1-1-3-列和数据类型" class="headerlink" title="1.1.3 列和数据类型"></a>1.1.3 列和数据类型</h4><p>表由列组成。列中存储表的某部分信息。</p>
<ul>
<li><strong>列（column）</strong>：表中的一个<strong>字段</strong>。所有的表都是由一个或多个列组成的。</li>
<li><strong>数据类型（datatype）</strong>：所容许的数据的类型。每个表都有相应的数据类型。它限制（或容许）该列中存储的数据。</li>
</ul>
<blockquote>
<p>数据类型限制可存储在列中的数据种类。【例如，防止在数值字段录入字符值】。数据类型还帮助正确地排序数据，并在优化磁盘使用方面起重要作用。</p>
<p>建表时应对数据类型给予特别关注。</p>
</blockquote>
<p><br><br></p>
<h4 id="1-1-4-行"><a href="#1-1-4-行" class="headerlink" title="1.1.4 行"></a>1.1.4 行</h4><ul>
<li><strong>行（row）</strong>：表中的一个记录。</li>
</ul>
<blockquote>
<p>很多时候，行（row）和记录（record）两个数据可以相互替代，但从技术上说，行是正确的术语。</p>
</blockquote>
<p><br><br></p>
<h4 id="1-1-5-主键"><a href="#1-1-5-主键" class="headerlink" title="1.1.5 主键"></a>1.1.5 主键</h4><ul>
<li><strong>主键（primary key）</strong>：一列（或一组列），其值能够<strong>唯一区分</strong>表中的<strong>每个行</strong>。<ul>
<li>作为主键的条件<ol>
<li>任意两行都不具有相同的主键值</li>
<li>每个行都必须具有一个主键值（主键列<strong>不允许NULL</strong>值）</li>
</ol>
</li>
</ul>
</li>
</ul>
<p>主键通常定义在表的一列上，但不是必需的。也可以使用多个列作为主键。使用多列作为主键时，上述条件必须应用到构成主键的所有列，所有列值的组合必须唯一（但单个列的值可以不唯一）。</p>
<p>由于主键的作用十分重要，如何选取主键会对业务开发产生重要影响。如果我们以学生的身份证号作为主键，似乎能唯一定位记录。然而，身份证号也是一种业务场景，如果身份证号升位了，或者需要变更，作为主键，不得不修改的时候，就会对业务产生严重影响。</p>
<p>所以，选取主键的一个基本原则是：<strong>不使用任何业务相关的字段作为主键</strong>。</p>
<p>因此，身份证号、手机号、邮箱地址这些看上去可以唯一的字段，均<strong>不可</strong>用作主键。</p>
<p>作为主键最好是完全业务无关的字段，我们一般把这个字段命名为<code>id</code>。常见的可作为<code>id</code>字段的类型有：</p>
<ol>
<li><strong>自增整数类型</strong>：数据库会在插入数据时自动为每一条记录分配一个自增整数，这样我们就完全不用担心主键重复，也不用自己预先生成主键；</li>
<li><strong>全局唯一GUID类型</strong>：使用一种全局唯一的字符串作为主键，类似<code>8f55d96b-8acc-4636-8cb8-76bf8abc2f57</code>。GUID算法通过网卡MAC地址、时间戳和随机数保证任意计算机在任意时间生成的字符串都是不同的，大部分编程语言都内置了GUID算法，可以自己预算出主键。</li>
</ol>
<p>对于大部分应用来说，通常自增类型的主键就能满足需求。我们在<code>students</code>表中定义的主键也是<code>BIGINT NOT NULL AUTO_INCREMENT</code>类型。</p>
<blockquote>
<p>注：如果使用<code>INT</code>自增类型，那么当一张表的记录数超过2147483647（约21亿）时，会达到上限而出错。使用<code>BIGINT</code>自增类型则可以最多约922亿亿条记录。</p>
</blockquote>
<blockquote>
<p><strong>主键的好习惯：</strong></p>
<ul>
<li><strong>不更新主键列中的值</strong></li>
<li><strong>不重用主键列的值</strong></li>
<li><strong>不在主键列中使用可能会该的值。</strong></li>
</ul>
</blockquote>
<p><br><br></p>
<h4 id="1-1-6-外键"><a href="#1-1-6-外键" class="headerlink" title="1.1.6 外键"></a>1.1.6 外键</h4><ul>
<li><p><strong>外键（foreign key）</strong>：是在表中由单列或多列复合而成，并在<font color="ff9f44">其它某表</font>中以<font color="ff9f44">主键形式</font>对应再次出现的键。即<font color="ff9f44"><strong>某张表</strong>中出现的<strong>外键</strong>是<strong>另外某张表</strong>中的<strong>主键</strong>。</font></p>
</li>
<li><p>参考连接：<a href="https://www.liaoxuefeng.com/wiki/1177760294764384/1218728424164736">外键 - 廖雪峰</a></p>
</li>
</ul>
<p>当我们用主键唯一标识记录时，我们就可以在<code>students</code>表中确定任意一个学生的记录：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>other columns…</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>小明</td>
<td>…</td>
</tr>
<tr>
<td>2</td>
<td>小红</td>
<td>…</td>
</tr>
</tbody></table>
<p>我们还可以在<code>classes</code>表中确定任意一个班级记录：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>other columns…</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>一班</td>
<td>…</td>
</tr>
<tr>
<td>2</td>
<td>二班</td>
<td>…</td>
</tr>
</tbody></table>
<p>但是我们如何确定<code>students</code>表的一条记录，例如，<code>id=1</code>的小明，属于哪个班级呢？</p>
<p>由于一个班级可以有多个学生，在关系模型中，这两个表的关系可以称为“一对多”，即一个<code>classes</code>的记录可以对应多个<code>students</code>表的记录。</p>
<p>为了表达这种一对多的关系，我们需要在<code>students</code>表中加入一列<code>class_id</code>，让它的值与<code>classes</code>表的某条记录相对应：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>class_id</th>
<th>name</th>
<th>other columns…</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1</td>
<td>小明</td>
<td>…</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>小红</td>
<td>…</td>
</tr>
<tr>
<td>5</td>
<td>2</td>
<td>小白</td>
<td>…</td>
</tr>
</tbody></table>
<p>这样，我们就可以根据<code>class_id</code>这个列直接定位出一个<code>students</code>表的记录应该对应到<code>classes</code>的哪条记录。</p>
<p>例如：</p>
<ul>
<li>小明的<code>class_id</code>是<code>1</code>，因此，对应的<code>classes</code>表的记录是<code>id=1</code>的一班；</li>
<li>小红的<code>class_id</code>是<code>1</code>，因此，对应的<code>classes</code>表的记录是<code>id=1</code>的一班；</li>
<li>小白的<code>class_id</code>是<code>2</code>，因此，对应的<code>classes</code>表的记录是<code>id=2</code>的二班。</li>
</ul>
<p>在<code>students</code>表中，通过<code>class_id</code>的字段，可以把数据与另一张表关联起来，这种列称为<code>外键</code>。</p>
<p>外键并不是通过列名实现的，而是通过<strong>定义外键约束</strong>实现的：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_class_id</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (class_id)</span><br><span class="line"><span class="keyword">REFERENCES</span> classes (id);</span><br></pre></td></tr></table></figure>

<p>其中，外键约束的名称<code>fk_class_id</code>可以任意，<code>FOREIGN KEY (class_id)</code>指定了<code>class_id</code>作为外键，<code>REFERENCES classes (id)</code>指定了这个外键将关联到<code>classes</code>表的<code>id</code>列（即<code>classes</code>表的主键）。</p>
<p>通过定义外键约束，关系数据库可以保证无法插入无效的数据。即如果<code>classes</code>表不存在<code>id=99</code>的记录，<code>students</code>表就无法插入<code>class_id=99</code>的记录。</p>
<p>由于外键约束会降低数据库的性能，大部分互联网应用程序为了追求速度，并不设置外键约束，而是仅靠应用程序自身来保证逻辑的正确性。这种情况下，<code>class_id</code>仅仅是一个普通的列，只是它起到了外键的作用而已。</p>
<p>要<strong>删除外键约束</strong>，也是通过<code>ALTER TABLE</code>实现的：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY fk_class_id;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>删除外键约束并没有删除外键这一列。删除列是通过<code>DROP COLUMN ...</code>实现的。</li>
<li><strong>删除外键约束</strong>命令使用的是<strong>外键名</strong>而不是字段名。</li>
</ul>
<p><br><br></p>
<h4 id="1-1-7-索引"><a href="#1-1-7-索引" class="headerlink" title="1.1.7 索引"></a>1.1.7 索引</h4><ul>
<li>参考连接：<a href="https://www.liaoxuefeng.com/wiki/1177760294764384/1218728442198976">索引 - 廖雪峰</a></li>
</ul>
<p><br><br><br></p>
<h3 id="1-2-什么是SQL"><a href="#1-2-什么是SQL" class="headerlink" title="1.2 什么是SQL"></a>1.2 什么是SQL</h3><p><br><br></p>
<h4 id="1-2-1-相关概念"><a href="#1-2-1-相关概念" class="headerlink" title="1.2.1 相关概念"></a>1.2.1 相关概念</h4><ul>
<li><strong>SQL（Structured Query Language）</strong>：是一种专门用来与数据库通信的语言。</li>
</ul>
<p>设计SQL的目的是提供一种从数据库中读写数据的简单有效的方法。</p>
<p>SQL是结构化查询语言的缩写，用来访问和操作数据库系统。SQL语句既可以查询数据库中的数据，也可以添加、更新和删除数据库中的数据，还可以对数据库进行管理和维护操作。不同的数据库，都支持SQL，这样，我们通过学习SQL这一种语言，就可以操作各种不同的数据库。</p>
<p>SQL语言定义了这么几种操作数据库的能力：</p>
<ul>
<li><strong>DDL：Data Definition Language</strong><ul>
<li>DDL允许用户定义数据，也就是创建表、删除表、修改表结构这些操作。通常，DDL由数据库管理员执行。</li>
</ul>
</li>
<li><strong>DML：Data Manipulation Language</strong><ul>
<li>DML为用户提供添加、删除、更新数据的能力，这些是应用程序对数据库的日常操作。</li>
</ul>
</li>
<li><strong>DQL：Data Query Language</strong><ul>
<li>DQL允许用户查询数据，这也是通常最频繁的数据库日常操作。</li>
</ul>
</li>
</ul>
<p><br><br></p>
<h4 id="1-2-2-语法特点"><a href="#1-2-2-语法特点" class="headerlink" title="1.2.2 语法特点"></a>1.2.2 语法特点</h4><p>SQL语言关键字不区分大小写！！！但是，针对不同的数据库，对于表名和列名，有的数据库区分大小写，有的数据库不区分大小写。同一个数据库，有的在Linux上区分大小写，有的在Windows上不区分大小写。</p>
<ul>
<li>个人习惯遵循的约定：<font color="ffa600"><strong>SQL关键字</strong>总是<strong>大写</strong>，以示突出，<strong>表名和列名</strong>均使用<strong>小写</strong>。</font></li>
</ul>
<p><br><br><br></p>
<h3 id="1-3-小结"><a href="#1-3-小结" class="headerlink" title="1.3 小结"></a>1.3 小结</h3><ul>
<li><p>介绍了SQL的一些基本术语和概念。</p>
</li>
<li><p>主键</p>
<ul>
<li>主键是关系表中记录的唯一标识。主键的选取非常重要：主键不要带有业务含义，而应该使用BIGINT自增或者GUID类型。主键也不应该允许<code>NULL</code>。</li>
<li>可以使用多个列作为联合主键，但联合主键并不常用。</li>
</ul>
</li>
<li><p>外键</p>
<ul>
<li>关系数据库通过外键可以实现一对多、多对多和一对一的关系。外键既可以通过数据库来约束，也可以不设置约束，仅依靠应用程序的逻辑来保证。</li>
</ul>
</li>
<li><p>索引</p>
<ul>
<li>通过对数据库表创建索引，可以提高查询速度。</li>
<li>通过创建唯一索引，可以保证某一列的值具有唯一性。</li>
<li>数据库索引对于用户和应用程序来说都是透明的。</li>
</ul>
</li>
</ul>
<p><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br></p>
<h2 id="2-MySQL简介"><a href="#2-MySQL简介" class="headerlink" title="2. MySQL简介"></a>2. MySQL简介</h2><p>综述：介绍什么是MySQL，以及MySQL中可以应用什么工具。</p>
<p><br><br><br></p>
<h3 id="2-1-什么是MySQL"><a href="#2-1-什么是MySQL" class="headerlink" title="2.1 什么是MySQL"></a>2.1 什么是MySQL</h3><ul>
<li>MySQL是一种DBMS，即它是一种数据库软件。</li>
</ul>
<p><br><br></p>
<h4 id="2-1-1-客户机-服务器软件"><a href="#2-1-1-客户机-服务器软件" class="headerlink" title="2.1.1 客户机-服务器软件"></a>2.1.1 客户机-服务器软件</h4><p>MySQL、Oracle、Microsoft SQL Server 等数据库都是基于客户机-服务器的数据库。kehuji-fuwuqi应用分为两个不同的部分。服务器部分是负责所有数据访问和处理的一个软件。这个软件运行在称为数据库服务器的计算机上。</p>
<p>与数据文件打交道的只有<strong>服务器软件</strong>。关于数据、数据添加、删除和数据更新的所有请求都由服务器软件完成。<strong>客户机软件</strong>通过网络提交请求给服务器软件。服务器软件处理这个请求，根据需要过滤、丢弃和排序数据，然后将结果响应给客户机软件。</p>
<blockquote>
<p>客户机和服务器软件可能安装在两台计算机或一台计算机上。为了进行数据库交互，客户机软件要与服务器软件进行通信。</p>
</blockquote>
<p>所有这些活动对用户是透明的。事实上，多数网络的建立使用户不具有对数据的访问权，甚至不具有对存储数据的驱动器的访问权。</p>
<p>这样，为了使用MySQL，需要<strong>访问运行MySQL服务器软件的计算机</strong>【客户机】和<strong>发布命令到MySQL客户机软件的计算机</strong>【服务器】。</p>
<ul>
<li>服务器软件为MySQL DBMS。你可以在本地安装的副本上运行，也可以连接到运行在你具有访问权限的远程服务器上的一个副本。</li>
<li>客户机可以是MySQL提供的工具、脚本语言（如Perl）、Web应用开发语言（如ASP、ColdFusion、JSP和PHP）、程序设计语言（如C、C++、Java）等。</li>
</ul>
<p><br><br></p>
<h4 id="2-1-2-MySQL版本"><a href="#2-1-2-MySQL版本" class="headerlink" title="2.1.2 MySQL版本"></a>2.1.2 MySQL版本</h4><p>系列版本中引入的一些更改。</p>
<ul>
<li>4——InnoDB引擎，增加<strong>事务处理</strong>、<strong>并</strong>、<strong>改进全文本搜索</strong>等的支持。</li>
<li>4.1——对函数库、子查询、继承帮助等的重要增加。</li>
<li>5——存储过程、触发器、游标、视图等。</li>
</ul>
<p><br><br><br></p>
<h3 id="2-2-MySQL工具"><a href="#2-2-MySQL工具" class="headerlink" title="2.2 MySQL工具"></a>2.2 MySQL工具</h3><p><br><br></p>
<h4 id="2-2-1-mysql命令行实用程序"><a href="#2-2-1-mysql命令行实用程序" class="headerlink" title="2.2.1 mysql命令行实用程序"></a>2.2.1 mysql命令行实用程序</h4><ul>
<li>命令输入在 mysql&gt; 之后</li>
<li>命令用 <code>;</code>或 <code>\g</code> 结束。仅按 Enter 不执行命令</li>
<li>输入<code>quit</code>或<code>exit</code>推出命令行实用程序</li>
</ul>
<p><br><br></p>
<h4 id="2-2-2-MySQL-Administrator"><a href="#2-2-2-MySQL-Administrator" class="headerlink" title="2.2.2 MySQL Administrator"></a>2.2.2 MySQL Administrator</h4><p><br><br></p>
<h4 id="2-2-3-MySQL-Query-Brower"><a href="#2-2-3-MySQL-Query-Brower" class="headerlink" title="2.2.3 MySQL Query Brower"></a>2.2.3 MySQL Query Brower</h4><p><br><br><br></p>
<h3 id="2-3-小结"><a href="#2-3-小结" class="headerlink" title="2.3 小结"></a>2.3 小结</h3><ul>
<li>介绍了什么是MySQL。</li>
<li>引入了几个客户机实用程序。</li>
</ul>
<p><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br></p>
<h2 id="3-使用MySQL"><a href="#3-使用MySQL" class="headerlink" title="3. 使用MySQL"></a>3. 使用MySQL</h2><p>本节内容为如何连接和登录到MySQL，如何执行MySQL语句，以及如何获得数据库和表的信息。</p>
<p><br><br><br></p>
<h3 id="3-1-连接"><a href="#3-1-连接" class="headerlink" title="3.1 连接"></a>3.1 连接</h3><p>MySQL与所有客户机-服务器DBMS一样，要求在能之心工龄之前登录到DBMS。登录名可以与网络登录名不相同。MySQL在内部保存自己的用户列表，并且把每个用户与各种权限关联起来。</p>
<ul>
<li>为了连接到MySQL，需要以下信息<ul>
<li>主机名（计算机名）——如果连接到本地MySQL服务器，为 <strong>localhost</strong></li>
<li>端口（如果使用默认端口 3306 之外的端口）</li>
<li>一个合法的用户名</li>
<li>用户口令（如果需要）</li>
</ul>
</li>
</ul>
<p><br><br></p>
<h4 id="MySQL数据库软件基本操作"><a href="#MySQL数据库软件基本操作" class="headerlink" title="MySQL数据库软件基本操作"></a>MySQL数据库软件基本操作</h4><ol>
<li><p>安装</p>
</li>
<li><p>卸载</p>
<ol>
<li>在mysql的安装目录找到my.ini文件<ul>
<li>复制 datadir=D:\SourceFiles\mysql\mysql-8.0.25-winx64\data</li>
</ul>
</li>
<li>卸载MySQL</li>
<li>删除C:/ProgramData目录下的MySQL文件夹。</li>
</ol>
</li>
<li><p>配置</p>
<ul>
<li><p><strong>MySQL服务的启动</strong></p>
<ol>
<li>手动</li>
<li>cmd –&gt; services.msc  // 打开服务的窗口</li>
<li>使用管理员打开cmd<ul>
<li><code>net start mysql</code>：启动mysql的服务</li>
<li><code>net stop mysql</code>：关闭mysql服务</li>
</ul>
</li>
</ol>
</li>
<li><p><strong>MySQL登录</strong></p>
<ol>
<li><code>mysql -u&#39;User&#39; -p&#39;Password&#39;</code> 【默认连接本地 MySQL】</li>
<li><code>mysql -hip -u&#39;User&#39; -p&#39;Password&#39;</code>【本机ip为：127.0.0.1】</li>
<li><code>mysql --host=ip --user=&#39;User&#39; --password=&#39;Password&#39;</code></li>
</ol>
</li>
<li><p><strong>MySQL退出</strong></p>
<ol>
<li><code>exit</code></li>
<li><code>quit</code></li>
</ol>
</li>
<li><p>MySQL目录结构</p>
<ol>
<li><p>MySQL安装目录：basedir=”D:\SourceFiles\mysql\mysql-8.0.25-winx64&quot;</p>
<ul>
<li><p>bin：二进制可执行文件</p>
</li>
<li><p>data：数据目录</p>
</li>
<li><p>include：存放c语言的一些头文件</p>
</li>
<li><p>lib：库文件</p>
</li>
<li><p>share：MySQL的错误信息</p>
</li>
<li><p><font color="ffa600">配置文件</font> my.ini</p>
</li>
</ul>
</li>
<li><p>MySQL数据目录：datadir=D:\SourceFiles\mysql\mysql-8.0.25-winx64\data</p>
<ul>
<li>几个概念<ul>
<li>数据库：文件夹</li>
<li>表：文件</li>
<li>数据：数据</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
<p><br><br><br></p>
<h3 id="3-2-选择数据库"><a href="#3-2-选择数据库" class="headerlink" title="3.2 选择数据库"></a>3.2 选择数据库</h3><p>在执行任意数据库操作前，需要使用 <strong>USE</strong> 关键字选择一个数据库。</p>
<ul>
<li><strong>关键字（key word）</strong>：作为MySQL语言组成部分的一个保留字。决不要用关键字命名一个表或列。</li>
</ul>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE crashcourse;	<span class="comment">-- 选择数据库crashcourse</span></span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Database changed</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p><code>USE</code> 语句并不返回任何结果。依赖于使用的客户机，显示某种形式的通知。例如，这里显示出的 Database changed 消息是 mysql 命令行实用程序在数据库选择成功后显示的。</p>
<p><br><br><br></p>
<h3 id="3-3-查看数据库和表"><a href="#3-3-查看数据库和表" class="headerlink" title="3.3 查看数据库和表"></a>3.3 查看数据库和表</h3><p><br><br></p>
<h4 id="3-3-1查看所有数据库"><a href="#3-3-1查看所有数据库" class="headerlink" title="3.3.1查看所有数据库"></a>3.3.1查看所有数据库</h4><p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;	<span class="comment">-- 返回可用数据库的一个列表</span></span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| crashcourse        |</span><br><span class="line">| day14              |</span><br><span class="line">| db1                |</span><br><span class="line">| db2                |</span><br><span class="line">| db3                |</span><br><span class="line">| db4                |</span><br><span class="line">| dbtest             |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">11 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p><code>SHOW DATABASES;</code> 返回可用数据库的一个列表。列表中的数据库可能是 MySQL 内部使用的数据库（如例子中的 mysql 和 information_schema），也可能是用户自己创建的数据库。</p>
<p><br><br></p>
<h4 id="3-3-2-查看所有表"><a href="#3-3-2-查看所有表" class="headerlink" title="3.3.2 查看所有表"></a>3.3.2 查看所有表</h4><p>为了获得一个数据库内的表的列表，使用如下命令。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES;	<span class="comment">-- 查看所有表</span></span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-----------------------+</span><br><span class="line">| Tables_in_crashcourse |</span><br><span class="line">+-----------------------+</span><br><span class="line">| customers             |</span><br><span class="line">| orderitems            |</span><br><span class="line">| orders                |</span><br><span class="line">| productnotes          |</span><br><span class="line">| products              |</span><br><span class="line">| vendors               |</span><br><span class="line">+-----------------------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p><code>SHOW TABLES;</code> 返回当前选择的数据库内可用表的列表。</p>
<p><br><br></p>
<h4 id="3-3-3-显示某表的所有列"><a href="#3-3-3-显示某表的所有列" class="headerlink" title="3.3.3 显示某表的所有列"></a>3.3.3 显示某表的所有列</h4><p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> COLUMNS <span class="keyword">FROM</span> customers;	<span class="comment">-- 显示 customers 表的所有列</span></span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+--------------+-----------+------+-----+---------+----------------+</span><br><span class="line">| Field        | Type      | Null | Key | Default | Extra          |</span><br><span class="line">+--------------+-----------+------+-----+---------+----------------+</span><br><span class="line">| cust_id      | int       | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| cust_name    | char(50)  | NO   |     | NULL    |                |</span><br><span class="line">| cust_address | char(50)  | YES  |     | NULL    |                |</span><br><span class="line">| cust_city    | char(50)  | YES  |     | NULL    |                |</span><br><span class="line">| cust_state   | char(5)   | YES  |     | NULL    |                |</span><br><span class="line">| cust_zip     | char(10)  | YES  |     | NULL    |                |</span><br><span class="line">| cust_country | char(50)  | YES  |     | NULL    |                |</span><br><span class="line">| cust_contact | char(50)  | YES  |     | NULL    |                |</span><br><span class="line">| cust_email   | char(255) | YES  |     | NULL    |                |</span><br><span class="line">+--------------+-----------+------+-----+---------+----------------+</span><br><span class="line">9 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p><strong><code>SHOW COLUMNS</code></strong> 要求给出一个表名，它对每个字段返回一行，行中包含<strong>字段名</strong>、<strong>数据类型</strong>、<strong>是否允许<code>NULL</code><strong>、</strong>键信息</strong>、<strong>默认值</strong>以及<strong>其它信息</strong>（如字段 <code>cust_id</code> 的 <code>auto_increment</code>）。</p>
<p><br><br><br></p>
<h3 id="3-4-小结"><a href="#3-4-小结" class="headerlink" title="3.4 小结"></a>3.4 小结</h3><ul>
<li>连接、登录MySQL</li>
<li>如何用 <code>USE</code> 选择数据库</li>
<li>如何用 <code>SHOW</code> 查看MySQL数据库、表和内部信息。</li>
</ul>
<p><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br></p>
<h2 id="4-检索数据"><a href="#4-检索数据" class="headerlink" title="4. 检索数据"></a>4. 检索数据</h2><p>本节内容为使用SELECT语句从表中检索一个或多个数据列。</p>
<br>

<p>检索数据的基本格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &quot;what&quot; <span class="keyword">FROM</span> &quot;where&quot;</span><br></pre></td></tr></table></figure>

<p>检索单个列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_nameFROM products;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> <strong>推荐</strong>    <font color="ffa600">SQL<strong>关键字</strong>统一<strong>大写</strong>，所有<strong>列名、表名小写</strong>。</font></p>
</blockquote>
<p>检索多个列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name, prod_priceFROM products;</span><br></pre></td></tr></table></figure>

<p>检索所有列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure>

<p>检索不同的行【检索结果去重】</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> vend_id, prod_priceFROM products;</span><br></pre></td></tr></table></figure>

<p>限制结果【的行数】</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_nameFROM productsLIMIT <span class="number">5</span>;	<span class="comment">-- 返回查询结果的前5行</span></span><br></pre></td></tr></table></figure>

<p>使用完全限定名</p>
<ul>
<li>完全限定表名：<code>databasename.tablename</code></li>
<li>完全限定列名：<code>tablename.columnname</code></li>
</ul>
<p><br><br><br></p>
<h3 id="4-1-SELECT-语句"><a href="#4-1-SELECT-语句" class="headerlink" title="4.1 SELECT 语句"></a>4.1 SELECT 语句</h3><p>用途：从一个或多个表中检索信息</p>
<p>为了使用 <code>SELECT</code> 检索表数据，必须至少给出两条信息——想选择什么，以及从什么地方选择。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &quot;what&quot; <span class="keyword">FROM</span> &quot;where&quot;</span><br></pre></td></tr></table></figure>

<p><br><br><br></p>
<h3 id="4-2-检索单个列"><a href="#4-2-检索单个列" class="headerlink" title="4.2 检索单个列"></a>4.2 检索单个列</h3><p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_nameFROM products;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>上述语句利用 <code>SELECT</code> 语句从 <code>products</code> 表中检索一个名为<code>prod_name</code>的列。所需的列明在 <code>SELECT </code>关键字之后给出；<code>FROM</code> 关键字之处目标检索数据所在的表的表名。</p>
<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----------------+</span><br><span class="line">| prod_name      |</span><br><span class="line">+----------------+</span><br><span class="line">| .5 ton anvil   |</span><br><span class="line">| 1 ton anvil    |</span><br><span class="line">| 2 ton anvil    |</span><br><span class="line">| Detonator      |</span><br><span class="line">| Bird seed      |</span><br><span class="line">| Carrots        |</span><br><span class="line">| Fuses          |</span><br><span class="line">| JetPack 1000   |</span><br><span class="line">| JetPack 2000   |</span><br><span class="line">| Oil can        |</span><br><span class="line">| Safe           |</span><br><span class="line">| Sling          |</span><br><span class="line">| TNT (1 stick)  |</span><br><span class="line">| TNT (5 sticks) |</span><br><span class="line">+----------------+</span><br><span class="line">14 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<br>

<h4 id="附：SQL语句大小写问题"><a href="#附：SQL语句大小写问题" class="headerlink" title="附：SQL语句大小写问题"></a>附：SQL语句大小写问题</h4><blockquote>
<p>SQL语句不区分大小写。推荐使用固定的规范：<font color="ffa600">SQL<strong>关键字</strong>统一<strong>大写</strong>，所有<strong>列名、表名小写</strong>。</font></p>
<p>标识符区是分大小写的。</p>
<p>推荐<strong>大小写</strong>规范<strong>应明确、固定、一致</strong>。</p>
</blockquote>
<p><br><br><br></p>
<h3 id="4-3-检索多个列"><a href="#4-3-检索多个列" class="headerlink" title="4.3 检索多个列"></a>4.3 检索多个列</h3><p>从一个表中检索多个列，必须在 <code>SELECT </code>关键字后给出多个列名，<font color="ffa600"><strong>列名之间</strong>必须<strong>以逗号分隔</strong>。</font></p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+----------------+------------+</span><br><span class="line">| prod_id | prod_name      | prod_price |</span><br><span class="line">+---------+----------------+------------+</span><br><span class="line">| ANV01   | .5 ton anvil   |       5.99 |</span><br><span class="line">| ANV02   | 1 ton anvil    |       9.99 |</span><br><span class="line">| ANV03   | 2 ton anvil    |      14.99 |</span><br><span class="line">| DTNTR   | Detonator      |      13.00 |</span><br><span class="line">| FB      | Bird seed      |      10.00 |</span><br><span class="line">| FC      | Carrots        |       2.50 |</span><br><span class="line">| FU1     | Fuses          |       3.42 |</span><br><span class="line">| JP1000  | JetPack 1000   |      35.00 |</span><br><span class="line">| JP2000  | JetPack 2000   |      55.00 |</span><br><span class="line">| OL1     | Oil can        |       8.99 |</span><br><span class="line">| SAFE    | Safe           |      50.00 |</span><br><span class="line">| SLING   | Sling          |       4.49 |</span><br><span class="line">| TNT1    | TNT (1 stick)  |       2.50 |</span><br><span class="line">| TNT2    | TNT (5 sticks) |      10.00 |</span><br><span class="line">+---------+----------------+------------+</span><br><span class="line">14 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h4 id="附：数据表示"><a href="#附：数据表示" class="headerlink" title="附：数据表示"></a>附：数据表示</h4><blockquote>
<p>SQL语句一般返回原始的、无格式的数据。<strong>数据的格式化是一个表示问题，而不是一个检索问题</strong>。因此，<strong>表示</strong>（对齐和显示上面的价格值，用货币符号和逗号表示其金额）<strong>一般在显示该数据的应用程序中规定</strong>。一般很少使用实际检索出的原始数据（没有应用程序提供的格式）。</p>
</blockquote>
<p><br><br><br></p>
<h3 id="4-4-检索所有列"><a href="#4-4-检索所有列" class="headerlink" title="4.4 检索所有列"></a>4.4 检索所有列</h3><p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+---------+----------------+------------+----------------------------------------------------------------+</span><br><span class="line">| prod_id | vend_id | prod_name      | prod_price | prod_desc                                                      |</span><br><span class="line">+---------+---------+----------------+------------+----------------------------------------------------------------+</span><br><span class="line">| ANV01   |    1001 | .5 ton anvil   |       5.99 | .5 ton anvil, black, complete with handy hook                  |</span><br><span class="line">| ANV02   |    1001 | 1 ton anvil    |       9.99 | 1 ton anvil, black, complete with handy hook and carrying <span class="keyword">case</span> |</span><br><span class="line">| ANV03   |    1001 | 2 ton anvil    |      14.99 | 2 ton anvil, black, complete with handy hook and carrying <span class="keyword">case</span> |</span><br><span class="line">| DTNTR   |    1003 | Detonator      |      13.00 | Detonator (plunger powered), fuses not included                |</span><br><span class="line">| FB      |    1003 | Bird seed      |      10.00 | Large bag (suitable <span class="keyword">for</span> road runners)                          |</span><br><span class="line">| FC      |    1003 | Carrots        |       2.50 | Carrots (rabbit hunting season only)                           |</span><br><span class="line">| FU1     |    1002 | Fuses          |       3.42 | 1 dozen, extra long                                            |</span><br><span class="line">| JP1000  |    1005 | JetPack 1000   |      35.00 | JetPack 1000, intended <span class="keyword">for</span> single use                          |</span><br><span class="line">| JP2000  |    1005 | JetPack 2000   |      55.00 | JetPack 2000, multi-use                                        |</span><br><span class="line">| OL1     |    1002 | Oil can        |       8.99 | Oil can, red                                                   |</span><br><span class="line">| SAFE    |    1003 | Safe           |      50.00 | Safe with combination lock                                     |</span><br><span class="line">| SLING   |    1003 | Sling          |       4.49 | Sling, one size fits all                                       |</span><br><span class="line">| TNT1    |    1003 | TNT (1 stick)  |       2.50 | TNT, red, single stick                                         |</span><br><span class="line">| TNT2    |    1003 | TNT (5 sticks) |      10.00 | TNT, red, pack of 10 sticks                                    |</span><br><span class="line">+---------+---------+----------------+------------+----------------------------------------------------------------+</span><br><span class="line">14 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><br><br><br></p>
<h3 id="4-5-检索不同的行【去重】"><a href="#4-5-检索不同的行【去重】" class="headerlink" title="4.5 检索不同的行【去重】"></a>4.5 检索不同的行【去重】</h3><p><strong>目标</strong></p>
<p>检索表 <code>products</code> 中产品的所有供应商ID （vend_id），要求检索的同时去掉重复的的id</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> vend_idFROM products;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p><code>DISTINCT</code> 关键字必须直接放在列名的前面。<code>SELECT DISTINCT vend_id</code> 告诉MySQL只返回不同的（唯一的）<code>vend_id</code> 行，因此只返回4行。</p>
<blockquote>
<p><strong>不能部分使用 DISTINCT 关键字</strong></p>
<p><strong>DISTINCT</strong> 关键字<font color="ffa600"><strong>应用于所有列</strong></font>而不仅是前置它的列，如果给出</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DISTINC vend_id, prod_price <span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure>

<p>除非指定的两个列都相同，否则所有行都将被检索出来。</p>
</blockquote>
<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+</span><br><span class="line">| vend_id |</span><br><span class="line">+---------+</span><br><span class="line">|    1001 |</span><br><span class="line">|    1002 |</span><br><span class="line">|    1003 |</span><br><span class="line">|    1005 |</span><br><span class="line">+---------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><br><br><br></p>
<h3 id="4-6-限制结果【行数】"><a href="#4-6-限制结果【行数】" class="headerlink" title="4.6 限制结果【行数】"></a>4.6 限制结果【行数】</h3><p>可用 LIMIT 子句限制查询返回的行数。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line">LIMIT <span class="number">5</span>;	<span class="comment">-- 返回查询结果的前5行</span></span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>此句用 SELECT 关键字检索单个列。LIMIT 5 表示MySQL返回不超过5行【这里得出的是查询结果的前5行】。</p>
<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+--------------+</span><br><span class="line">| prod_name    |</span><br><span class="line">+--------------+</span><br><span class="line">| .5 ton anvil |</span><br><span class="line">| 1 ton anvil  |</span><br><span class="line">| 2 ton anvil  |</span><br><span class="line">| Detonator    |</span><br><span class="line">| Bird seed    |</span><br><span class="line">+--------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>如果想得到指定部分的查询结果，可以<strong>指定返回的起始位置</strong>。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line">LIMIT <span class="number">5</span>, <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>LIMIT 5, 5 表示MySQL返回从第5行开始的5行结果。第1个数为开始位置，第2个数为要检索的行数。</p>
<blockquote>
<p><strong>行0</strong> ： <strong>行的索引</strong>是<strong>从0开始</strong>的。因此，语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LIMIT <span class="number">1</span>, <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>将检索实际的第2行而不是第1行。</p>
<p><strong>行数小于限制</strong>时，将仅仅返回符合要求的所有行。</p>
</blockquote>
<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+--------------+</span><br><span class="line">| prod_name    |</span><br><span class="line">+--------------+</span><br><span class="line">| Carrots      |</span><br><span class="line">| Fuses        |</span><br><span class="line">| JetPack 1000 |</span><br><span class="line">| JetPack 2000 |</span><br><span class="line">| Oil can      |</span><br><span class="line">+--------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<br>

<h4 id="附：MySQL5-的新LIMIT语法"><a href="#附：MySQL5-的新LIMIT语法" class="headerlink" title="附：MySQL5 的新LIMIT语法"></a>附：MySQL5 的新LIMIT语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LIMIT <span class="number">4</span> <span class="keyword">OFFSET</span> <span class="number">3</span>	<span class="comment">-- 表示从行3开始取4行</span></span><br></pre></td></tr></table></figure>

<p><br><br><br></p>
<h3 id="4-7-使用完全限定的表名"><a href="#4-7-使用完全限定的表名" class="headerlink" title="4.7 使用完全限定的表名"></a>4.7 使用完全限定的表名</h3><p><code>databasename.tablename</code></p>
<p><code>tablename.columnname</code></p>
<p><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br></p>
<h2 id="5-排序检索数据"><a href="#5-排序检索数据" class="headerlink" title="5. 排序检索数据"></a>5. 排序检索数据</h2><p>使用 <code>SELECT</code> 语句的 <code>ORDER BY</code> 子句，根据需要排序检索的数据。</p>
<p>标准语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col1, col2 	<span class="comment">-- 指定返回哪几列</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">&#x27;table&#x27;</span> 		<span class="comment">-- 查询的表</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cola <span class="keyword">DESC</span>, colb 	<span class="comment">-- 指定按什么排序、排序方向</span></span><br><span class="line">LIMIT numofrows;	<span class="comment">-- 限制行数</span></span><br></pre></td></tr></table></figure>

<p><br><br><br></p>
<h3 id="5-1-排序数据"><a href="#5-1-排序数据" class="headerlink" title="5.1 排序数据"></a>5.1 排序数据</h3><ul>
<li><strong>子句（clause）</strong>：SQL语句由子句构成，有些必需，有些可选。一个子句通常由一个关键字和所提供的数据组成。</li>
</ul>
<p>ORDER BY 子句取一个或多个列的名字，据此对输出进行排序。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>此句指示MySQL对 <code>prod_name</code> 查询结果列以 <code>prod_name</code> 列<strong>字母顺序</strong>排序数据。</p>
<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----------------+</span><br><span class="line">| prod_name      |</span><br><span class="line">+----------------+</span><br><span class="line">| .5 ton anvil   |</span><br><span class="line">| 1 ton anvil    |</span><br><span class="line">| 2 ton anvil    |</span><br><span class="line">| Bird seed      |</span><br><span class="line">| Carrots        |</span><br><span class="line">| Detonator      |</span><br><span class="line">| Fuses          |</span><br><span class="line">| JetPack 1000   |</span><br><span class="line">| JetPack 2000   |</span><br><span class="line">| Oil can        |</span><br><span class="line">| Safe           |</span><br><span class="line">| Sling          |</span><br><span class="line">| TNT (1 stick)  |</span><br><span class="line">| TNT (5 sticks) |</span><br><span class="line">+----------------+</span><br><span class="line">14 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><br><br><br></p>
<h3 id="5-2-按多个列排序"><a href="#5-2-按多个列排序" class="headerlink" title="5.2 按多个列排序"></a>5.2 按多个列排序</h3><p><strong>注意</strong>：按多个列排序时，排序按照所规定的顺序进行。仅当第一个排序条件无法判断先后时才会按第二个排序条件排序，以此类推。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price, prod_name;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+------------+----------------+</span><br><span class="line">| prod_id | prod_price | prod_name      |</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">| FC      |       2.50 | Carrots        |</span><br><span class="line">| TNT1    |       2.50 | TNT (1 stick)  |</span><br><span class="line">| FU1     |       3.42 | Fuses          |</span><br><span class="line">| SLING   |       4.49 | Sling          |</span><br><span class="line">| ANV01   |       5.99 | .5 ton anvil   |</span><br><span class="line">| OL1     |       8.99 | Oil can        |</span><br><span class="line">| ANV02   |       9.99 | 1 ton anvil    |</span><br><span class="line">| FB      |      10.00 | Bird seed      |</span><br><span class="line">| TNT2    |      10.00 | TNT (5 sticks) |</span><br><span class="line">| DTNTR   |      13.00 | Detonator      |</span><br><span class="line">| ANV03   |      14.99 | 2 ton anvil    |</span><br><span class="line">| JP1000  |      35.00 | JetPack 1000   |</span><br><span class="line">| SAFE    |      50.00 | Safe           |</span><br><span class="line">| JP2000  |      55.00 | JetPack 2000   |</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">14 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><br><br><br></p>
<h3 id="5-3-指定排序方向"><a href="#5-3-指定排序方向" class="headerlink" title="5.3 指定排序方向"></a>5.3 指定排序方向</h3><p>MySQL<strong>默认按升序</strong>排列。如果想要按<font color="ffa600">降序</font>排列，需要在字段后加 <strong><code>DESC</code></strong> 关键字。</p>
<p>举例如下：按价格降序排列产品。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price <span class="keyword">DESC</span>, prod_name;	<span class="comment">-- 按价格降序排列</span></span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+------------+----------------+</span><br><span class="line">| prod_id | prod_price | prod_name      |</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">| JP2000  |      55.00 | JetPack 2000   |</span><br><span class="line">| SAFE    |      50.00 | Safe           |</span><br><span class="line">| JP1000  |      35.00 | JetPack 1000   |</span><br><span class="line">| ANV03   |      14.99 | 2 ton anvil    |</span><br><span class="line">| DTNTR   |      13.00 | Detonator      |</span><br><span class="line">| FB      |      10.00 | Bird seed      |</span><br><span class="line">| TNT2    |      10.00 | TNT (5 sticks) |</span><br><span class="line">| ANV02   |       9.99 | 1 ton anvil    |</span><br><span class="line">| OL1     |       8.99 | Oil can        |</span><br><span class="line">| ANV01   |       5.99 | .5 ton anvil   |</span><br><span class="line">| SLING   |       4.49 | Sling          |</span><br><span class="line">| FU1     |       3.42 | Fuses          |</span><br><span class="line">| FC      |       2.50 | Carrots        |</span><br><span class="line">| TNT1    |       2.50 | TNT (1 stick)  |</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">14 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<ul>
<li>若要对多个列同时进行降序限定，则要对每个字段分别加上关键字 <code>DESC</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price <span class="keyword">DESC</span>, prod_name;	<span class="comment">-- 按价格降序排列</span></span><br></pre></td></tr></table></figure>

<ul>
<li>与 DESC 关键字相反的是 <code>ASC</code>（ASCENDING），实际上可以不用指定，因为升序是默认的。</li>
</ul>
<p>使用 ORDER BY 和 LIMIT 组合，可以找出一个列中的最大值或最小值。</p>
<ul>
<li>例：查找  products 表中最贵物品的值</li>
</ul>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_price</span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">1</span>;	<span class="comment">-- 查找降序第1个值【即最大值】</span></span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+------------+</span><br><span class="line">| prod_price |</span><br><span class="line">+------------+</span><br><span class="line">|      55.00 |</span><br><span class="line">+------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<p><br><br><br></p>
<h3 id="5-4-ORDER-BY-等关键字在语句中的位置"><a href="#5-4-ORDER-BY-等关键字在语句中的位置" class="headerlink" title="5.4 ORDER BY 等关键字在语句中的位置"></a>5.4 ORDER BY 等关键字在语句中的位置</h3><blockquote>
<p><strong>ORDER BY 句子的位置</strong></p>
<p>几个子句【如果都有】的合法顺序为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col1, col2 	<span class="comment">-- 指定返回哪几列</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">&#x27;table&#x27;</span> 		<span class="comment">-- 查询的表</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cola <span class="keyword">DESC</span>, colb 	<span class="comment">-- 指定按什么排序、排序方向</span></span><br><span class="line">LIMIT numofrows;	<span class="comment">-- 限制行数</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><br><br><br></p>
<h3 id="5-5-小结"><a href="#5-5-小结" class="headerlink" title="5.5 小结"></a>5.5 小结</h3><ul>
<li>用 SELECT 语句的 <code>ORDER BY</code> 子句对检索出的数据进行排序。</li>
<li><code>ORDER BY</code> 子句必须是 SELECT 语句中的<font color="ffa600"><strong>最后一条</strong></font>子句。</li>
<li>可根据需要，利用它在一个或多个列上对数据进行排序。</li>
</ul>
<p><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br></p>
<h2 id="6-过滤数据"><a href="#6-过滤数据" class="headerlink" title="6. 过滤数据"></a>6. 过滤数据</h2><p>使用 SELECT 语句的 <strong><code>WHERE</code></strong> 子句<strong>指定搜索条件</strong>。</p>
<p>使用<code>WHERE</code>子句操作符进行数据过滤</p>
<p>检查单个值<code>=、&lt;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="operator">=</span> <span class="string">&#x27;fuses&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="operator">&lt;</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>不匹配检查<code>&lt;&gt;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT vend_id, prod_name</span><br><span class="line">FROM products </span><br><span class="line">WHERE vend_id &lt;&gt; 1003;	-- 等价子句 WHERE vend_id != 1003</span><br></pre></td></tr></table></figure>

<p>范围值检查<code>BETWEEN AND</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="keyword">BETWEEN</span> <span class="number">5</span> <span class="keyword">AND</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>空值检查<code>IS NULL</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  cust_id</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_email <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p><strong>何时使用引号</strong>        </p>
<p>单引号用来限定字符串。<br>如果<strong>将值与串类型的列进行比较</strong>，则<strong>需要限定引号</strong>。用来与数值列进行比较的值不用引号。</p>
</blockquote>
<p><br><br><br></p>
<h3 id="6-1-使用-WHERE-子句"><a href="#6-1-使用-WHERE-子句" class="headerlink" title="6.1 使用 WHERE 子句"></a>6.1 使用 WHERE 子句</h3><p>为什么要使用 WHERE 子句？</p>
<p>数据库表一般包含大量的数据，很少需要检索表中的所有行。<strong>通常只会</strong>根据特定操作或报告的需要<strong>提取表数据的子集</strong>。只检索所需数据需要指定<strong>搜索条件（search criteria）</strong>，搜索条件也成为<strong>过滤条件（filter condition）</strong>。</p>
<p>在 SELECT 语句中，数据根据 WHERE 子句中指定的搜索条件进行过滤。WHERE 子句在表名（FROM 子句）之后给出，如下所示：</p>
<p><strong>输入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT prod_name, prod_price</span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_price = 2.50;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>该语句从 <code>products</code> 表中检索两个列，返回 <code>prod_price</code> 值为 2.50 的行。</p>
<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------------+------------+</span><br><span class="line">| prod_name     | prod_price |</span><br><span class="line">+---------------+------------+</span><br><span class="line">| Carrots       |       2.50 |</span><br><span class="line">| TNT (1 stick) |       2.50 |</span><br><span class="line">+---------------+------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<h4 id="WHERE-子句的位置"><a href="#WHERE-子句的位置" class="headerlink" title="WHERE 子句的位置"></a>WHERE 子句的位置</h4><p>在同时使用 <code>ORDER BY</code> 和 <code>WHERE</code> 子句时，应该让 <code>ORDER BY</code> 位于 <code>WHERE</code> 之后，否则将会产生错误。</p>
<p><br><br><br></p>
<h3 id="6-2-WHERE-子句操作符"><a href="#6-2-WHERE-子句操作符" class="headerlink" title="6.2 WHERE 子句操作符"></a>6.2 WHERE 子句操作符</h3><p><strong>表6-1 <code>WHERE</code> 子句操作符</strong></p>
<table>
<thead>
<tr>
<th align="center">操 作 符</th>
<th align="center">说 明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>=</code></td>
<td align="center">等于</td>
</tr>
<tr>
<td align="center"><code>&lt;&gt;</code></td>
<td align="center">不等于</td>
</tr>
<tr>
<td align="center"><code>!=</code></td>
<td align="center">不等于</td>
</tr>
<tr>
<td align="center"><code>&lt;</code></td>
<td align="center">小于</td>
</tr>
<tr>
<td align="center"><code>&lt;=</code></td>
<td align="center">小于等于</td>
</tr>
<tr>
<td align="center"><code>&gt;</code></td>
<td align="center">大于</td>
</tr>
<tr>
<td align="center"><code>&gt;=</code></td>
<td align="center">大于等于</td>
</tr>
<tr>
<td align="center"><code>BETWEEN</code></td>
<td align="center">在指定的两个值之间</td>
</tr>
</tbody></table>
<p><br><br></p>
<h4 id="6-2-1-检查单个值【-、-lt-】"><a href="#6-2-1-检查单个值【-、-lt-】" class="headerlink" title="6.2.1 检查单个值【=、&lt;】"></a>6.2.1 检查单个值【=、&lt;】</h4><p><strong>例1</strong>：测试相等</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="operator">=</span> <span class="string">&#x27;fuses&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-----------+------------+</span><br><span class="line">| prod_name | prod_price |</span><br><span class="line">+-----------+------------+</span><br><span class="line">| Fuses     |       3.42 |</span><br><span class="line">+-----------+------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p><strong>例2</strong>：列出价格小于10美元的所有产品【的产品名和价格】</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="operator">&lt;</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------------+------------+</span><br><span class="line">| prod_name     | prod_price |</span><br><span class="line">+---------------+------------+</span><br><span class="line">| .5 ton anvil  |       5.99 |</span><br><span class="line">| 1 ton anvil   |       9.99 |</span><br><span class="line">| Carrots       |       2.50 |</span><br><span class="line">| Fuses         |       3.42 |</span><br><span class="line">| Oil can       |       8.99 |</span><br><span class="line">| Sling         |       4.49 |</span><br><span class="line">| TNT (1 stick) |       2.50 |</span><br><span class="line">+---------------+------------+</span><br><span class="line">7 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h4 id="6-2-2-不匹配检查【-】"><a href="#6-2-2-不匹配检查【-】" class="headerlink" title="6.2.2 不匹配检查【!=】"></a>6.2.2 不匹配检查【!=】</h4><p><strong>例1</strong>：列出不是由供应商1003制造的所有产品【的供应商id和产品名】</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">&lt;&gt;</span> <span class="number">1003</span>;	<span class="comment">-- 等价子句 WHERE vend_id != 1003</span></span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+--------------+</span><br><span class="line">| vend_id | prod_name    |</span><br><span class="line">+---------+--------------+</span><br><span class="line">|    1001 | .5 ton anvil |</span><br><span class="line">|    1001 | 1 ton anvil  |</span><br><span class="line">|    1001 | 2 ton anvil  |</span><br><span class="line">|    1002 | Fuses        |</span><br><span class="line">|    1002 | Oil can      |</span><br><span class="line">|    1005 | JetPack 1000 |</span><br><span class="line">|    1005 | JetPack 2000 |</span><br><span class="line">+---------+--------------+</span><br><span class="line">7 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<h5 id="附：何时使用引号"><a href="#附：何时使用引号" class="headerlink" title="附：何时使用引号"></a>附：何时使用引号</h5><blockquote>
<p><strong>何时使用引号</strong>        </p>
<p>单引号用来限定字符串。<br>如果<strong>将值与串类型的列进行比较</strong>，则<strong>需要限定引号</strong>。用来与数值列进行比较的值不用引号。</p>
</blockquote>
<p><br><br></p>
<h4 id="6-2-3-范围值检查【BETWEEN-AND】"><a href="#6-2-3-范围值检查【BETWEEN-AND】" class="headerlink" title="6.2.3 范围值检查【BETWEEN AND】"></a>6.2.3 范围值检查【BETWEEN AND】</h4><p>例：使用 <code>BETWEEN</code> 操作符，检索价格在5美元和10美元之间的产品【返回产品名和产品价格】</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="keyword">BETWEEN</span> <span class="number">5</span> <span class="keyword">AND</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----------------+------------+</span><br><span class="line">| prod_name      | prod_price |</span><br><span class="line">+----------------+------------+</span><br><span class="line">| .5 ton anvil   |       5.99 |</span><br><span class="line">| 1 ton anvil    |       9.99 |</span><br><span class="line">| Bird seed      |      10.00 |</span><br><span class="line">| Oil can        |       8.99 |</span><br><span class="line">| TNT (5 sticks) |      10.00 |</span><br><span class="line">+----------------+------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>使用 <code>BETWEEN</code> 关键字时，必须指定所需范围的<strong>低端值</strong>和<strong>高端值</strong>，必须<strong>用 <code>AND</code> 分隔</strong>。</p>
<p><strong><code>BETWEEN AND</code> 匹配范围</strong>中<font color="ffa600"><strong>包括</strong></font>指定的<strong>开始值</strong>和<strong>结束值</strong>。</p>
<p><br><br></p>
<h4 id="6-2-4-空值检查【IS-NULL】"><a href="#6-2-4-空值检查【IS-NULL】" class="headerlink" title="6.2.4 空值检查【IS NULL】"></a>6.2.4 空值检查【IS NULL】</h4><p>建表时，表设计人员可以指定其中的列是否可以不包含值。在一个列不包含值时，称其为包含空值 <code>NULL</code>。</p>
<ul>
<li><strong>NULL    无值（no value）</strong>：它与字段包含0、空字符串或仅仅包含空格不同。</li>
</ul>
<p>例：通过 <code>IS NULL</code> 子句检查具有 <code>NULL</code> 值的列</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  cust_id</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_email <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+</span><br><span class="line">| cust_id |</span><br><span class="line">+---------+</span><br><span class="line">|   10002 |</span><br><span class="line">|   10005 |</span><br><span class="line">+---------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br></p>
<h2 id="7-数据过滤"><a href="#7-数据过滤" class="headerlink" title="7. 数据过滤"></a>7. 数据过滤</h2><ul>
<li>使用<strong>组合 <code>WHERE</code> 子句</strong>以建立功能更强的更高级的搜索条件。</li>
<li><strong><code>NOT</code></strong> 和 <strong><code>IN</code></strong> 操作符。</li>
</ul>
<br>

<p>使用<code>AND</code>操作符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name </span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="number">1003</span> <span class="keyword">AND</span> prod_price <span class="operator">&lt;=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>使用<code>OR</code>操作符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="number">1002</span> <span class="keyword">OR</span> vend_id <span class="operator">=</span> <span class="number">1003</span>;</span><br></pre></td></tr></table></figure>

<p>使用<code>IN </code>操作符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">IN</span> (<span class="number">1002</span>, <span class="number">1003</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>

<p>使用<code>NOT</code>操作符 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">1002</span>, <span class="number">1003</span>) </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>NOT</code> 可以看成是一个集合运算中的<strong>取补集</strong>或<strong>取反</strong>的操作。</li>
</ul>
<br>

<blockquote>
<p><strong>注意优先级</strong>    SQL 中，<strong>AND 操作符的优先级高于 OR 操作符</strong>。所以涉及业务逻辑时，<font color="ffa600"><strong>要使用（）保证业务逻辑正确</strong></font>，<strong>尽量避免受运算优先级影响</strong>。</p>
</blockquote>
<p><br><br><br></p>
<h3 id="7-1-组合-WHERE-子句"><a href="#7-1-组合-WHERE-子句" class="headerlink" title="7.1 组合 WHERE 子句"></a>7.1 组合 WHERE 子句</h3><p>MySQL允许给出<strong>多个 <code>WHERE</code> 子句</strong>。这些子句可以<strong>两种</strong>方式使用：<strong>以 <code>AND</code> 子句的方式</strong>或 <strong><code>OR</code> 子句的方式</strong>使用。</p>
<ul>
<li><strong>操作符（operator）</strong>：用来联结或改变 <code>WHERE</code> 子句中的子句的<strong>关键字</strong>。也成为<strong>逻辑操作符（logical operator）</strong>。</li>
</ul>
<p><br><br></p>
<h4 id="7-1-1-AND-操作符"><a href="#7-1-1-AND-操作符" class="headerlink" title="7.1.1 AND 操作符"></a>7.1.1 AND 操作符</h4><ul>
<li><code>AND</code>：用在 <code>WHERE</code> 子句中的关键字，用来指示检索满足所有给定条件的行。</li>
</ul>
<blockquote>
<p>可以添加多个过滤条件，没添加一条就要使用一个 <code>AND</code>。</p>
</blockquote>
<p>为了通过不止一个列进行过滤，可以使用 <code>AND</code> 操作符给 <code>WHERE</code> 子句附加条件。举例如下：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name </span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="number">1003</span> <span class="keyword">AND</span> prod_price <span class="operator">&lt;=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>该语句检索【有供应商1003制造】<strong>且</strong>【价格小于等于10美元】的产品id、价格和名称。这条 SELECT 语句中的 WHERE 子句包含两个条件，且用 <code>AND</code> 关键字联结它们。AND 指示 DBMS 返回<strong>满足所有给定条件</strong>的行。</p>
<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+------------+----------------+</span><br><span class="line">| prod_id | prod_price | prod_name      |</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">| FB      |      10.00 | Bird seed      |</span><br><span class="line">| FC      |       2.50 | Carrots        |</span><br><span class="line">| SLING   |       4.49 | Sling          |</span><br><span class="line">| TNT1    |       2.50 | TNT (1 stick)  |</span><br><span class="line">| TNT2    |      10.00 | TNT (5 sticks) |</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h4 id="7-1-2-OR-操作符"><a href="#7-1-2-OR-操作符" class="headerlink" title="7.1.2 OR 操作符"></a>7.1.2 OR 操作符</h4><p><code>OR</code> 操作符指示 MySQL 检索匹配任一条件的行。示例如下：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="number">1002</span> <span class="keyword">OR</span> vend_id <span class="operator">=</span> <span class="number">1003</span>;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----------------+------------+</span><br><span class="line">| prod_name      | prod_price |</span><br><span class="line">+----------------+------------+</span><br><span class="line">| Fuses          |       3.42 |</span><br><span class="line">| Oil can        |       8.99 |</span><br><span class="line">| Detonator      |      13.00 |</span><br><span class="line">| Bird seed      |      10.00 |</span><br><span class="line">| Carrots        |       2.50 |</span><br><span class="line">| Safe           |      50.00 |</span><br><span class="line">| Sling          |       4.49 |</span><br><span class="line">| TNT (1 stick)  |       2.50 |</span><br><span class="line">| TNT (5 sticks) |      10.00 |</span><br><span class="line">+----------------+------------+</span><br><span class="line">9 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h4 id="7-1-3-计算次序"><a href="#7-1-3-计算次序" class="headerlink" title="7.1.3 计算次序"></a>7.1.3 计算次序</h4><ul>
<li><strong>注意</strong>：SQL 中，<font color="ffa600"><strong>AND 操作符的优先级高于 OR 操作符</strong></font>。所以涉及业务逻辑时，推荐使用（）保证业务逻辑正确，<strong>尽量避免受运算优先级影响</strong>。</li>
</ul>
<p><br><br><br></p>
<h3 id="7-2-IN-操作符"><a href="#7-2-IN-操作符" class="headerlink" title="7.2 IN 操作符"></a>7.2 IN 操作符</h3><ul>
<li>**<code>IN</code>**：WHERE 子句中用来指定要匹配值的清单的关键字，功能与 <strong><code>OR</code></strong> 相当。</li>
</ul>
<p><code>IN</code> 操作符用来指定条件范围，范围中的每个条件都可以进行匹配。<code>IN</code> 取合法值清单由圆括号包裹，逗号分隔。示例如下：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">IN</span> (<span class="number">1002</span>, <span class="number">1003</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----------------+------------+</span><br><span class="line">| prod_name      | prod_price |</span><br><span class="line">+----------------+------------+</span><br><span class="line">| Bird seed      |      10.00 |</span><br><span class="line">| Carrots        |       2.50 |</span><br><span class="line">| Detonator      |      13.00 |</span><br><span class="line">| Fuses          |       3.42 |</span><br><span class="line">| Oil can        |       8.99 |</span><br><span class="line">| Safe           |      50.00 |</span><br><span class="line">| Sling          |       4.49 |</span><br><span class="line">| TNT (1 stick)  |       2.50 |</span><br><span class="line">| TNT (5 sticks) |      10.00 |</span><br><span class="line">+----------------+------------+</span><br><span class="line">9 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p><code>IN</code> 操作符与 <code>OR</code> 关键字实现几乎相同的功能。</p>
<ul>
<li>使用 <code>IN</code> 操作符有以下几条优点：<ul>
<li>在使用长的合法选项清单时，IN操作符的<strong>语法更清楚</strong>且<strong>更直观</strong>。</li>
<li>使用<code>IN</code>时，计算的次序更容易管理（因为使用的操作符更少）。</li>
<li>IN操作符一般比OR操作符清单执行更快。</li>
<li>IN的最大优点是可以包含其它 <code>SELECT</code> 语句，使得能够更动态地建立 <code>WHERE</code> 子句。</li>
</ul>
</li>
</ul>
<p><br><br><br></p>
<h3 id="7-3-NOT-操作符"><a href="#7-3-NOT-操作符" class="headerlink" title="7.3 NOT 操作符"></a>7.3 NOT 操作符</h3><ul>
<li>**<code>NOT</code>**：WHERE 子句中用来否定后跟条件的关键字。</li>
</ul>
<p>WHERE 子句的 NOT 操作符有且仅有一个功能——否定它之后所跟的任何条件。</p>
<p>例：列出除了【<code>vend_id</code>为】1002和1003之外的所有供应商制造的产品。</p>
<p><strong>输入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT prod_name, prod_price </span><br><span class="line">FROM products </span><br><span class="line">WHERE vend_id NOT IN (1002, 1003) </span><br><span class="line">ORDER BY prod_name;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+--------------+------------+</span><br><span class="line">| prod_name    | prod_price |</span><br><span class="line">+--------------+------------+</span><br><span class="line">| .5 ton anvil |       5.99 |</span><br><span class="line">| 1 ton anvil  |       9.99 |</span><br><span class="line">| 2 ton anvil  |      14.99 |</span><br><span class="line">| JetPack 1000 |      35.00 |</span><br><span class="line">| JetPack 2000 |      55.00 |</span><br><span class="line">+--------------+------------+</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>为什么使用NOT？对于简单的 WHERE 子句，使用 NOT 确实么有什么优势，但在复杂的子句中，NOT 非常有用。</p>
<p>例如：在与 IN 操作符联合使用时，NOT 使找出与条件列表不匹配的行非常简单。</p>
<blockquote>
<p>个人理解：<code>NOT</code> 可以看成是一个集合运算中的<strong>取补集</strong>或<strong>取反</strong>的操作。</p>
<p><strong>MySQL 中的 NOT</strong></p>
<p><strong>MySQL支持</strong>使用 NOT 对 <strong>IN</strong>、<strong>BETWEEN</strong> 和 <strong>EXISTS</strong> 子句取反，这与多数其他DBMS允许使用 NOT 对各种条件取反有很大的差别。</p>
</blockquote>
<p><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br></p>
<h2 id="8-用通配符进行过滤"><a href="#8-用通配符进行过滤" class="headerlink" title="8. 用通配符进行过滤"></a>8. 用通配符进行过滤</h2><p>本节介绍什么是通配符、如何使用通配符以及怎样使用 <code>LIKE</code> 操作符进行通配搜索，以便对数据进行复杂过滤。</p>
<ul>
<li><strong>通配符（wildcard）</strong>：用来<strong>匹配值的一部分</strong>的特殊字符。</li>
<li><strong>搜索模式（search pattern）</strong>：由字面值、通配符或两者组合构成的搜索条件。</li>
</ul>
<p><br><br><br></p>
<h3 id="8-1-LIKE-操作符"><a href="#8-1-LIKE-操作符" class="headerlink" title="8.1 LIKE 操作符"></a>8.1 LIKE 操作符</h3><p>前面所介绍的操作符都是针对已知值进行过滤的。不管是匹配一个值还是多个值，测试大于还是小于已知值，或检查某个范围的值，共同点是<strong>过滤中使用的值都是已知的</strong>。但是，这种过滤方法并不在所有情况都适用。例如，如何搜索产品中<strong>包含文本 anvil 的所有产品</strong>？用简单的比较操作符是不行的，这里必须<strong>使用通配符</strong>。</p>
<p>利用通配符可以创建<strong>比较特定数据的搜索模式</strong>。在这个例子中，如果想找出名称包含 anvil 的所有产品，可构造一个通配符搜索模式，找出产品名中任何位置出现 anvil 的产品。可<strong>构造一个通配符搜索模式</strong>，找出产品名中任何位置出现 anvil 的产品。</p>
<p>通配符本身实际是 SQL 的 WHERE 子句中有特殊含义的字符，SQL 支持几种通配符。</p>
<p><strong>为了在搜索子句中使用通配符，必须使用 <font color="ffa600">LIKE</font> 操作符</strong>。LIKE 指示 MySQL，后跟的搜索模式利用通配符匹配而不是直接相等匹配进行比较。</p>
<blockquote>
<p><strong>谓词（predicate）</strong></p>
<p>操作符何时不是操作符？答案是它<strong>作为谓词（predicate）时</strong>。从技术上说，LIKE 是为此而不是操作符。虽然最终的结果是相同的，但应该对此术语有所了解。在 SQL 文档中会出现此术语。</p>
</blockquote>
<p><br><br></p>
<h4 id="8-1-1-百分号（-）通配符"><a href="#8-1-1-百分号（-）通配符" class="headerlink" title="8.1.1 百分号（%）通配符"></a>8.1.1 百分号（%）通配符</h4><p>最常使用的通配符即<strong>百分号（%）</strong>。在搜索串中，% <strong>表示任何字符出现任意次数</strong>。</p>
<p><strong>例1</strong>：找出所有以词 jet 起头的产品。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">&#x27;jet%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+--------------+</span><br><span class="line">| prod_id | prod_name    |</span><br><span class="line">+---------+--------------+</span><br><span class="line">| JP1000  | JetPack 1000 |</span><br><span class="line">| JP2000  | JetPack 2000 |</span><br><span class="line">+---------+--------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>此例子使用了<strong>搜索模式 ‘jet%’</strong>。在执行这条子句时，将检索任意以 jet 起头的词。%告诉MySQL接受 jet 之后的任意字符，不管有多少字符。</p>
<blockquote>
<p><strong>区分大小写</strong></p>
<p>注意：根据MySQL的配置方式，搜索可以是区分大小写的。区分大小写时，大小写不一致将不匹配。</p>
</blockquote>
<br>

<p><strong>例2</strong>：检索任何位置包含文本【anvil】的值</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">&#x27;%anvil%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+--------------+</span><br><span class="line">| prod_id | prod_name    |</span><br><span class="line">+---------+--------------+</span><br><span class="line">| ANV01   | .5 ton anvil |</span><br><span class="line">| ANV02   | 1 ton anvil  |</span><br><span class="line">| ANV03   | 2 ton anvil  |</span><br><span class="line">+---------+--------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>搜索模式 <code>&#39;%anvil%&#39;</code> 表示匹配任何位置包含文本 anvil 的值。</p>
<br>

<p>通配符也可以出现在搜索模式中间。</p>
<p><strong>例</strong>：在好处以 <code>s</code> 开头以 <code>e</code> 结尾的所有产品</p>
<p>输入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">&#x27;s%e&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+-----------+</span><br><span class="line">| prod_id | prod_name |</span><br><span class="line">+---------+-----------+</span><br><span class="line">| SAFE    | Safe      |</span><br><span class="line">+---------+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>注意</strong>：<code>%</code> 可以匹配 <strong>0个</strong>，1个或多个字符。</li>
</ul>
<blockquote>
<p><strong>注意尾空格</strong></p>
<p>保存数据的尾空格可能会<strong>干扰通配符匹配</strong>。</p>
<p>解决办法：</p>
<ul>
<li>在搜索模式最后附加一个%。</li>
<li>一个更好的办法是<strong>使用函数</strong>。</li>
</ul>
</blockquote>
<blockquote>
<p><strong>注意NULL</strong></p>
<p>%通配符无法匹配 NULL 值。</p>
</blockquote>
<p><br><br></p>
<h4 id="8-1-2-下划线（-）通配符"><a href="#8-1-2-下划线（-）通配符" class="headerlink" title="8.1.2 下划线（_）通配符"></a>8.1.2 下划线（_）通配符</h4><p>下划线 <code>_</code> 的用途与 <code>%</code> 一样，但只能匹配单个字符而不是多个字符。举例如下：</p>
<p>输入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">&#x27;_ ton anvil&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+-------------+</span><br><span class="line">| prod_id | prod_name   |</span><br><span class="line">+---------+-------------+</span><br><span class="line">| ANV02   | 1 ton anvil |</span><br><span class="line">| ANV03   | 2 ton anvil |</span><br><span class="line">+---------+-------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>分析</p>
<p>与上方 <code>%</code> 检索结果对比更清晰。</p>
<p><br><br><br></p>
<h3 id="8-2-使用通配符的技巧"><a href="#8-2-使用通配符的技巧" class="headerlink" title="8.2 使用通配符的技巧"></a>8.2 使用通配符的技巧</h3><p>MySQL的通配符很有用，但功能是有代价的——通配符搜索的处理一般要比前面讨论的其他搜索所画时间更长。这里给出一些使用通配符要记住的技巧：</p>
<ul>
<li><strong>不要过度使用通配符</strong>。如果其他操作能达到相同的目的，应该使用其他操作符。</li>
<li>在确实需要使用通配符时，除非绝对有必要，否则<strong>不要把通配符用在搜索模式的开始处</strong>。把通配符置于搜素模式的开始处，搜索起来是最慢的。</li>
<li>仔细<strong>注意通配符的位置</strong>，如果放错地方，可能不会返回想要的数据。</li>
</ul>
<p><br><br><br></p>
<h3 id="8-3-小结"><a href="#8-3-小结" class="headerlink" title="8.3 小结"></a>8.3 小结</h3><ul>
<li>什么是通配符。</li>
<li>如何在 WHERE 子句中使用 SQL 通配符。</li>
<li>通配符应细心使用，不要过度使用。</li>
</ul>
<p><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br></p>
<h2 id="9-用正则表达式进行搜索"><a href="#9-用正则表达式进行搜索" class="headerlink" title="9. 用正则表达式进行搜索"></a>9. 用正则表达式进行搜索</h2><ul>
<li>如何在MySQL  WHERE 子句内使用正则表达式来更好地控制数据过滤</li>
</ul>
<p><br><br><br></p>
<h3 id="9-1-正则表达式介绍"><a href="#9-1-正则表达式介绍" class="headerlink" title="9.1 正则表达式介绍"></a>9.1 正则表达式介绍</h3><p>相较于前两节的匹配、比价、通配符操作寻找数据，正则表达式适用于更加复杂的条件。</p>
<p>正则表达式是用来匹配文本的特殊的串（字符集合）。</p>
<ul>
<li>正则表达式的应用场景<ul>
<li>从一个文本文件中提取电话号码</li>
<li>查找名字中间有数字的所有文件</li>
<li>在一个文本块中找到所有重复的单词</li>
<li>替换一个页面中的所有URL为这些URL的实际HTML链接</li>
</ul>
</li>
</ul>
<p>所有种类的程序设计语言、文本编辑器、操作系统等都支持正则表达式。</p>
<p>正则表达式用正则表达式语言建立，正则表达式语言是用来完成上述及更多工作的一种特殊语言，具有自身的语法和指令。</p>
<p><br><br><br></p>
<h3 id="9-2-使用-MySQL-正则表达式"><a href="#9-2-使用-MySQL-正则表达式" class="headerlink" title="9.2 使用 MySQL 正则表达式"></a>9.2 使用 MySQL 正则表达式</h3><ul>
<li>正则表达式与MySQL的关系：<ul>
<li><strong>正则表达式的作用</strong>是<strong>匹配文本</strong>，将一个模式（正则表达式）与一个文本串进行比较。</li>
<li>MySQL用 <strong>WHERE 子句</strong>对正则表达式提供了初步的支持，允许<strong>指定正则表达式</strong>，<strong>过滤</strong> SELECT 检索出的<strong>数据</strong>。</li>
</ul>
</li>
</ul>
<blockquote>
<p>注：MySQL仅支持正则表达式语言的一个很小的子集。</p>
</blockquote>
<p><br><br><br></p>
<h4 id="9-2-1-基本字符匹配"><a href="#9-2-1-基本字符匹配" class="headerlink" title="9.2.1 基本字符匹配"></a>9.2.1 基本字符匹配</h4><p>从一个简单的例子开始。</p>
<p><strong>例1</strong>：检索列 prod_name 包含文本 ‘1000’ 的所有行</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;1000&#x27;</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+--------------+</span><br><span class="line">| prod_name    |</span><br><span class="line">+--------------+</span><br><span class="line">| JetPack 1000 |</span><br><span class="line">+--------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>从格式上看，仅仅是关键字 <strong>LIKE</strong> 被 <strong>REGEXP</strong> 替代。该语句告诉MySQL：<strong>REGEXP</strong> 后所跟的东西作为<strong>正则表达式</strong>（与文字正文1000匹配的一个正则表达式）处理。</p>
<p><br><br></p>
<p><strong>例2</strong>：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;.000&#x27;</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+--------------+</span><br><span class="line">| prod_name    |</span><br><span class="line">+--------------+</span><br><span class="line">| JetPack 1000 |</span><br><span class="line">| JetPack 2000 |</span><br><span class="line">+--------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>这里使用了正则表达式 <strong>.000</strong> 。**<code>.</code>** 是正则表达式语言中一个特殊的字符，<font color="ffa600">表示匹配任意一个字符</font>，因此，1000 和 2000 都匹配且返回。</p>
<p>当然，例2也可以用 LIKE 和通配符来完成。语句如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">&#x27;%000&#x27;</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>

<br>

<h5 id="LIKE-与-REGEXP"><a href="#LIKE-与-REGEXP" class="headerlink" title="LIKE 与 REGEXP"></a>LIKE 与 REGEXP</h5><blockquote>
<p><strong><code>LIKE</code> 与 <code>REGEXP</code></strong> 之间有一个重要差别。以如下两条语句为例。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">&#x27;1000&#x27;</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;1000&#x27;</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>

<p>如果执行上述两条语句，会发现第一条语句不返回数据，而第二条语句返回一行。</p>
<ul>
<li>原因：<ul>
<li><strong><code>LIKE</code> 匹配整个列</strong>。如果被匹配的文本在列值中作为部分出现，<code>LIKE</code> 将不会找到它，相应的行也不被返回（除非使用通配符）。</li>
<li><strong>而 <code>REGEXP</code> 在列值内进行匹配</strong>，如果匹配的文本在列值中出现，<code>REGEXP</code> 将会找到它，相应的行被返回。这是一个重要的差别。</li>
</ul>
</li>
</ul>
<p><code>REGEXP</code> 也能用来匹配整个列值（从而起与 LIKE 相同的作用），需要使用 <strong><code>^</code></strong> 和 <strong><code>$</code></strong> 定位符（anchor）即可。</p>
</blockquote>
<h5 id="匹配不区分大小写"><a href="#匹配不区分大小写" class="headerlink" title="匹配不区分大小写"></a>匹配不区分大小写</h5><blockquote>
<p>MySQL中的正则表达式匹配（自版本3.23.4后）不区分大小写。</p>
<p>为区分大小写，可使用 <code>BINARY</code> 关键字。如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="type">BINARY</span> <span class="string">&#x27;JetPack .000&#x27;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><br><br></p>
<h4 id="9-2-2-进行-OR-匹配"><a href="#9-2-2-进行-OR-匹配" class="headerlink" title="9.2.2 进行 OR 匹配"></a>9.2.2 进行 OR 匹配</h4><p>为搜索两个串之一（或为一个串，或为另一个串），使用 <strong><code>|</code></strong> ，举例如下。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;1000|2000&#x27;</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+--------------+</span><br><span class="line">| prod_name    |</span><br><span class="line">+--------------+</span><br><span class="line">| JetPack 1000 |</span><br><span class="line">| JetPack 2000 |</span><br><span class="line">+--------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>语句使用了正则表达式 <strong><code>1000|2000</code><strong>。</strong><code>|</code></strong> 为正则表达式的 <code>OR</code> 操作符。它表示匹配其中之一。</p>
<blockquote>
<p><strong>两个以上的 <code>OR</code> 条件</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;1000|2000|3000&#x27;</span>;	<span class="comment">-- 将匹配1000或2000或3000</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><br><br></p>
<h4 id="9-2-3-匹配几个字符之一"><a href="#9-2-3-匹配几个字符之一" class="headerlink" title="9.2.3 匹配几个字符之一"></a>9.2.3 匹配几个字符之一</h4><p>要匹配某一组字符中的任何单一字符没通过 <strong>[]</strong> 实现。</p>
<p>输入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name </span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;[123] Ton&#x27;</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-------------+</span><br><span class="line">| prod_name   |</span><br><span class="line">+-------------+</span><br><span class="line">| 1 ton anvil |</span><br><span class="line">| 2 ton anvil |</span><br><span class="line">+-------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>分析</p>
<p>这里使用了正则表达式 <code>[123] Ton</code>。<code>[123]</code> 定义一组字符，它的意思是匹配1或2或3，因此，1 ton 和 2 ton 都匹配且返回。</p>
<p><code>[]</code>是另一种形式的 <code>OR</code> 语句。事实上，正则表达式 <strong><code>[123] Ton</code></strong> 是 <strong><code>[1|2|3] Ton</code></strong> 的缩写。也可以使用后者。</p>
<p><strong><code>[]</code></strong> 规定了内部 <strong><code>|</code></strong> 字符（如果有的话）的作用域。</p>
<p>字符集合也可以被否定，及匹配时排除指定的字符。使用方法：在集合开始处加一个 <strong><code>^</code></strong> 即可。例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;[^123] Ton&#x27;</span>	<span class="comment">-- 匹配除这些字符外的任何东西</span></span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h4 id="9-2-4-匹配范围"><a href="#9-2-4-匹配范围" class="headerlink" title="9.2.4 匹配范围"></a>9.2.4 匹配范围</h4><p>可以用 <strong>-</strong> 来定义一个范围。举例如下</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;[1-5] Ton&#x27;</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+--------------+</span><br><span class="line">| prod_name    |</span><br><span class="line">+--------------+</span><br><span class="line">| .5 ton anvil |</span><br><span class="line">| 1 ton anvil  |</span><br><span class="line">| 2 ton anvil  |</span><br><span class="line">+--------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>此处 <strong>[1-5]</strong> 定义了一个范围。**’[1-5] Ton’** 作为正则表达式进行匹配。</p>
<p><br><br><br></p>
<h4 id="9-2-5-匹配特殊字符"><a href="#9-2-5-匹配特殊字符" class="headerlink" title="9.2.5 匹配特殊字符"></a>9.2.5 匹配特殊字符</h4><p>如果想匹配具有特殊含义的特殊字符【如 . 、[] 、| 、和 - 等】，需要用 <code>\\</code>为前导。</p>
<p><strong>例</strong>：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name </span><br><span class="line"><span class="keyword">FROM</span> vendors </span><br><span class="line"><span class="keyword">WHERE</span> vend_name REGEXP <span class="string">&#x27;\\.&#x27;</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+--------------+</span><br><span class="line">| vend_name    |</span><br><span class="line">+--------------+</span><br><span class="line">| Furball Inc. |</span><br><span class="line">+--------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>原理为<strong>转义（escaping）</strong>。</p>
<p><code>\\</code>也用来引用<strong>元字符</strong>（空白元字符——具有特殊含义的字符），如下标所示。</p>
<table>
<thead>
<tr>
<th align="center">元字符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>\\f</code></td>
<td align="center">换页</td>
</tr>
<tr>
<td align="center"><code>\\n</code></td>
<td align="center">换行</td>
</tr>
<tr>
<td align="center"><code>\\r</code></td>
<td align="center">回车</td>
</tr>
<tr>
<td align="center"><code>\\t</code></td>
<td align="center">制表</td>
</tr>
<tr>
<td align="center"><code>\\v</code></td>
<td align="center">纵向制表</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>匹配 <code>\</code></strong> </p>
<p>为了匹配反斜杠字符本身，需要使用<code>\\\</code>。</p>
<p><strong><code>\</code> 或 <code>\\</code></strong></p>
<p>多数正则表达式实现用单个反斜杠转义特殊字符。但MySQL要求两个反斜杠（MySQL自己解释一个，正则表达式库解释另外一个）。</p>
</blockquote>
<p><br><br></p>
<h4 id="9-2-6-匹配字符类"><a href="#9-2-6-匹配字符类" class="headerlink" title="9.2.6 匹配字符类"></a>9.2.6 匹配字符类</h4><p>为了方便工作，可以使用预定义的字符集，称为字符类（character class）。表9-2列出字符类及它们的含义。</p>
<p><strong>表9-2 字符类</strong></p>
<table>
<thead>
<tr>
<th align="center">类</th>
<th align="center">说 明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>[:alnum:]</code></td>
<td align="center">任意字母和数字（同<code>[a-zA-Z0-9]</code> ）</td>
</tr>
<tr>
<td align="center"><code>[:alpha:]</code></td>
<td align="center">任意字符（同<code>[a-zA-Z]</code> ）</td>
</tr>
<tr>
<td align="center"><code>[:blank:]</code></td>
<td align="center">空格和制表（同<code>[\\t]</code> ）</td>
</tr>
<tr>
<td align="center"><code>[:cntrl:]</code></td>
<td align="center">ASCII控制字符（ASCII <code>0</code> 到<code>31</code> 和<code>127</code> ）</td>
</tr>
<tr>
<td align="center"><code>[:digit:]</code></td>
<td align="center">任意数字（同<code>[0-9]</code> ）</td>
</tr>
<tr>
<td align="center"><code>[:graph:]</code></td>
<td align="center">与<code>[:print:]</code> 相同，但不包括空格</td>
</tr>
<tr>
<td align="center"><code>[:lower:]</code></td>
<td align="center">任意小写字母（同<code>[a-z]</code> ）</td>
</tr>
<tr>
<td align="center"><code>[:print:]</code></td>
<td align="center">任意可打印字符</td>
</tr>
<tr>
<td align="center"><code>[:punct:]</code></td>
<td align="center">既不在<code>[:alnum:]</code> 又不在<code>[:cntrl:]</code> 中的任意字符</td>
</tr>
<tr>
<td align="center"><code>[:space:]</code></td>
<td align="center">包括空格在内的任意空白字符（同<code>[\\f\\n\\r\\t\\v]</code> ）</td>
</tr>
<tr>
<td align="center"><code>[:upper:]</code></td>
<td align="center">任意大写字母（同<code>[A-Z]</code> ）</td>
</tr>
<tr>
<td align="center"><code>[:xdigit:]</code></td>
<td align="center">任意十六进制数字（同<code>[a-fA-F0-9]</code> ）</td>
</tr>
</tbody></table>
<p><br><br></p>
<h4 id="9-2-7-匹配多个实例"><a href="#9-2-7-匹配多个实例" class="headerlink" title="9.2.7 匹配多个实例"></a>9.2.7 匹配多个实例</h4><ul>
<li>应用场景：<ul>
<li>有时候需要对匹配的数目进行更强的控制</li>
<li>需要寻找所有的数，不管数中包含多少数字</li>
<li>想寻找一个单词并且还能够适应一个尾随的s（如果存在）</li>
<li>等等</li>
</ul>
</li>
</ul>
<p>这可以用下表列出的<font color="ffa600"><strong>正则表达式重复元字符</strong></font>来完成。</p>
<table>
<thead>
<tr>
<th align="center">元字符</th>
<th align="center">说    明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>*</code></td>
<td align="center">0个或多个匹配</td>
</tr>
<tr>
<td align="center"><code>+</code></td>
<td align="center">1个或多个匹配（等于  <code>&#123;1,&#125;</code> ）</td>
</tr>
<tr>
<td align="center"><code>?</code></td>
<td align="center">0个或1个匹配（等于  <code>&#123;0,1&#125;</code> ）</td>
</tr>
<tr>
<td align="center"><code>&#123;n&#125;</code></td>
<td align="center">指定数目的匹配</td>
</tr>
<tr>
<td align="center"><code>&#123;n,&#125;</code></td>
<td align="center">不少于指定数目的匹配</td>
</tr>
<tr>
<td align="center"><code>&#123;n,m&#125;</code></td>
<td align="center">匹配数目的范围（m不超过255）</td>
</tr>
</tbody></table>
<br>

<p><strong>例1</strong>：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;\\([0-9] sticks?\\)&#x27;</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----------------+</span><br><span class="line">| prod_name      |</span><br><span class="line">+----------------+</span><br><span class="line">| TNT (1 stick)  |</span><br><span class="line">| TNT (5 sticks) |</span><br><span class="line">+----------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>正则表达式<code>\\([0-9]sticks?\\)</code> 需要解说一下。<code>\\(</code> 匹配(，<code>[0-9]</code> 匹配任意数字（这个例子中为1和5），<code>sticks?</code> 匹配<code>stick</code> 和<code>sticks</code> （<code>s</code> 后的<code>?</code> 使<code>s</code> 可选，因为<code>?</code> 匹配它前面的任何字符的0次或1次出现），<code>\\)</code> 匹配<code>)</code> 。没有<code>?</code> ，匹配<code>stick</code> 和<code>sticks</code> 会非常困难。</p>
<br>

<p><strong>例2</strong>：匹配连在一起的4位数字</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name </span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;[[:digit:]]&#123;4&#125;&#x27;</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+--------------+</span><br><span class="line">| prod_name    |</span><br><span class="line">+--------------+</span><br><span class="line">| JetPack 1000 |</span><br><span class="line">| JetPack 2000 |</span><br><span class="line">+--------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p><strong><code>[[:digit:]]</code><strong>匹配任意数字，因为它为数字的一个集合。</strong><code>&#123;4&#125;</code><strong>要求它</strong>前面的字符</strong>（这里即任意数字）<strong>出现4次</strong>，所以<code>[[:digit:]]&#123;4&#125;</code>匹配连在一起的任意4位数字。</p>
<p>注：上面的例子也可以用如下语句实现</p>
<p>输入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name </span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;[0-9][0-9][0-9][0-9]&#x27;</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h4 id="9-2-8-定位符"><a href="#9-2-8-定位符" class="headerlink" title="9.2.8 定位符"></a>9.2.8 定位符</h4><ul>
<li>应用场景<ul>
<li>为了匹配特定位置的文本。</li>
</ul>
</li>
</ul>
<p>需要使用下表列出的<strong>定位符</strong>。</p>
<table>
<thead>
<tr>
<th align="center">元字符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>^</code></td>
<td align="center">文本的开始</td>
</tr>
<tr>
<td align="center"><code>$</code></td>
<td align="center">文本的结尾</td>
</tr>
<tr>
<td align="center"><code>[[:&lt;:]]</code></td>
<td align="center">词的开始</td>
</tr>
<tr>
<td align="center"><code>[[:&gt;:]]</code></td>
<td align="center">词的结尾</td>
</tr>
</tbody></table>
<p><br><br></p>
<p><strong>例</strong>：找出以一个数（或小数点）<strong>开始</strong>的所有产品。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;^[0-9\\.]&#x27;</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;	<span class="comment">-- -- 匹配以数字或点开始的所有串</span></span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+--------------+</span><br><span class="line">| prod_name    |</span><br><span class="line">+--------------+</span><br><span class="line">| .5 ton anvil |</span><br><span class="line">| 1 ton anvil  |</span><br><span class="line">| 2 ton anvil  |</span><br><span class="line">+--------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p><code>^</code> 匹配串的开始。因此，<code>^[0-9\\.]</code> 只在.或任意数字为串中第一个字符时才匹配它们。没有<code>^</code> ，则还要多检索出4个别的行（那些中间有数字的行）。</p>
<p><br><br></p>
<h5 id="附1：-的双重用途"><a href="#附1：-的双重用途" class="headerlink" title="附1：^ 的双重用途"></a>附1：<code>^</code> 的双重用途</h5><blockquote>
<p><strong>^ 的双重用途</strong>：^ 有两种用法。在集合中（用<code>[和]</code>定义），用它来<strong>否定该集合</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;[^123] Ton&#x27;</span>	<span class="comment">-- 匹配除这些字符外的任何东西</span></span><br></pre></td></tr></table></figure>

<p>否则，用来指串的开始处。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;^[0-9\\.]&#x27;</span>	<span class="comment">-- 匹配以数字或点开始的所有串</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="附2：使REGEXP起类似LIKE的作用"><a href="#附2：使REGEXP起类似LIKE的作用" class="headerlink" title="附2：使REGEXP起类似LIKE的作用"></a>附2：使<code>REGEXP</code>起类似<code>LIKE</code>的作用</h5><blockquote>
<p><code>LIKE</code>和<code>REGEXP</code>不同之处在于：<code>LIKE</code>匹配整个串而<code>REGEXP</code>匹配子串。</p>
<p>利用定位符，通过**<code>^</code>开始<strong>每个表达式，用</strong><code>$</code>结束**每个表达式，可以使<code>REGEXP</code>与<code>LIKE</code>一样。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">&#x27;_ ton anvil&#x27;</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_id;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 实现1</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;^. ton anvil$&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_id;</span><br><span class="line"><span class="comment">-- 实现2</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">&#x27;^[[:digit:]]&#123;1&#125; ton anvil$&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_id;</span><br></pre></td></tr></table></figure>

<p><strong>输出（一致）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+-------------+</span><br><span class="line">| prod_id | prod_name   |</span><br><span class="line">+---------+-------------+</span><br><span class="line">| ANV02   | 1 ton anvil |</span><br><span class="line">| ANV03   | 2 ton anvil |</span><br><span class="line">+---------+-------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="附3：简单的正则表达式测试"><a href="#附3：简单的正则表达式测试" class="headerlink" title="附3：简单的正则表达式测试"></a>附3：简单的正则表达式测试</h5><blockquote>
<p>可以在不使用数据库表的情况下用SELECT来测试正则表达式。REGEXP检查总是返回<strong>0（没有匹配）</strong>或<strong>1（匹配）</strong>。可以用带文字穿的REGEXP来测试表达式，并试验。相应语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;hello&#x27;</span> REGEXP <span class="string">&#x27;[0-9]&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+------------------------+</span><br><span class="line">| <span class="string">&#x27;hello&#x27;</span> REGEXP <span class="string">&#x27;[0-9]&#x27;</span> |</span><br><span class="line">+------------------------+</span><br><span class="line">|                      0 |</span><br><span class="line">+------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>因为文本’hello’中没有数字，所以返回0。</p>
</blockquote>
<p><br><br><br></p>
<h3 id="9-3-小结"><a href="#9-3-小结" class="headerlink" title="9.3 小结"></a>9.3 小结</h3><ul>
<li>正则表达式的基础知识</li>
<li>在MySQL的SELECT语句中使用REGEXP关键字</li>
</ul>
<p><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br></p>
<h2 id="10-创建计算字段"><a href="#10-创建计算字段" class="headerlink" title="10. 创建计算字段"></a>10. 创建计算字段</h2><ul>
<li>介绍什么是计算字段</li>
<li>如何创建计算字段</li>
<li>怎样从应用程序中使用别名引用它们</li>
</ul>
<p><br><br><br></p>
<h3 id="10-1-计算字段"><a href="#10-1-计算字段" class="headerlink" title="10.1 计算字段"></a>10.1 计算字段</h3><p>问题背景：存储在数据库表中的数据一般不是应用程序所需要的格式。举例如下</p>
<ul>
<li><input disabled type="checkbox"> 想在<strong>一个字段</strong>中既<strong>显示公司名</strong>，又<strong>显示公司的地址</strong>，但这两个信息一般包含在不同的表列中。</li>
<li><input disabled type="checkbox"> 城市、州和邮政编码存储在不同的列中（it should be），但邮件标签打印程序却需要把它们作为一个恰当格式的字段检索出来。</li>
<li><input disabled type="checkbox"> 物品订单表存储物品的价格和数量，但不需要存储每个物品的总价格（用价格乘以数量即可）。为打印发票，<strong>需要</strong>物品的<strong>总价格</strong>。</li>
<li><input disabled type="checkbox"> 需要根据表数据进行<strong>总数</strong>、<strong>平均数计算</strong>或其他计算。</li>
</ul>
<p>上述例子中，存储在表中的数据都不是应用程序所需的。我们需要<strong>直接从数据库中检索出转换、计算或格式化过的数据</strong>；而不是直接检索出数据，然后再在客户机应用程序或报告程序中重新格式化。</p>
<p><strong>计算字段</strong>可以解决此问题。与前面提到过的列不同，计算字段并不实际存在于数据库表中。<strong>计算字段是运行时在SELECT语句内创建的</strong>。</p>
<ul>
<li><strong>字段（field）</strong>：基本上与列（column）的意思相同，经常互换使用，不过数据库列一般称为列，而术语<strong>字段</strong>通常用在<strong>计算字段的连接</strong>上。</li>
</ul>
<blockquote>
<p>注：只有数据库知道 SELECT 语句中哪些列是实际的表列，哪些列是计算字段。从客户机（如应用程序）的角度来看，计算字段的数据是以与其他列的数据相同的方式返回的。</p>
</blockquote>
<p><br><br><br></p>
<h3 id="10-2-拼接字段"><a href="#10-2-拼接字段" class="headerlink" title="10.2 拼接字段"></a>10.2 拼接字段</h3><ul>
<li><strong>拼接（concatenate）</strong>：将值联结到一起构成单个值。</li>
</ul>
<p><strong>例</strong>：要生成一个供应商报表，需要在供应商表 vendors 中检索供应商信息，按照 name（location）的格式列出供应商位置。</p>
<p>解决办法：在MySQL的 SELECT 语句中，使用 <strong>Concat()</strong> 函数拼接两个列。</p>
<blockquote>
<p><strong>MySQL的不同之处</strong>：许多DBMS使用+或 || 实现拼接，MySQL使用Concat()函数实现。</p>
</blockquote>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Concat(vend_name, <span class="string">&#x27; (&#x27;</span>, vend_country, <span class="string">&#x27;)&#x27;</span>) </span><br><span class="line"><span class="keyword">FROM</span> vendors </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+--------------------------------------------+</span><br><span class="line">| Concat(vend_name, <span class="string">&#x27; (&#x27;</span>, vend_country, <span class="string">&#x27;)&#x27;</span>) |</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">| ACME (USA)                                 |</span><br><span class="line">| Anvils R Us (USA)                          |</span><br><span class="line">| Furball Inc. (USA)                         |</span><br><span class="line">| Jet Set (England)                          |</span><br><span class="line">| Jouets Et Ours (France)                    |</span><br><span class="line">| LT Supplies (USA)                          |</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>Concat()方法：用于拼接串，子串用逗号分隔，拼接后作为单个长串。</p>
<p><br><br></p>
<h4 id="删除数据多余空格"><a href="#删除数据多余空格" class="headerlink" title="删除数据多余空格"></a>删除数据多余空格</h4><ul>
<li><strong>Trim函数</strong>：<ul>
<li>MySQL 支持 <strong>RTrim()</strong> 去掉串右边的空格。</li>
<li><strong>LTrim()</strong>  函数去掉串左边空格。</li>
<li><strong>Trim()</strong> 去掉串左右两边的空格。</li>
</ul>
</li>
</ul>
<p>在第8节中提到通过<strong>删除数据右侧多余的空格</strong>来整理数据，可以使用MySQL的 <strong>RTrim()</strong> 函数来实现。如下所示：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Concat(RTrim(vend_name), <span class="string">&#x27; (&#x27;</span>, RTrim(vend_country), <span class="string">&#x27;)&#x27;</span>) </span><br><span class="line"><span class="keyword">FROM</span> vendors </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<ul>
<li>RTrim() 函数去掉值右边的所有空格。通过使用RTrim() 函数， 各个列都进行了整理。</li>
</ul>
<p><br><br></p>
<h4 id="使用别名"><a href="#使用别名" class="headerlink" title="使用别名"></a>使用别名</h4><p>适用场景：比如对于拼接字段形成的新列，没有名字、只有值。一个未命名的列不能用于客户机应用中，因为客户机没有办法引用它。</p>
<p>为解决该问题，SQL支持列别名。别名（alias）是一个字段或值的替换名。别名用AS关键字赋予。</p>
<p><strong>例</strong>：对上一个搜索结果使用别名</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Concat(RTrim(vend_name), <span class="string">&#x27; (&#x27;</span>, RTrim(vend_country), <span class="string">&#x27;)&#x27;</span>)  <span class="keyword">AS</span> vend_title </span><br><span class="line"><span class="keyword">FROM</span> vendors </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-------------------------+</span><br><span class="line">| vend_title              |</span><br><span class="line">+-------------------------+</span><br><span class="line">| ACME (USA)              |</span><br><span class="line">| Anvils R Us (USA)       |</span><br><span class="line">| Furball Inc. (USA)      |</span><br><span class="line">| Jet Set (England)       |</span><br><span class="line">| Jouets Et Ours (France) |</span><br><span class="line">| LT Supplies (USA)       |</span><br><span class="line">+-------------------------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p><code>AS 别名</code> 指示 SQL 创建一个包含指定计算的名为 <code>别名</code> 的计算字段。任何客户机应用都可以按名引用这个列，就像它是一个实际的表列一样。</p>
<h5 id="别名的其他用途"><a href="#别名的其他用途" class="headerlink" title="别名的其他用途"></a>别名的其他用途</h5><blockquote>
<p>别名常见的其他用途包括：</p>
<ul>
<li>在实际的表列名包含不符合规定的字符（如空格）时重新命名它</li>
<li>在原来的名字含混或容易误解时扩充它</li>
<li>等等</li>
</ul>
</blockquote>
<h5 id="导出列"><a href="#导出列" class="headerlink" title="导出列"></a>导出列</h5><blockquote>
<p><strong>别名</strong>有时候<strong>也称为导出列（derived column）</strong>，不管称为什么，它们都是相同的东西。</p>
</blockquote>
<p><br><br><br></p>
<h3 id="10-3-执行算术计算"><a href="#10-3-执行算术计算" class="headerlink" title="10.3 执行算术计算"></a>10.3 执行算术计算</h3><p>计算字段的另一个常见用途：对检索出的数据进行算术计算。</p>
<p>例：orders 表中包含收到的所有订单，orderitems表包含每个订单的各项物品。下面语句检索订单号 2005 中的所有物品</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, quantity, item_price </span><br><span class="line"><span class="keyword">FROM</span> orderitems </span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20005</span>;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+----------+------------+</span><br><span class="line">| prod_id | quantity | item_price |</span><br><span class="line">+---------+----------+------------+</span><br><span class="line">| ANV01   |       10 |       5.99 |</span><br><span class="line">| ANV02   |        3 |       9.99 |</span><br><span class="line">| TNT2    |        5 |      10.00 |</span><br><span class="line">| FB      |        1 |      10.00 |</span><br><span class="line">+---------+----------+------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>在后面增加一列汇总物品价格（单价乘以订购数量）</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 	prod_id, </span><br><span class="line">		quantity, </span><br><span class="line">		item_price, </span><br><span class="line">		quantity<span class="operator">*</span>item_price <span class="keyword">AS</span> expanded_price </span><br><span class="line"><span class="keyword">FROM</span> orderitems </span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20005</span>;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+----------+------------+----------------+</span><br><span class="line">| prod_id | quantity | item_price | expanded_price |</span><br><span class="line">+---------+----------+------------+----------------+</span><br><span class="line">| ANV01   |       10 |       5.99 |          59.90 |</span><br><span class="line">| ANV02   |        3 |       9.99 |          29.97 |</span><br><span class="line">| TNT2    |        5 |      10.00 |          50.00 |</span><br><span class="line">| FB      |        1 |      10.00 |          10.00 |</span><br><span class="line">+---------+----------+------------+----------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>客户机应用现在可以正常使用新计算列 expanded_price。</p>
<p><br><br></p>
<p>MySQL支持表10-1中列出的基本算术操作符。此外，圆括号可用来区分优先顺序。关于优先顺序的介绍，请参阅第7章。</p>
<p><strong>表10-1 MySQL算术操作符</strong></p>
<table>
<thead>
<tr>
<th align="center">操 作 符</th>
<th align="center">说 明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>+</code></td>
<td align="center">加</td>
</tr>
<tr>
<td align="center"><code>-</code></td>
<td align="center">减</td>
</tr>
<tr>
<td align="center"><code>*</code></td>
<td align="center">乘</td>
</tr>
<tr>
<td align="center"><code>/</code></td>
<td align="center">除</td>
</tr>
</tbody></table>
<p><br><br></p>
<h4 id="测试计算"><a href="#测试计算" class="headerlink" title="测试计算"></a>测试计算</h4><blockquote>
<p><strong>如何测试计算</strong>    SELECT提供了测试和实验函数与计算的一个很好的办法。可以省略FROM子句以简单地访问和处理表达式。例如：</p>
<ul>
<li>SELECT 3*2 将返回6</li>
<li>SELECT Trim(‘abc’) 将返回abc</li>
<li>SELECT Now() 利用Now()函数返回当前日期和时间。</li>
</ul>
</blockquote>
<p><br><br><br></p>
<h3 id="10-4-小结"><a href="#10-4-小结" class="headerlink" title="10.4 小结"></a>10.4 小结</h3><ul>
<li>计算字段<ul>
<li>概念</li>
<li>创建</li>
</ul>
</li>
<li>拼接字段<ul>
<li>Concat() 方法拼接子串</li>
<li>Trim() 方法去空格</li>
</ul>
</li>
<li>使用别名</li>
<li>测试计算</li>
</ul>
<p><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br></p>
<h2 id="11-使用数据处理函数"><a href="#11-使用数据处理函数" class="headerlink" title="11. 使用数据处理函数"></a>11. 使用数据处理函数</h2><ul>
<li>什么是函数</li>
<li>MySQL支持何种函数</li>
<li>如何使用这些函数</li>
</ul>
<p><br><br><br><br><br><br></p>
<h3 id="11-1-函数"><a href="#11-1-函数" class="headerlink" title="11.1 函数"></a>11.1 函数</h3><p>函数的可移植性相较 SQL 来说要低一些。所以<strong>使用函数</strong>时，要保证<strong>做好代码注释</strong>，以便自己或去其他人能够确切知道所编写的 SQL 代码含义。</p>
<p><br><br><br><br><br><br></p>
<h3 id="11-2-使用函数"><a href="#11-2-使用函数" class="headerlink" title="11.2 使用函数"></a>11.2 使用函数</h3><p>大部分SQL支持以下类型的函数</p>
<ul>
<li>处理文本串（如删除或填充值，转换值为大写或小写）的<strong>文本函数</strong>。</li>
<li>在数值数据上进行算术操作（如返回绝对值，进行代数运算）的<strong>数值函数</strong>。</li>
<li>处理日期和时间值并从这些值中提取特定成分（如，返回两个日期之差，检查日期有效性等）的<strong>日期和时间函数</strong>。</li>
<li>返回 DBMS 正使用的特殊信息（如返回用户登录信息，检查版本细节）的<strong>系统函数</strong>。</li>
</ul>
<p><br><br><br></p>
<h4 id="11-2-1-文本处理函数"><a href="#11-2-1-文本处理函数" class="headerlink" title="11.2.1 文本处理函数"></a>11.2.1 文本处理函数</h4><p>例：使用Upper() 函数转大写。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, <span class="built_in">Upper</span>(vend_name) <span class="keyword">AS</span> vend_name_upcase </span><br><span class="line"><span class="keyword">FROM</span> vendors  </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----------------+------------------+</span><br><span class="line">| vend_name      | vend_name_upcase |</span><br><span class="line">+----------------+------------------+</span><br><span class="line">| ACME           | ACME             |</span><br><span class="line">| Anvils R Us    | ANVILS R US      |</span><br><span class="line">| Furball Inc.   | FURBALL INC.     |</span><br><span class="line">| Jet Set        | JET SET          |</span><br><span class="line">| Jouets Et Ours | JOUETS ET OURS   |</span><br><span class="line">| LT Supplies    | LT SUPPLIES      |</span><br><span class="line">+----------------+------------------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p><strong>表11-1 常用的文本处理函数</strong></p>
<table>
<thead>
<tr>
<th align="center">函 数</th>
<th align="center">说 明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>Left()</code></td>
<td align="center">返回串左边的字符</td>
</tr>
<tr>
<td align="center"><code>Length()</code></td>
<td align="center">返回串的长度</td>
</tr>
<tr>
<td align="center"><code>Locate()</code></td>
<td align="center">找出串的一个子串</td>
</tr>
<tr>
<td align="center"><code>Lower()</code></td>
<td align="center">将串转换为小写</td>
</tr>
<tr>
<td align="center"><code>LTrim()</code></td>
<td align="center">去掉串左边的空格</td>
</tr>
<tr>
<td align="center"><code>Right()</code></td>
<td align="center">返回串右边的字符</td>
</tr>
<tr>
<td align="center"><code>RTrim()</code></td>
<td align="center">去掉串右边的空格</td>
</tr>
<tr>
<td align="center"><code>Soundex()</code></td>
<td align="center">返回串的<code>SOUNDEX</code> 值</td>
</tr>
<tr>
<td align="center"><code>SubString()</code></td>
<td align="center">返回子串的字符</td>
</tr>
<tr>
<td align="center"><code>Upper()</code></td>
<td align="center">将串转换为大写</td>
</tr>
</tbody></table>
<p><br><br><br></p>
<h4 id="11-2-2-日期和时间处理函数"><a href="#11-2-2-日期和时间处理函数" class="headerlink" title="11.2.2 日期和时间处理函数"></a>11.2.2 日期和时间处理函数</h4><p>日期和时间采用相应数据类型和特殊格式存储，以便快速有效地排序或过滤，并节省物理存储空间。</p>
<p>一般应用程序不能使用用来存储日期和时间地格式，所以使用十日起和时间函数来读取、统计和处理这些值。</p>
<p><strong>表11-2 常用日期和时间处理函数</strong></p>
<table>
<thead>
<tr>
<th align="center">函 数</th>
<th align="center">说 明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>AddDate()</code></td>
<td align="center">增加一个日期（天、周等）</td>
</tr>
<tr>
<td align="center"><code>AddTime()</code></td>
<td align="center">增加一个时间（时、分等）</td>
</tr>
<tr>
<td align="center"><code>CurDate()</code></td>
<td align="center">返回当前日期</td>
</tr>
<tr>
<td align="center"><code>CurTime()</code></td>
<td align="center">返回当前时间</td>
</tr>
<tr>
<td align="center"><code>Date()</code></td>
<td align="center">返回日期时间的日期部分</td>
</tr>
<tr>
<td align="center"><code>DateDiff()</code></td>
<td align="center">计算两个日期之差</td>
</tr>
<tr>
<td align="center"><code>Date_Add()</code></td>
<td align="center">高度灵活的日期运算函数</td>
</tr>
<tr>
<td align="center"><code>Date_Format()</code></td>
<td align="center">返回一个格式化的日期或时间串</td>
</tr>
<tr>
<td align="center"><code>Day()</code></td>
<td align="center">返回一个日期的天数部分</td>
</tr>
<tr>
<td align="center"><code>DayOfWeek()</code></td>
<td align="center">对于一个日期，返回对应的星期几</td>
</tr>
<tr>
<td align="center"><code>Hour()</code></td>
<td align="center">返回一个时间的小时部分</td>
</tr>
<tr>
<td align="center"><code>Minute()</code></td>
<td align="center">返回一个时间的分钟部分</td>
</tr>
<tr>
<td align="center"><code>Month()</code></td>
<td align="center">返回一个日期的月份部分</td>
</tr>
<tr>
<td align="center"><code>Now()</code></td>
<td align="center">返回当前日期和时间</td>
</tr>
<tr>
<td align="center"><code>Second()</code></td>
<td align="center">返回一个时间的秒部分</td>
</tr>
<tr>
<td align="center"><code>Time()</code></td>
<td align="center">返回一个日期时间的时间部分</td>
</tr>
<tr>
<td align="center"><code>Year()</code></td>
<td align="center">返回一个日期的年份部分</td>
</tr>
</tbody></table>
<p><br><br></p>
<p>注意：</p>
<p>MySQL使用的日期格式：<code>yyyy-mm-dd</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">2005</span><span class="number">-09</span><span class="number">-01</span>	<span class="comment">-- 格式举例</span></span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p><strong>例1</strong>：基本日期</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id, order_num </span><br><span class="line"><span class="keyword">FROM</span> orders </span><br><span class="line"><span class="keyword">WHERE</span> order_date <span class="operator">=</span> <span class="string">&#x27;2005-09-01&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+-----------+</span><br><span class="line">| cust_id | order_num |</span><br><span class="line">+---------+-----------+</span><br><span class="line">|   10001 |     20005 |</span><br><span class="line">+---------+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>使用字符串比较并不可靠【因为不清楚列 order_date 的格式是否仅为 yyyy-mm–dd 】，更可靠的办法是使用 <strong>Date(order_date)</strong> 函数指示MySQL<strong>仅提取 order_date 列的日期部分</strong>，并<strong>进行比较</strong>。修改如下</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id, order_num </span><br><span class="line"><span class="keyword">FROM</span> orders </span><br><span class="line"><span class="keyword">WHERE</span> <span class="type">Date</span>(order_date) <span class="operator">=</span> <span class="string">&#x27;2005-09-01&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<blockquote>
<p>如果只要日期，使用 <strong>Date()</strong></p>
<p>如果只要时间，使用 <strong>Time()</strong></p>
<p>Date() 和 Time() 都是MySQL4.1.1中第一次引入的。</p>
</blockquote>
<p><br><br></p>
<p><strong>例2</strong>：检索2005年9月下的所有订单。</p>
<p>方法1：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id, order_num </span><br><span class="line"><span class="keyword">FROM</span> orders </span><br><span class="line"><span class="keyword">WHERE</span> <span class="type">Date</span>(order_date) <span class="keyword">BETWEEN</span> <span class="string">&#x27;2005-09-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2005-09-30&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+-----------+</span><br><span class="line">| cust_id | order_num |</span><br><span class="line">+---------+-----------+</span><br><span class="line">|   10001 |     20005 |</span><br><span class="line">|   10003 |     20006 |</span><br><span class="line">|   10004 |     20007 |</span><br><span class="line">+---------+-----------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>方法2：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id, order_num </span><br><span class="line"><span class="keyword">FROM</span> orders </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Year</span>(order_date) <span class="operator">=</span> <span class="number">2005</span> <span class="keyword">AND</span> <span class="keyword">Month</span>(order_date) <span class="operator">=</span> <span class="number">9</span>;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>Year() 从日期中返回年份，Month() 从日期中返回月份。</p>
<p><br><br></p>
<h4 id="11-2-3-数值处理函数"><a href="#11-2-3-数值处理函数" class="headerlink" title="11.2.3 数值处理函数"></a>11.2.3 数值处理函数</h4><p>数字处理函数用于处理数值或数据，这些函数一般用于处理代数、三角或几何运算，因此没有串或日期-时间处理函数使用的那么频繁。</p>
<p><strong>表11-3 常用数值处理函数</strong></p>
<table>
<thead>
<tr>
<th align="center">函 数</th>
<th align="center">说 明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>Abs()</code></td>
<td align="center">返回一个数的绝对值</td>
</tr>
<tr>
<td align="center"><code>Cos()</code></td>
<td align="center">返回一个角度的余弦</td>
</tr>
<tr>
<td align="center"><code>Exp()</code></td>
<td align="center">返回一个数的指数值</td>
</tr>
<tr>
<td align="center"><code>Mod()</code></td>
<td align="center">返回除操作的余数</td>
</tr>
<tr>
<td align="center"><code>Pi()</code></td>
<td align="center">返回圆周率</td>
</tr>
<tr>
<td align="center"><code>Rand()</code></td>
<td align="center">返回一个随机数</td>
</tr>
<tr>
<td align="center"><code>Sin()</code></td>
<td align="center">返回一个角度的正弦</td>
</tr>
<tr>
<td align="center"><code>Sqrt()</code></td>
<td align="center">返回一个数的平方根</td>
</tr>
<tr>
<td align="center"><code>Tan()</code></td>
<td align="center">返回一个角度的正切</td>
</tr>
</tbody></table>
<p><br><br><br><br><br><br></p>
<h3 id="11-3-小结"><a href="#11-3-小结" class="headerlink" title="11.3 小结"></a>11.3 小结</h3><ul>
<li>使用 SQL  的数据处理函数</li>
<li>着重介绍了日期处理函数</li>
</ul>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="12-汇总数据"><a href="#12-汇总数据" class="headerlink" title="12. 汇总数据"></a>12. 汇总数据</h2><ul>
<li>什么是SQL的聚集函数。</li>
<li>如何利用它们汇总表的数据。</li>
</ul>
<p><br><br><br><br><br><br></p>
<h3 id="12-1-聚集函数"><a href="#12-1-聚集函数" class="headerlink" title="12.1 聚集函数"></a>12.1 聚集函数</h3><p>有时候，需要汇总表的信息，而不需要表中的具体数据，如：</p>
<ul>
<li>确定表中行数（或满足某个条件或包含某个特定值的行数）</li>
<li>获得表中行组的和</li>
<li>找出表列（或所有行或某些特定的行）的最大值、最小值、平均值</li>
</ul>
<p>上述例子都需要对表中数据（而不是实际数据本身）汇总。因此，返回实际表数据是对时间和处理资源的浪费。为方便此类型的检索，MySQL给出了5个<strong>聚集函数</strong>。</p>
<ul>
<li><strong>聚集函数（aggregate function）</strong>：运行在行组上，计算和返回单个值的函数。</li>
</ul>
<p><strong>表12-1 SQL聚集函数</strong></p>
<table>
<thead>
<tr>
<th align="center">函 数</th>
<th align="center">说 明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>AVG()</code></td>
<td align="center">返回某列的平均值</td>
</tr>
<tr>
<td align="center"><code>COUNT()</code></td>
<td align="center">返回某列的行数</td>
</tr>
<tr>
<td align="center"><code>MAX()</code></td>
<td align="center">返回某列的最大值</td>
</tr>
<tr>
<td align="center"><code>MIN()</code></td>
<td align="center">返回某列的最小值</td>
</tr>
<tr>
<td align="center"><code>SUM()</code></td>
<td align="center">返回某列值之和</td>
</tr>
</tbody></table>
<blockquote>
<p>MySQL还支持一系列的标准偏差聚集函数，这里并未涉及。</p>
</blockquote>
<p><br><br><br></p>
<h4 id="12-1-1-AVG-函数"><a href="#12-1-1-AVG-函数" class="headerlink" title="12.1.1 AVG()函数"></a>12.1.1 AVG()函数</h4><p>AVG()可用来返回所有列的平均值，也可用来返回特定列或行的平均值。</p>
<p><strong>例1</strong>：使用AVG()返回products表中所有产品的平均价格</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(prod_price) <span class="keyword">AS</span> avg_price </span><br><span class="line"><span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-----------+</span><br><span class="line">| avg_price |</span><br><span class="line">+-----------+</span><br><span class="line">| 16.133571 |</span><br><span class="line">+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p><strong>例2</strong>：确定特定行或列的平均值</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(prod_price) <span class="keyword">AS</span> avg_price </span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="number">1003</span>; </span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-----------+</span><br><span class="line">| avg_price |</span><br><span class="line">+-----------+</span><br><span class="line">| 13.212857 |</span><br><span class="line">+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<blockquote>
<p><strong>只能用于单个列</strong>    AVG()只用于单个列数值的平均值计算，而且列名必须作为函数参数给出。为了获得多个列的平均值，必须使用多个AVG()函数。</p>
</blockquote>
<blockquote>
<p><strong>NULL值</strong>    AVG()函数忽略值为NULL的行。</p>
</blockquote>
<p><br><br><br></p>
<h4 id="12-1-2-COUNT-函数"><a href="#12-1-2-COUNT-函数" class="headerlink" title="12.1.2 COUNT()函数"></a>12.1.2 COUNT()函数</h4><p><strong>功能</strong>：可利用COUNT()确定表中行的数目或符合特定条件的行的数目。</p>
<p>COUNT()函数有两种使用方式：</p>
<ul>
<li>使用 <strong>COUNT(*)</strong> 对表中的行的数目进行技术，不管表列中包含的是控制（NULL）还是非空值。</li>
<li>使用 <strong>COUNT(column)</strong> 对特定列中具有值的行进行计数，忽略NULL值。</li>
</ul>
<p><br><br></p>
<p><strong>例1</strong>：返回 customers 表中客户的总数</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_cust</span><br><span class="line"><span class="keyword">FROM</span> customers;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----------+</span><br><span class="line">| num_cust |</span><br><span class="line">+----------+</span><br><span class="line">|        5 |</span><br><span class="line">+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>利用COUNT(*)计数，不管行中各列有什么值。</p>
<p><strong>例2</strong>：对表中具有电子邮件地址的客户计数</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(cust_email) <span class="keyword">AS</span> num_cust </span><br><span class="line"><span class="keyword">FROM</span> customers;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----------+</span><br><span class="line">| num_cust |</span><br><span class="line">+----------+</span><br><span class="line">|        3 |</span><br><span class="line">+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>此语句中，COUNT()函数指定了列名，则会忽略NULL值的列。</p>
<blockquote>
<p><strong>COUNT() 函数与NULL值</strong>    如果<strong>指定列名</strong>，则指定列的值为空的行（即NULL值）被 COUNT() 函数<strong>忽略</strong>。但如果 COUNT() 函数中使用的是  <strong>(*)</strong> ，则 NULL 值也参与计数。</p>
</blockquote>
<p><br><br><br></p>
<h4 id="12-1-3-MAX-函数"><a href="#12-1-3-MAX-函数" class="headerlink" title="12.1.3 MAX()函数"></a>12.1.3 MAX()函数</h4><p>MAX返回指定列中的最大值。MAX()要求指定列名</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(prod_price) <span class="keyword">AS</span> max_price </span><br><span class="line"><span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-----------+</span><br><span class="line">| max_price |</span><br><span class="line">+-----------+</span><br><span class="line">|     55.00 |</span><br><span class="line">+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>对非数值数据使用MAX()</strong>    在用于文本数据时，如果数据按相应的列排序，则MAX()返回最后一行。</p>
</blockquote>
<blockquote>
<p><strong>NULL值</strong>    MAX()函数</p>
</blockquote>
<p><br><br><br></p>
<h4 id="12-1-4-MIN-函数"><a href="#12-1-4-MIN-函数" class="headerlink" title="12.1.4 MIN()函数"></a>12.1.4 MIN()函数</h4><ul>
<li>MIN()的功能为返回指定列最小值。<strong>要求指定列名</strong>。</li>
</ul>
<p><strong>例</strong>：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(prod_price) <span class="keyword">AS</span> min_price </span><br><span class="line"><span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-----------+</span><br><span class="line">| min_price |</span><br><span class="line">+-----------+</span><br><span class="line">|      2.50 |</span><br><span class="line">+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<blockquote>
<p><strong>对非数值数据使用MIN()</strong>    与MAX()类似，对于文本数据，如果数据按相应的列排序，MIN() 返回最前面的行。</p>
</blockquote>
<blockquote>
<p><strong>NULL值</strong>    MIN()函数忽略列值为NULL的行。</p>
</blockquote>
<p><br><br><br></p>
<h4 id="12-1-5-SUM-函数"><a href="#12-1-5-SUM-函数" class="headerlink" title="12.1.5 SUM()函数"></a>12.1.5 SUM()函数</h4><ul>
<li>SUM()用于返回指定列值的和（总计）</li>
</ul>
<p><strong>例1</strong>：检索 orderitems 表订单号 order_num 为20005的 quantity 列总数。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(quantity) <span class="keyword">AS</span> items_quantity </span><br><span class="line"><span class="keyword">FROM</span> orderitems </span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20005</span>;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----------------+</span><br><span class="line">| items_quantity |</span><br><span class="line">+----------------+</span><br><span class="line">|             19 |</span><br><span class="line">+----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>例2</strong>：合计计算数值</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(item_price<span class="operator">*</span>quantity) <span class="keyword">AS</span> total_price </span><br><span class="line"><span class="keyword">FROM</span> orderitems</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">2005</span>;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-------------+</span><br><span class="line">| total_price |</span><br><span class="line">+-------------+</span><br><span class="line">|        NULL |</span><br><span class="line">+-------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<blockquote>
<p><strong>在多个列上进行计算</strong>    如本例所示，利用标准的算术操作符，所有聚集函数都可用来执行多个列上的计算。</p>
</blockquote>
<blockquote>
<p><strong>NULL值</strong>    SUM()忽略列值为NULL的行。</p>
</blockquote>
<p><br><br><br><br><br><br></p>
<h3 id="12-2-聚集不同值"><a href="#12-2-聚集不同值" class="headerlink" title="12.2 聚集不同值"></a>12.2 聚集不同值</h3><p>以上的5个聚集函数都可以如下使用：</p>
<ul>
<li>对所有的行执行计算，指定ALL参数或不给参数（ALL时默认行为）；</li>
<li>只包含不同的值，指定 <strong>DISTINCT</strong> 参数。</li>
</ul>
<p><br><br></p>
<p><strong>例</strong>：使用AVG()函数 + DISTINCT 参数，只考虑不同的的价格</p>
<p><strong>输入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT AVG(DISTINCT prod_price) AS avg_price </span><br><span class="line">FROM products </span><br><span class="line">WHERE vend_id = 1003;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-----------+</span><br><span class="line">| avg_price |</span><br><span class="line">+-----------+</span><br><span class="line">| 15.998000 |</span><br><span class="line">+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h4 id="DISTINCT-只能用于列名"><a href="#DISTINCT-只能用于列名" class="headerlink" title="DISTINCT 只能用于列名"></a>DISTINCT 只能用于列名</h4><blockquote>
<p>注意：如果指定列名，则DISTINCT只能用于COUNT(列名)。DISTINCT不能用于COUNT(<em>)，因此*<em>不允许使用</em></em> <strong><code>COUNT(DISTINCT)</code></strong> ,否则会产生错误。</p>
</blockquote>
<p><br><br><br><br><br><br></p>
<h3 id="12-3-组合聚集函数"><a href="#12-3-组合聚集函数" class="headerlink" title="12.3 组合聚集函数"></a>12.3 组合聚集函数</h3><p>SELECT 语句可根据需要包含多个聚集函数</p>
<p>例：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_items,</span><br><span class="line">	<span class="built_in">MIN</span>(prod_price) <span class="keyword">AS</span> price_min, </span><br><span class="line">	<span class="built_in">MAX</span>(prod_price) <span class="keyword">AS</span> price_max, </span><br><span class="line">	<span class="built_in">AVG</span>(prod_price) <span class="keyword">AS</span> price_avg </span><br><span class="line"><span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-----------+-----------+-----------+-----------+</span><br><span class="line">| num_items | price_min | price_max | price_avg |</span><br><span class="line">+-----------+-----------+-----------+-----------+</span><br><span class="line">|        14 |      2.50 |     55.00 | 16.133571 |</span><br><span class="line">+-----------+-----------+-----------+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p><strong>注意</strong>：不同聚合函数调用之间要用<strong>逗号分隔</strong>。</p>
<br>

<h4 id="取别名"><a href="#取别名" class="headerlink" title="取别名"></a>取别名</h4><blockquote>
<p><strong>取别名</strong>    在指定别名以包含某个聚集函数的结果时，推荐使用 <strong>AS 别名</strong>。这样易于理解和使用（容易定位和排除故障）。</p>
</blockquote>
<p><br><br><br><br><br><br></p>
<h3 id="12-4-小结"><a href="#12-4-小结" class="headerlink" title="12.4 小结"></a>12.4 小结</h3><p>使用聚集函数比客户机应用程序计算效率更高。</p>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="13-分组数据"><a href="#13-分组数据" class="headerlink" title="13.分组数据"></a>13.分组数据</h2><ul>
<li>分组数据，以汇总表内容的子集。涉及如下两个<code>SELECT</code>语句子句：<ul>
<li><strong><code>GROUP BY</code></strong> 子句</li>
<li><strong><code>HAVING</code></strong>  子句</li>
</ul>
</li>
</ul>
<p><br><br><br><br><br><br></p>
<h3 id="13-1-数据分组"><a href="#13-1-数据分组" class="headerlink" title="13.1 数据分组"></a>13.1 数据分组</h3><p>分组允许把数据分为多个逻辑组，以便能对每个组进行聚集运算。</p>
<p><br><br><br><br><br><br></p>
<h3 id="13-2-创建分组"><a href="#13-2-创建分组" class="headerlink" title="13.2 创建分组"></a>13.2 创建分组</h3><p>分组通过SELECT语句的 GROUP BY 子句创建</p>
<p><strong>例</strong>：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_prods</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> vend_id;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+-----------+</span><br><span class="line">| vend_id | num_prods |</span><br><span class="line">+---------+-----------+</span><br><span class="line">|    1001 |         3 |</span><br><span class="line">|    1002 |         2 |</span><br><span class="line">|    1003 |         7 |</span><br><span class="line">|    1005 |         2 |</span><br><span class="line">+---------+-----------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>GROUP BY 子句指示MySQL按vend_id排序并分组数据。这导致对每个 vend_id 而不是整个表计算 num_prods 一次。</p>
<br>

<p><strong>有关 GROUP BY 的重要规定</strong>：</p>
<ul>
<li>GROUP BY 子句可以包含任意数目的列。这使得能对分组进行嵌套，为数据分组提供更细致的控制。</li>
<li>如果在 GROUP BY 子句中嵌套了分组，数据将在最后规定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算（所以不能从个别的列取回数据）</li>
<li>GROUP BY 子句中列出的梅格列都必须是检索列或有效的表达式（单不能时聚集函数）。如果在SELECT中使用表达式，则必须去GROUP BY子句中指定相同的表达式，不能使用别名。</li>
<li>除聚集计算语句之外，<strong>SELECT语句中的每个列</strong>都<strong>必须在 GROUP BY 子句中给出</strong>。</li>
<li>如果分组列中具有NULL值，则NULL将作为一个分组返回。如果列中有多行NULL值，它们将分为一组。</li>
</ul>
<p><br><br><br><br><br><br></p>
<h3 id="13-3-过滤分组"><a href="#13-3-过滤分组" class="headerlink" title="13.3 过滤分组"></a>13.3 过滤分组</h3><ul>
<li><strong>WHERE</strong> 子句用于<strong>过滤行</strong></li>
<li><strong><code>HAVING</code></strong> 子句用与<font color="ffa600">过滤分组</font></li>
</ul>
<blockquote>
<p><strong>HAVING支持所有WHERE操作符</strong>    有关WHERE的所有技术和选项都适用于HAVING（如通配符条件和带多个操作符的子句），它们的语法时相同的，只是关键字有差别。</p>
</blockquote>
<p>例1：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> orders </span><br><span class="line"><span class="keyword">FROM</span> orders </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cust_id </span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+--------+</span><br><span class="line">| cust_id | orders |</span><br><span class="line">+---------+--------+</span><br><span class="line">|   10001 |      2 |</span><br><span class="line">+---------+--------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.02 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>该语句前3行与上一个例子一致。最后一行为 HAVING 子句，过滤出两个以上订单的分组。</p>
<br>

<h4 id="HAVING-和-WHERE-的重要差别"><a href="#HAVING-和-WHERE-的重要差别" class="headerlink" title="HAVING 和 WHERE 的重要差别"></a>HAVING 和 WHERE 的重要差别</h4><blockquote>
<p>WHERE 在数据分组前进行过滤，HAVING 在数据分组后进行过滤。</p>
<p>WHERE 排除的行不包括在分组中，</p>
</blockquote>
<p><br><br></p>
<p>例2：WHERE 和 HAVING 同时使用的例子——列出具有2个及以上、价格为10及以上的产品的供应商</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_prods </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="operator">&gt;=</span> <span class="number">10</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> vend_id </span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+-----------+</span><br><span class="line">| vend_id | num_prods |</span><br><span class="line">+---------+-----------+</span><br><span class="line">|    1003 |         4 |</span><br><span class="line">|    1005 |         2 |</span><br><span class="line">+---------+-----------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>分组的目的往往在于对目标组的数据进行运算或整合，所以 GROUP BY 经常与聚合函数联用。WHERE 子句初步过滤一些行，HAVING 子句进一步过滤一些组。</p>
<p><br><br><br><br><br><br></p>
<h3 id="13-4-分组和排序"><a href="#13-4-分组和排序" class="headerlink" title="13.4 分组和排序"></a>13.4 分组和排序</h3><p>GROUP BY 和 ORDER BY 经常完成相同的工作，但它们是非常不同的。</p>
<p><strong>表13-1 <code>ORDER BY</code> 与<code>GROUP BY</code></strong></p>
<table>
<thead>
<tr>
<th align="center"><code>ORDER BY</code></th>
<th align="center"><code>GROUP BY</code></th>
</tr>
</thead>
<tbody><tr>
<td align="center">排序产生的输出</td>
<td align="center">分组行。但输出可能不是分组的顺</td>
</tr>
<tr>
<td align="center">任意列都可以使用（甚至非选择的列也可以使用）</td>
<td align="center">只可能使用选择列或表达式列，而且必须使用每个选择列表达式</td>
</tr>
<tr>
<td align="center">不一定需要</td>
<td align="center">如果与聚集函数一起使用列（或表达式），则必须使用</td>
</tr>
</tbody></table>
<p>注意表中的第一项差别。一般在使用 <code>GROUP BY</code> 子句时，应该也给出 <code>ORDER BY</code> 子句。这是保证数据正确排序的唯一方法。不要仅依赖<code>GROUP BY</code>排序数据。</p>
<p><strong>例</strong>：检索总计订单价格大于等于50的订单的<strong>订单号</strong>和<strong>总计订单价格</strong>，并<strong>按总计订单价格排序</strong>。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> order_num, <span class="built_in">SUM</span>(quantity<span class="operator">*</span>item_price) <span class="keyword">AS</span> ordertotal </span><br><span class="line"><span class="keyword">FROM</span> orderitems </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> order_num </span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">SUM</span>(quantity<span class="operator">*</span>item_price) <span class="operator">&gt;=</span> <span class="number">50</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ordertotal;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>执行步骤：</p>
<ul>
<li>FROM确定表</li>
<li>GROUP BY将行分组</li>
<li>执行SUM()聚合函数</li>
<li>HAVING对分组过滤</li>
<li>SELECT选择指定的列</li>
<li>ORDER BY对分组排序</li>
</ul>
<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-----------+------------+</span><br><span class="line">| order_num | ordertotal |</span><br><span class="line">+-----------+------------+</span><br><span class="line">|     20006 |      55.00 |</span><br><span class="line">|     20008 |     125.00 |</span><br><span class="line">|     20005 |     149.87 |</span><br><span class="line">|     20007 |    1000.00 |</span><br><span class="line">+-----------+------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.06 sec)</span><br></pre></td></tr></table></figure>

<p><br><br><br><br><br><br></p>
<h3 id="13-5-SELECT子句书写顺序"><a href="#13-5-SELECT子句书写顺序" class="headerlink" title="13.5 SELECT子句书写顺序"></a>13.5 SELECT子句书写顺序</h3><p><strong>表13-2 <code>SELECT</code> 子句及其顺序</strong></p>
<table>
<thead>
<tr>
<th align="center">子 句</th>
<th align="center">说 明</th>
<th align="center">是否必须使用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>SELECT</code></td>
<td align="center">要返回的列或表达式</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center"><code>FROM</code></td>
<td align="center">从中检索数据的表</td>
<td align="center">仅在从表选择数据时使用</td>
</tr>
<tr>
<td align="center"><code>WHERE</code></td>
<td align="center">行级过滤</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center"><code>GROUP BY</code></td>
<td align="center">分组说明</td>
<td align="center">仅在按组计算聚集时使用</td>
</tr>
<tr>
<td align="center"><code>HAVING</code></td>
<td align="center">组级过滤</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center"><code>ORDER BY</code></td>
<td align="center">输出排序顺序</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center"><code>LIMIT</code></td>
<td align="center">要检索的行数</td>
<td align="center">否</td>
</tr>
</tbody></table>
<p><br><br><br><br><br><br></p>
<h3 id="13-6-小结"><a href="#13-6-小结" class="headerlink" title="13.6 小结"></a>13.6 小结</h3><ul>
<li>用SQL聚集函数对数据进行汇总计算<ul>
<li>使用GROUP BY子句汇总计算，返回每个组的结果</li>
<li>使用HAVIGN子句过滤特定组</li>
<li>ORDER BY和GROUP BY 的差异</li>
<li>WHERE 和 HAVING 的差异</li>
</ul>
</li>
</ul>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="14-使用子查询"><a href="#14-使用子查询" class="headerlink" title="14. 使用子查询"></a>14. 使用子查询</h2><ul>
<li>什么是子查询</li>
<li>如何使用它们</li>
</ul>
<p><br><br><br><br><br><br></p>
<h3 id="14-1-子查询"><a href="#14-1-子查询" class="headerlink" title="14.1 子查询"></a>14.1 子查询</h3><blockquote>
<p><strong>版本要求</strong>    MySQL4.1引入了对子查询的支持。</p>
</blockquote>
<ul>
<li><strong>查询（query）</strong>：任何SQL语句都是查询。此术语一般是指SELECT语句。</li>
<li><strong>子查询（subquery）</strong>：即嵌套在其他查询中的查询。</li>
</ul>
<p><br><br><br><br><br><br></p>
<h3 id="14-2-利用子查询进行过滤"><a href="#14-2-利用子查询进行过滤" class="headerlink" title="14.2 利用子查询进行过滤"></a>14.2 利用子查询进行过滤</h3><p>订单存储在两张表中，客户存储在一张表中。</p>
<p><strong>orders</strong>表存储<strong>订单号</strong>、<strong>客户ID</strong>、<strong>订单日期</strong>。</p>
<p><strong>orderitems</strong>表存储各<strong>订单的物品</strong>。</p>
<p><strong>customers</strong>表存储<strong>客户信息</strong>。</p>
<p>目标：列出<strong>订购物品TNT2的所有用户</strong>。检索步骤如下：</p>
<p>一、检索包含物品TNT2的所有订单的编号。</p>
<p>输入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> order_num </span><br><span class="line"><span class="keyword">FROM</span> orderitems </span><br><span class="line"><span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-----------+</span><br><span class="line">| order_num |</span><br><span class="line">+-----------+</span><br><span class="line">|     20005 |</span><br><span class="line">|     20007 |</span><br><span class="line">+-----------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<br>

<p>二、检索具有前一步骤列出的订单编号的所有客户的ID。</p>
<p>输入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id </span><br><span class="line"><span class="keyword">FROM</span> orders </span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="number">20005</span>, <span class="number">20007</span>);</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+</span><br><span class="line">| cust_id |</span><br><span class="line">+---------+</span><br><span class="line">|   10001 |</span><br><span class="line">|   10004 |</span><br><span class="line">+---------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<br>

<p>三、检索前一步骤返回的所有客户ID的客户信息。</p>
<p>输入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact </span><br><span class="line"><span class="keyword">FROM</span> customers </span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="keyword">IN</span> (<span class="number">10001</span>, <span class="number">10004</span>);</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----------------+--------------+</span><br><span class="line">| cust_name      | cust_contact |</span><br><span class="line">+----------------+--------------+</span><br><span class="line">| Coyote Inc.    | Y Lee        |</span><br><span class="line">| Yosemite Place | Y Sam        |</span><br><span class="line">+----------------+--------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<br>

<p>现在，将三个查询合并：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact </span><br><span class="line"><span class="keyword">FROM</span> customers </span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> cust_id </span><br><span class="line">                  <span class="keyword">FROM</span> orders </span><br><span class="line">                  <span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_num </span><br><span class="line">                                      <span class="keyword">FROM</span> orderitems </span><br><span class="line">                                      <span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----------------+--------------+</span><br><span class="line">| cust_name      | cust_contact |</span><br><span class="line">+----------------+--------------+</span><br><span class="line">| Coyote Inc.    | Y Lee        |</span><br><span class="line">| Yosemite Place | Y Sam        |</span><br><span class="line">+----------------+--------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>在SELECT语句中，子查询总是从内向外处理。最里面的子查询返回订单号列表，中间的子查询返回客户ID列表，最外层的SELECT语句根据客户ID列表查询客户信息。</p>
<br>

<p>在实际使用时，由于性能的限制，不能嵌套太多的子查询。</p>
<blockquote>
<p><strong>列必须匹配</strong>    在WHERE子句中使用子查询，应该保证SELECT语句具有与WHERE子句中相同数目的列。通常，子查询将返回单个列并与单个列匹配，但如果需要也可以使用多个列。</p>
</blockquote>
<p>虽然子查询一般与**<code>IN</code>**操作符结合使用，但也可以用于测试等于（=）、不等于（&lt;&gt;）等。</p>
<blockquote>
<p><strong>子查询和性能</strong>    之里给出的代码有效并能够获取所需结果。但使用子查询并不总是执行该种数据检索的最有效办法。15节将给出更多论述。</p>
</blockquote>
<p><br><br><br><br><br><br></p>
<h3 id="14-3-作为计算字段使用子查询"><a href="#14-3-作为计算字段使用子查询" class="headerlink" title="14.3 作为计算字段使用子查询"></a>14.3 作为计算字段使用子查询</h3><p><strong>例</strong>：要显示customers表中每个客户的订单总数。订单与相应的客户ID存储在orders表中。</p>
<p>为了对每个客户执行<code>COUNT(*)</code>计算，应该将 <code>COUNT(*)</code>作为一个子查询。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, </span><br><span class="line">	cust_state, </span><br><span class="line">	(<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">     <span class="keyword">FROM</span> orders </span><br><span class="line">     <span class="keyword">WHERE</span> orders.cust_id <span class="operator">=</span> customers.cust_id) <span class="keyword">AS</span> orders </span><br><span class="line"><span class="keyword">FROM</span> customers </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_name;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----------------+------------+--------+</span><br><span class="line">| cust_name      | cust_state | orders |</span><br><span class="line">+----------------+------------+--------+</span><br><span class="line">| Coyote Inc.    | MI         |      2 |</span><br><span class="line">| E Fudd         | IL         |      1 |</span><br><span class="line">| Mouse House    | OH         |      0 |</span><br><span class="line">| Wascals        | IN         |      1 |</span><br><span class="line">| Yosemite Place | AZ         |      1 |</span><br><span class="line">+----------------+------------+--------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>orders是一个计算字段，它是由圆括号中的子查询建立的。该子查询对检索出的每个客户执行一次。在此例子中，该子查询执行了5次，因为检索出了5个客户。</p>
<p><br><br><br><br><br><br></p>
<h3 id="14-4-小结"><a href="#14-4-小结" class="headerlink" title="14.4 小结"></a>14.4 小结</h3><ul>
<li>子查询最常见的使用是在WHERE子句的IN操作符中，以及用来填充计算列。</li>
<li>推荐先建立最内层的查询，然后逐步用硬编码数据建立和测试外层查询，确认正确后再嵌入子查询，并再次测试它。</li>
</ul>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="15-联结表"><a href="#15-联结表" class="headerlink" title="15. 联结表"></a>15. 联结表</h2><ul>
<li>什么是联结</li>
<li>为什么要使用联结</li>
<li>如何编写使用联结的SELECT语句</li>
</ul>
<p><br><br><br></p>
<p>联结：就是把两张表通过两个字段一一对应的关系按行联系起来，使之从一个表的数据查询到另外一张表的数据。JOIN 概念包括内联（<strong>INNER JOIN</strong>）、外联（<strong>LEFT OUTER JOIN</strong>, <strong>RIGHT OUTER JOIN</strong>, <strong>FULL OUTER JOIN</strong>）</p>
<ul>
<li>内联：涉及<strong>两张表相关联字段一一对应</strong>的关系，即<strong>每一对相联结的属性均有值</strong>。</li>
<li>外联：两张表内联的部分 + <strong>附表</strong>所“附加”的，<strong>还没有与主表构成对应关系的记录</strong>。这种情况所查询出来的<strong>附表字段均有值</strong>，而<strong>主表对应属性可能为NULL</strong>。</li>
</ul>
<p><br><br><br><br><br><br></p>
<h3 id="15-1-联结"><a href="#15-1-联结" class="headerlink" title="15.1 联结"></a>15.1 联结</h3><p>SQL最<strong>强大的功能之一</strong>就是能在数据检索查询的执行中<strong>联结（join）表</strong>。联结是利用SQL的SELECT能执行的<strong>最重要</strong>的操作。</p>
<p>使用联结前，需要了解关系表以及关系数据库的一些基础知识。</p>
<p><br><br><br></p>
<h4 id="15-1-1-关系表"><a href="#15-1-1-关系表" class="headerlink" title="15.1.1 关系表"></a>15.1.1 关系表</h4><p>相同数据出现多次绝不是一件好事，次因素是关系数据库设计的基础。关系表的设计就是要保证把信息分解成多个表，一类数据一个表。各表通过某些常用的值（即关系数据库中的关系（relational））互相关联。</p>
<ul>
<li><strong>外键（foreign key）</strong>：外键为某个表中的一列，它包含另一个表的主键值，定义了两个表之间的关系。</li>
</ul>
<p>关系数据可以有效地存储和方便地处理。关系数据库的可伸缩性远比非关系数据库要好。</p>
<ul>
<li><strong>可伸缩性（scale）</strong>：能够适应不断增加的工作量而不失败。设计良好的数据库或应用程序称之为可伸缩性好（scale well）。</li>
</ul>
<p><br><br><br></p>
<h4 id="15-1-2-为什么要使用联结"><a href="#15-1-2-为什么要使用联结" class="headerlink" title="15.1.2 为什么要使用联结"></a>15.1.2 为什么要使用联结</h4><p>分解数据为多个表能够更有效地存储，更方便地处理，并且具有更大的可伸缩性。</p>
<p>数据存储在多个表中，如何用单条SELECT语句检索出数据？</p>
<p>方法为：使用联结。简单来说，<strong>联结是一种机制，用来在一条SELECT语句中关联表</strong>，因此称之为联结。使用特殊的语法，可以联结多个表返回一组输出，联结在运行时关联表中正确的行。</p>
<h5 id="维护引用完整性"><a href="#维护引用完整性" class="headerlink" title="维护引用完整性"></a>维护引用完整性</h5><blockquote>
<p><font color="ffa600"><strong>维护引用完整性</strong></font>    重要的是，<strong>要理解联结不是物理实体</strong>。换句话说，它在实际的数据库表中不存在。<strong>联结由MySQL根据需要建立</strong>，它<strong>存在于查询的执行当中</strong>。</p>
<p>在使用关系表时，仅在关系列中插入合法的数据非常重要。如果管系列数据非法，将无法访问到另一个表中的数据。</p>
<p>为防止这种情况发生，可指示MySQL只允许在某表的外键列中出现合法值（即出现在另一张表主键中的值）。这就是<strong>维护引用完整性</strong>。它是<strong>通过在表的定义中指定主键和外键来实现的</strong>。</p>
</blockquote>
<p><br><br><br><br><br><br></p>
<h3 id="15-2-创建联结"><a href="#15-2-创建联结" class="headerlink" title="15.2 创建联结"></a>15.2 创建联结</h3><p>联结的创建非常简单，规定要联结的所有表以及它们如何关联即可。</p>
<p>例：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> vendors, products </span><br><span class="line"><span class="keyword">WHERE</span> vendors.vend_id <span class="operator">=</span> products.vend_id </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name, prod_name;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-------------+----------------+------------+</span><br><span class="line">| vend_name   | prod_name      | prod_price |</span><br><span class="line">+-------------+----------------+------------+</span><br><span class="line">| ACME        | Bird seed      |      10.00 |</span><br><span class="line">| ACME        | Carrots        |       2.50 |</span><br><span class="line">| ACME        | Detonator      |      13.00 |</span><br><span class="line">| ACME        | Safe           |      50.00 |</span><br><span class="line">| ACME        | Sling          |       4.49 |</span><br><span class="line">| ACME        | TNT (1 stick)  |       2.50 |</span><br><span class="line">| ACME        | TNT (5 sticks) |      10.00 |</span><br><span class="line">| Anvils R Us | .5 ton anvil   |       5.99 |</span><br><span class="line">| Anvils R Us | 1 ton anvil    |       9.99 |</span><br><span class="line">| Anvils R Us | 2 ton anvil    |      14.99 |</span><br><span class="line">| Jet Set     | JetPack 1000   |      35.00 |</span><br><span class="line">| Jet Set     | JetPack 2000   |      55.00 |</span><br><span class="line">| LT Supplies | Fuses          |       3.42 |</span><br><span class="line">| LT Supplies | Oil can        |       8.99 |</span><br><span class="line">+-------------+----------------+------------+</span><br><span class="line">14 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>SELECT语句最大的差别是所指定的两个列（prod_name和prod_price）在一个表中，而另一个列（vend_name）在另一个表中。</p>
<p>FROM子句列出了两个表。这两个表用WHERE子句正确联结，WHERE子句指示MySQL匹配vendors表中的vend_id和products表中的vend_id。</p>
<blockquote>
<p>注：在引用的列可能出现二义性时，必须使用<strong>完全限定列名</strong>（用一个点分隔的表名和列名）。</p>
</blockquote>
<p><br><br><br></p>
<h4 id="15-2-1-WHERE子句的重要性"><a href="#15-2-1-WHERE子句的重要性" class="headerlink" title="15.2.1 WHERE子句的重要性"></a>15.2.1 WHERE子句的重要性</h4><p>在联结表时，会形成从第一张表到第二张表的笛卡尔积，即将第一张表中的每一个行与第二个表中的每一个行配对。WHERE子句作为过滤条件，只包含哪些匹配给定条件（此处为联结条件）的行。</p>
<ul>
<li><strong>笛卡尔积（cartesian product）</strong>：由<strong>没有联结条件</strong>的表关系返回的结果为笛卡尔积。检索出的行数将是第一个表的行数乘以第二个表中的行数。</li>
</ul>
<p>例：笛卡尔积举例</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> vendors, products </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name, prod_name;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----------------+----------------+------------+</span><br><span class="line">| vend_name      | prod_name      | prod_price |</span><br><span class="line">+----------------+----------------+------------+</span><br><span class="line">| ACME           | .5 ton anvil   |       5.99 |</span><br><span class="line">| ACME           | 1 ton anvil    |       9.99 |</span><br><span class="line">| ACME           | 2 ton anvil    |      14.99 |</span><br><span class="line">| ACME           | Bird seed      |      10.00 |</span><br><span class="line">| ACME           | Carrots        |       2.50 |</span><br><span class="line">| ACME           | Detonator      |      13.00 |</span><br><span class="line">| ACME           | Fuses          |       3.42 |</span><br><span class="line">| ACME           | JetPack 1000   |      35.00 |</span><br><span class="line">| ACME           | JetPack 2000   |      55.00 |</span><br><span class="line">| ACME           | Oil can        |       8.99 |</span><br><span class="line">| ACME           | Safe           |      50.00 |</span><br><span class="line">| ACME           | Sling          |       4.49 |</span><br><span class="line">| ACME           | TNT (1 stick)  |       2.50 |</span><br><span class="line">| ACME           | TNT (5 sticks) |      10.00 |</span><br><span class="line">| Anvils R Us    | .5 ton anvil   |       5.99 |</span><br><span class="line">| Anvils R Us    | 1 ton anvil    |       9.99 |</span><br><span class="line">| Anvils R Us    | 2 ton anvil    |      14.99 |</span><br><span class="line">| Anvils R Us    | Bird seed      |      10.00 |</span><br><span class="line">| Anvils R Us    | Carrots        |       2.50 |</span><br><span class="line">| Anvils R Us    | Detonator      |      13.00 |</span><br><span class="line">| Anvils R Us    | Fuses          |       3.42 |</span><br><span class="line">| Anvils R Us    | JetPack 1000   |      35.00 |</span><br><span class="line">| Anvils R Us    | JetPack 2000   |      55.00 |</span><br><span class="line">| Anvils R Us    | Oil can        |       8.99 |</span><br><span class="line">| Anvils R Us    | Safe           |      50.00 |</span><br><span class="line">| Anvils R Us    | Sling          |       4.49 |</span><br><span class="line">| Anvils R Us    | TNT (1 stick)  |       2.50 |</span><br><span class="line">| Anvils R Us    | TNT (5 sticks) |      10.00 |</span><br><span class="line">| Furball Inc.   | .5 ton anvil   |       5.99 |</span><br><span class="line">| Furball Inc.   | 1 ton anvil    |       9.99 |</span><br><span class="line">| Furball Inc.   | 2 ton anvil    |      14.99 |</span><br><span class="line">| Furball Inc.   | Bird seed      |      10.00 |</span><br><span class="line">| Furball Inc.   | Carrots        |       2.50 |</span><br><span class="line">| Furball Inc.   | Detonator      |      13.00 |</span><br><span class="line">| Furball Inc.   | Fuses          |       3.42 |</span><br><span class="line">| Furball Inc.   | JetPack 1000   |      35.00 |</span><br><span class="line">| Furball Inc.   | JetPack 2000   |      55.00 |</span><br><span class="line">| Furball Inc.   | Oil can        |       8.99 |</span><br><span class="line">| Furball Inc.   | Safe           |      50.00 |</span><br><span class="line">| Furball Inc.   | Sling          |       4.49 |</span><br><span class="line">| Furball Inc.   | TNT (1 stick)  |       2.50 |</span><br><span class="line">| Furball Inc.   | TNT (5 sticks) |      10.00 |</span><br><span class="line">| Jet Set        | .5 ton anvil   |       5.99 |</span><br><span class="line">| Jet Set        | 1 ton anvil    |       9.99 |</span><br><span class="line">| Jet Set        | 2 ton anvil    |      14.99 |</span><br><span class="line">| Jet Set        | Bird seed      |      10.00 |</span><br><span class="line">| Jet Set        | Carrots        |       2.50 |</span><br><span class="line">| Jet Set        | Detonator      |      13.00 |</span><br><span class="line">| Jet Set        | Fuses          |       3.42 |</span><br><span class="line">| Jet Set        | JetPack 1000   |      35.00 |</span><br><span class="line">| Jet Set        | JetPack 2000   |      55.00 |</span><br><span class="line">| Jet Set        | Oil can        |       8.99 |</span><br><span class="line">| Jet Set        | Safe           |      50.00 |</span><br><span class="line">| Jet Set        | Sling          |       4.49 |</span><br><span class="line">| Jet Set        | TNT (1 stick)  |       2.50 |</span><br><span class="line">| Jet Set        | TNT (5 sticks) |      10.00 |</span><br><span class="line">| Jouets Et Ours | .5 ton anvil   |       5.99 |</span><br><span class="line">| Jouets Et Ours | 1 ton anvil    |       9.99 |</span><br><span class="line">| Jouets Et Ours | 2 ton anvil    |      14.99 |</span><br><span class="line">| Jouets Et Ours | Bird seed      |      10.00 |</span><br><span class="line">| Jouets Et Ours | Carrots        |       2.50 |</span><br><span class="line">| Jouets Et Ours | Detonator      |      13.00 |</span><br><span class="line">| Jouets Et Ours | Fuses          |       3.42 |</span><br><span class="line">| Jouets Et Ours | JetPack 1000   |      35.00 |</span><br><span class="line">| Jouets Et Ours | JetPack 2000   |      55.00 |</span><br><span class="line">| Jouets Et Ours | Oil can        |       8.99 |</span><br><span class="line">| Jouets Et Ours | Safe           |      50.00 |</span><br><span class="line">| Jouets Et Ours | Sling          |       4.49 |</span><br><span class="line">| Jouets Et Ours | TNT (1 stick)  |       2.50 |</span><br><span class="line">| Jouets Et Ours | TNT (5 sticks) |      10.00 |</span><br><span class="line">| LT Supplies    | .5 ton anvil   |       5.99 |</span><br><span class="line">| LT Supplies    | 1 ton anvil    |       9.99 |</span><br><span class="line">| LT Supplies    | 2 ton anvil    |      14.99 |</span><br><span class="line">| LT Supplies    | Bird seed      |      10.00 |</span><br><span class="line">| LT Supplies    | Carrots        |       2.50 |</span><br><span class="line">| LT Supplies    | Detonator      |      13.00 |</span><br><span class="line">| LT Supplies    | Fuses          |       3.42 |</span><br><span class="line">| LT Supplies    | JetPack 1000   |      35.00 |</span><br><span class="line">| LT Supplies    | JetPack 2000   |      55.00 |</span><br><span class="line">| LT Supplies    | Oil can        |       8.99 |</span><br><span class="line">| LT Supplies    | Safe           |      50.00 |</span><br><span class="line">| LT Supplies    | Sling          |       4.49 |</span><br><span class="line">| LT Supplies    | TNT (1 stick)  |       2.50 |</span><br><span class="line">| LT Supplies    | TNT (5 sticks) |      10.00 |</span><br><span class="line">+----------------+----------------+------------+</span><br><span class="line">84 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p><strong>不要忘记WHERE子句</strong>    应该保证所有联结都有<code>WHERE</code>子句。同时应该保证<code>WHERE</code>子句的正确性。</p>
</blockquote>
<p><br><br><br></p>
<h4 id="15-2-2-内部联结"><a href="#15-2-2-内部联结" class="headerlink" title="15.2.2 内部联结"></a>15.2.2 内部联结</h4><p>目前为止所使用的联结称为<strong>等值联结</strong>（equijoin），它基于两个表之间的相等测试。这种链接也成为<strong>内部联结</strong>。可以使用特殊的语法来明确指定联结的类型。</p>
<p>例：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> vendors <span class="keyword">INNER</span> <span class="keyword">JOIN</span> products </span><br><span class="line"><span class="keyword">ON</span> vendors.vend_id <span class="operator">=</span> products.vend_id;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>这里，两个表之间的关系是FROM子句的组成部分，以INNER JOIN指定。在使用这种语法时，联结条件用特定的ON子句而不是WHERE子句给出。传递给ON的实际条件与传递给WHERE的相同。</p>
<blockquote>
<p><strong>使用哪种语法</strong>    ANSI SQL规范首选INNER JOIN语法。</p>
</blockquote>
<p><br><br><br></p>
<h4 id="15-2-3-联结多个表"><a href="#15-2-3-联结多个表" class="headerlink" title="15.2.3 联结多个表"></a>15.2.3 联结多个表</h4><p>列出所有表，定义表之间的关系。</p>
<p>例1：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, vend_name, prod_price, quantity</span><br><span class="line"><span class="keyword">FROM</span> orderitems, products, vendors </span><br><span class="line"><span class="keyword">WHERE</span> products.vend_id <span class="operator">=</span> vendors.vend_id </span><br><span class="line">    <span class="keyword">AND</span> orderitems.prod_id <span class="operator">=</span> products.prod_id </span><br><span class="line">    <span class="keyword">AND</span> order_num <span class="operator">=</span> <span class="number">20005</span>;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----------------+-------------+------------+----------+</span><br><span class="line">| prod_name      | vend_name   | prod_price | quantity |</span><br><span class="line">+----------------+-------------+------------+----------+</span><br><span class="line">| .5 ton anvil   | Anvils R Us |       5.99 |       10 |</span><br><span class="line">| 1 ton anvil    | Anvils R Us |       9.99 |        3 |</span><br><span class="line">| TNT (5 sticks) | ACME        |      10.00 |        5 |</span><br><span class="line">| Bird seed      | ACME        |      10.00 |        1 |</span><br><span class="line">+----------------+-------------+------------+----------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>性能考虑</strong>    联结的表越多，性能下降越厉害，所以不要联结不必要的表。</p>
</blockquote>
<p><br><br></p>
<p><strong>例2</strong>：14章的例子使用联结重写。</p>
<p>使用<strong>IN关键字</strong>的<strong>原解法</strong>：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact </span><br><span class="line"><span class="keyword">FROM</span> customers </span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> cust_id </span><br><span class="line">                  <span class="keyword">FROM</span> orders </span><br><span class="line">                  <span class="keyword">WHERE</span> order_num <span class="keyword">IN</span>  (<span class="keyword">SELECT</span> order_num </span><br><span class="line">                                      <span class="keyword">FROM</span> orderitems </span><br><span class="line">                                      <span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>使用<strong>联结</strong>的<strong>新解法</strong></p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact </span><br><span class="line"><span class="keyword">FROM</span> customers, orders, orderitems </span><br><span class="line"><span class="keyword">WHERE</span> customers.cust_id <span class="operator">=</span> orders.cust_id </span><br><span class="line">    <span class="keyword">AND</span> orders.order_num <span class="operator">=</span> orderitems.order_num</span><br><span class="line">    <span class="keyword">AND</span> orderitems.prod_id <span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----------------+--------------+</span><br><span class="line">| cust_name      | cust_contact |</span><br><span class="line">+----------------+--------------+</span><br><span class="line">| Coyote Inc.    | Y Lee        |</span><br><span class="line">| Yosemite Place | Y Sam        |</span><br><span class="line">+----------------+--------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>这里没有使用嵌套子查询，而是使用两个联结。这里有3个WHERE子句条件。前面两个关联联结中的表，后一个过滤产品TNT2的数据。</p>
<p><br><br><br><br><br><br></p>
<h3 id="15-3-小结"><a href="#15-3-小结" class="headerlink" title="15.3 小结"></a>15.3 小结</h3><ul>
<li>联结的概念</li>
<li>等值联结（内部联结）。</li>
</ul>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="16-创建高级联结"><a href="#16-创建高级联结" class="headerlink" title="16. 创建高级联结"></a>16. 创建高级联结</h2><ul>
<li>另外一些联结类型（包括含义和使用方法）。</li>
<li>介绍如何对被联结的表使用表别名和聚集函数。</li>
</ul>
<p><br><br><br><br><br><br></p>
<h3 id="16-1-使用表别名"><a href="#16-1-使用表别名" class="headerlink" title="16.1 使用表别名"></a>16.1 使用表别名</h3><p>表别名的作用：</p>
<ul>
<li>缩短SQL语句。</li>
<li>允许在单条SELECT语句中多次使用相同的表。</li>
</ul>
<p>例：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> customers <span class="keyword">AS</span> c, orders <span class="keyword">AS</span> o, orderitems <span class="keyword">AS</span> oi </span><br><span class="line"><span class="keyword">WHERE</span> c.cust_id <span class="operator">=</span> o.cust_id </span><br><span class="line">	<span class="keyword">AND</span> oi.order_num <span class="operator">=</span> o.order_num </span><br><span class="line">	<span class="keyword">AND</span> prod_id <span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>表别名还可以用于SELECT的列表，ORDER BY子句以及语句的其他部分。</p>
<p><font color="ffa600"><strong>注意</strong></font>：<strong>表别名只在查询执行中使用</strong>。与列别名不一样，<strong>表别名不返回到客户机</strong>。</p>
<p><br><br><br><br><br><br></p>
<h3 id="16-2-使用不同类型的联结"><a href="#16-2-使用不同类型的联结" class="headerlink" title="16.2 使用不同类型的联结"></a>16.2 使用不同类型的联结</h3><p>四种联结：等值联结、自联结、自然联结、外部联结</p>
<p><br><br><br></p>
<h4 id="16-2-1-自联结"><a href="#16-2-1-自联结" class="headerlink" title="16.2.1 自联结"></a>16.2.1 自联结</h4><p>例：假如某物品（ID为DTNTR）存在问题，想知道生产该物品的供应商生产的其他物品是否也存在这些问题。次查询要求首先找到生产ID（prod_id）为DTNTR的物品的供应商 vend_id，然后找出这个供应商生产的其他物品 （prod_id, prod_name）。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p1.prod_id, p1.prod_name </span><br><span class="line"><span class="keyword">FROM</span> products <span class="keyword">AS</span> p1, products <span class="keyword">AS</span> p2 </span><br><span class="line"><span class="keyword">WHERE</span> p1.vend_id <span class="operator">=</span> p2.vend_id;</span><br><span class="line">	<span class="keyword">AND</span> p2.prod_id <span class="operator">=</span> <span class="string">&#x27;DTNTR&#x27;</span>;	<span class="comment">-- 正确输入</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">SELECT</span> p1.prod_id, p1.prod_name </span><br><span class="line"><span class="keyword">FROM</span> products <span class="keyword">AS</span> p1</span><br><span class="line"><span class="keyword">WHERE</span> p1.vend_id <span class="operator">=</span> p1.vend_id</span><br><span class="line">	<span class="keyword">AND</span> p1.prod_id <span class="operator">=</span> <span class="string">&#x27;DTNTR&#x27;</span>;	<span class="comment">-- 错误输入</span></span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+----------------+</span><br><span class="line">| prod_id | prod_name      |</span><br><span class="line">+---------+----------------+</span><br><span class="line">| DTNTR   | Detonator      |</span><br><span class="line">| FB      | Bird seed      |</span><br><span class="line">| FC      | Carrots        |</span><br><span class="line">| SAFE    | Safe           |</span><br><span class="line">| SLING   | Sling          |</span><br><span class="line">| TNT1    | TNT (1 stick)  |</span><br><span class="line">| TNT2    | TNT (5 sticks) |</span><br><span class="line">+---------+----------------+</span><br><span class="line">7 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)	-- 正确输出</span><br><span class="line"></span><br><span class="line">+---------+-----------+</span><br><span class="line">| prod_id | prod_name |</span><br><span class="line">+---------+-----------+</span><br><span class="line">| DTNTR   | Detonator |</span><br><span class="line">+---------+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)		-- 错误输出（只查询到了自己）</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>此查询中需要的两个表实际上是相同的表，因此products表在FROM子句中出现两次。虽然是合法的，但对products的引用具有二义性。</p>
<p>为解决此问题，使用了表别名。WHERE（通过匹配p1中的vend_id和p2中的vend_id）首先联结两个表，然后按第二个表中的prod_id过滤数，返回所需的数据。</p>
<blockquote>
<p><strong>用自联结而不是子查询</strong>    自联结通常作为外部语句用来替代从相同表中检索数据时使用的子查询语句。虽然最终的结果是相同的，但有时候处理联结远比处理子查询快得多。应该尝试并比较一下二者的性能哪个更好。</p>
</blockquote>
<p><br><br><br></p>
<h4 id="16-2-2-自然联结"><a href="#16-2-2-自然联结" class="headerlink" title="16.2.2 自然联结"></a>16.2.2 自然联结</h4><p>在自然联结中，你只能选择哪些唯一的列。这一般要求通过对表使用通配符（SELECT *），对所有其他表的列使用明确的子集来完成。</p>
<p><br><br><br></p>
<h4 id="16-2-3-外部联结"><a href="#16-2-3-外部联结" class="headerlink" title="16.2.3 外部联结"></a>16.2.3 外部联结</h4><p>在一个表与另一个表相联结时，有时会需要包含没有关联的行。例如，可能会需要用联结完成以下工作：</p>
<ul>
<li>对每个客户下了多少订单进行计数，<strong>包括</strong>那些至今<strong>尚未下单的客户</strong>。</li>
<li>列出所有产品以及订购数量，<strong>包括没有人订购的产品</strong>。</li>
<li>计算平均销售规模，<strong>包括</strong>那些至今<strong>尚未下单的客户</strong>。</li>
</ul>
<p>在上述例子中，联结<strong>包含了</strong>那些<font color="ffa600"><strong>在相关表中没有关联的行</strong></font>。这种类型的联结称为<font color="ffa600"><strong>外部联结</strong></font>。</p>
<p>下面的SELECT语句给出一个简单的内部联结，检索所有客户及其订单：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customers.cust_id, orders.order_num </span><br><span class="line"><span class="keyword">FROM</span> customers <span class="keyword">INNER</span> <span class="keyword">JOIN</span> orders </span><br><span class="line"><span class="keyword">ON</span> customers.cust_id <span class="operator">=</span> orders.cust_id;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+-----------+</span><br><span class="line">| cust_id | order_num |</span><br><span class="line">+---------+-----------+</span><br><span class="line">|   10001 |     20005 |</span><br><span class="line">|   10001 |     20009 |</span><br><span class="line">|   10003 |     20006 |</span><br><span class="line">|   10004 |     20007 |</span><br><span class="line">|   10005 |     20008 |</span><br><span class="line">+---------+-----------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>外部联结语法类似，但可以检索所有客户，<strong>包括那些没有订单的客户</strong>【此处customers表的表列要求出给出“<strong>全集</strong>”】，语句如下：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customers.cust_id, orders.order_num </span><br><span class="line"><span class="keyword">FROM</span> customers <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> orders </span><br><span class="line"><span class="keyword">ON</span> customers.cust_id <span class="operator">=</span> orders.cust_id;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+-----------+</span><br><span class="line">| cust_id | order_num |</span><br><span class="line">+---------+-----------+</span><br><span class="line">|   10001 |     20005 |</span><br><span class="line">|   10001 |     20009 |</span><br><span class="line">|   10002 |      NULL |</span><br><span class="line">|   10003 |     20006 |</span><br><span class="line">|   10004 |     20007 |</span><br><span class="line">|   10005 |     20008 |</span><br><span class="line">+---------+-----------+</span><br></pre></td></tr></table></figure>

<br>

<p>在使用OUTER JOIN语法时，必须使用 RIGHT 或 LEFT 关键字指定包括其所有行的表。（RIGHT指出的是OUTER JOIN右边的表，而LEFT 指出的是 OUTER JOIN 左边的表。</p>
<blockquote>
<p><strong>联结语法的顺序可自由调整</strong>，可由不同顺序实现相同的联结关系。</p>
</blockquote>
<p><br><br><br><br><br><br></p>
<h3 id="16-3-使用带聚集函数的联结"><a href="#16-3-使用带聚集函数的联结" class="headerlink" title="16.3 使用带聚集函数的联结"></a>16.3 使用带聚集函数的联结</h3><p>聚集函数可以与联结共同使用。</p>
<p><strong>例1</strong>：检索所有客户【给出cust_name, cust_id】即每个客户所下的订单数【此处使用 GROUP BY 按 cust_id 分组，聚集函数COUNT()求订单数量 + 别名】。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customers.cust_name, </span><br><span class="line">	customers.cust_id, </span><br><span class="line">	<span class="built_in">COUNT</span>(orders.order_num) <span class="keyword">AS</span> num_ord </span><br><span class="line"><span class="keyword">FROM</span> customers <span class="keyword">INNER</span> <span class="keyword">JOIN</span> orders </span><br><span class="line"><span class="keyword">ON</span> customers.cust_id <span class="operator">=</span> orders.cust_id </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customers.cust_id;</span><br><span class="line"><span class="comment">-- 聚合函数的另一种调用</span></span><br><span class="line"><span class="keyword">SELECT</span> customers.cust_name, </span><br><span class="line">	customers.cust_id, </span><br><span class="line">	<span class="built_in">COUNT</span>(orders.cust_id) <span class="keyword">AS</span> num_ord </span><br><span class="line"><span class="keyword">FROM</span> customers <span class="keyword">INNER</span> <span class="keyword">JOIN</span> orders </span><br><span class="line"><span class="keyword">ON</span> customers.cust_id <span class="operator">=</span> orders.cust_id </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customers.cust_id;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----------------+---------+---------+</span><br><span class="line">| cust_name      | cust_id | num_ord |</span><br><span class="line">+----------------+---------+---------+</span><br><span class="line">| Coyote Inc.    |   10001 |       2 |</span><br><span class="line">| Wascals        |   10003 |       1 |</span><br><span class="line">| Yosemite Place |   10004 |       1 |</span><br><span class="line">| E Fudd         |   10005 |       1 |</span><br><span class="line">+----------------+---------+---------+</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>INNER JOIN将customers和orders表互相关联。GROUP BY 按客户分组数据；COUNT()对每个客户的订单计数，将它作为num_ord返回。</p>
<br>

<p>聚集函数也可以和其他联结一起使用。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customers.cust_name, </span><br><span class="line">	customers.cust_id, </span><br><span class="line">	<span class="built_in">COUNT</span>(orders.order_num) <span class="keyword">AS</span> num_ord </span><br><span class="line"><span class="keyword">FROM</span> customers <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> orders </span><br><span class="line"><span class="keyword">ON</span> customers.cust_id <span class="operator">=</span> orders.cust_id </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customers.cust_id;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----------------+---------+---------+</span><br><span class="line">| cust_name      | cust_id | num_ord |</span><br><span class="line">+----------------+---------+---------+</span><br><span class="line">| Coyote Inc.    |   10001 |       2 |</span><br><span class="line">| Mouse House    |   10002 |       0 |</span><br><span class="line">| Wascals        |   10003 |       1 |</span><br><span class="line">| Yosemite Place |   10004 |       1 |</span><br><span class="line">| E Fudd         |   10005 |       1 |</span><br><span class="line">+----------------+---------+---------+</span><br></pre></td></tr></table></figure>

<p><br><br><br><br><br><br></p>
<h3 id="16-4-使用联结和联结条件"><a href="#16-4-使用联结和联结条件" class="headerlink" title="16.4 使用联结和联结条件"></a>16.4 使用联结和联结条件</h3><p>以下为关于联结及其使用的某些要点：</p>
<ul>
<li><font color="ffa600"><strong>注意所使用的联结类型</strong></font>。<strong>一般</strong>我们<strong>使用内部联结</strong>，但使用外部连接也是有效的。</li>
<li>保证<font color="ffa600"><strong>使用正确的联结条件</strong></font>，否则将返回不正确的数据。</li>
<li>应该总是<font color="ffa600"><strong>提供连接条件</strong></font>，否则会得出笛卡尔积。</li>
<li>在一个联结中可以包含多个表，甚至对于每个联结可以采用不同的联结类型。注意分别测试每个联结，简化故障排除过程。</li>
</ul>
<p><br><br><br><br><br><br></p>
<h3 id="16-5-小结"><a href="#16-5-小结" class="headerlink" title="16.5 小结"></a>16.5 小结</h3><p>假设查询语句是：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... </span><br><span class="line"><span class="keyword">FROM</span> tableA ??? <span class="keyword">JOIN</span> tableB </span><br><span class="line"><span class="keyword">ON</span> tableA.column1 <span class="operator">=</span> tableB.column2;</span><br></pre></td></tr></table></figure>

<p>我们把tableA看作左表，把tableB看成右表，那么 <strong>INNER JOIN</strong> 是选出两张表都存在的记录：</p>
<img src="/2021/09/30/MySQL%E5%9F%BA%E7%A1%80/1.png" alt="MySQL基础_INNERJOIN" style="zoom:67%;">

<p><strong>LEFT OUTER JOIN</strong> 是选出左表存在的记录：</p>
<p><img src="/2021/09/30/MySQL%E5%9F%BA%E7%A1%80/2.png"></p>
<p><strong>RIGHT OUTER JOIN</strong> 是选出右表存在的记录：</p>
<p><img src="/2021/09/30/MySQL%E5%9F%BA%E7%A1%80/3.png"></p>
<p><strong>FULL OUTER JOIN</strong> 则是选出左右表都存在的记录：</p>
<img src="/2021/09/30/MySQL%E5%9F%BA%E7%A1%80/4.png" alt="MySQL基础_FULLOUTERJOIN" style="zoom:67%;">

<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>JOIN查询需要<strong>先确定主表</strong>，然后把<strong>另一个表的数据</strong>“<strong>附加</strong>”到结果集上；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ...<span class="keyword">FROM</span> 附表 <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> 主表<span class="keyword">ON</span> ...</span><br></pre></td></tr></table></figure>

<ul>
<li><p>INNER JOIN是最常用的一种JOIN查询，它的语法是<code>SELECT ... FROM &lt;表1&gt; INNER JOIN &lt;表2&gt; ON &lt;条件...&gt;</code>；</p>
</li>
<li><p>JOIN查询仍然可以使用<code>WHERE</code>条件和<code>ORDER BY</code>排序。</p>
</li>
</ul>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="17-组合查询"><a href="#17-组合查询" class="headerlink" title="17. 组合查询"></a>17. 组合查询</h2><ul>
<li>利用 UNION 操作符将多条SELECT语句组合成一个结果集。</li>
</ul>
<p><br><br><br></p>
<h3 id="17-1-组合查询"><a href="#17-1-组合查询" class="headerlink" title="17.1 组合查询"></a>17.1 组合查询</h3><p>多数SQL查询都只包含从一个或多个表中返回数据的单条SELECT语句。MySQL也允许<font color="ffa600"><strong>执行多个查询（多条SELECT语句），并将结果作为单个查询结果集返回</strong></font> 。这些组合查询通常称为<strong>并（union）</strong>或<strong>复合查询（compound query）</strong>。</p>
<ul>
<li>以下两种基本情况，需要使用组合查询：<ul>
<li>在<strong>单个查询</strong>中从<strong>不同的表</strong>返回<strong>类似结构的数据</strong>。</li>
<li>对<strong>单个表执</strong>行<strong>多个查询</strong>，<strong>按单个查询返回数据</strong>。</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>组合查询和多个WHERE条件</strong>    多数情况下，组合相同表的两个查询完成的工作与具有多个WHERE子句的SELECT语句完成的工作相同。但二者的性能可能会不同。</p>
</blockquote>
<p><br><br><br><br><br><br></p>
<h3 id="17-2-创建组合查询"><a href="#17-2-创建组合查询" class="headerlink" title="17.2 创建组合查询"></a>17.2 创建组合查询</h3><p>可用UNION操作符来组合数条SQL查询。利用UNION，可给出多条SELECT语句，将它们的结果组合成单个结果集。</p>
<p><br><br><br></p>
<h4 id="17-2-1-使用UNION"><a href="#17-2-1-使用UNION" class="headerlink" title="17.2.1 使用UNION"></a>17.2.1 使用UNION</h4><p>使用方法：<strong>给出每条SELECT语句，在各条语句之间放上关键字UNION</strong>。</p>
<p><strong>例</strong>：检索价格小于等于5的所有物品的一个 列表，同时还包括供应商1001，1002生产的所有物品（不考虑价格）。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id, prod_id, prod_price </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="operator">&lt;=</span> <span class="number">5</span> </span><br><span class="line"><span class="keyword">UNION</span> <span class="comment">-- UNION 组合两条SELECT语句</span></span><br><span class="line"><span class="keyword">SELECT</span> vend_id, prod_id, prod_price </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">IN</span> (<span class="number">1001</span>,<span class="number">1002</span>);</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+---------+------------+</span><br><span class="line">| vend_id | prod_id | prod_price |</span><br><span class="line">+---------+---------+------------+</span><br><span class="line">|    1003 | FC      |       2.50 |</span><br><span class="line">|    1002 | FU1     |       3.42 |</span><br><span class="line">|    1003 | SLING   |       4.49 |</span><br><span class="line">|    1003 | TNT1    |       2.50 |	<span class="comment">#这里以上为第一条SELECT子句的查询结果</span></span><br><span class="line">|    1001 | ANV01   |       5.99 |	<span class="comment">#这里以下为第二条SELECT子句的查询结果</span></span><br><span class="line">|    1001 | ANV02   |       9.99 |</span><br><span class="line">|    1001 | ANV03   |      14.99 |</span><br><span class="line">|    1002 | OL1     |       8.99 |</span><br><span class="line">+---------+---------+------------+	<span class="comment">#共8行结果，其中1行重复记录已被自动去除</span></span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>这条语句由两条SELECT语句组成，语句中的UNION关键字分隔。UNION指示MySQL执行两条SELECT语句，并把输出组合成单个查询结果集。</p>
<br>

<p>作为参考，在这里给出使用多条WHERE子句而不是使用UNION的相同查询语句。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id, prod_id, prod_price </span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="operator">&lt;=</span><span class="number">5</span> </span><br><span class="line">	<span class="keyword">OR</span> vend_id <span class="keyword">IN</span> (<span class="number">1001</span>,<span class="number">1002</span>);</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>在这里，使用UNION比WHERE子句更复杂。但对于更复杂的过滤条件，或从多个表中检索数据时，使用UNION可能会使处理更简单。</p>
<p><br><br><br></p>
<h4 id="17-2-2-UNION规则"><a href="#17-2-2-UNION规则" class="headerlink" title="17.2.2 UNION规则"></a>17.2.2 UNION规则</h4><p>UNION有几条规则需要注意。</p>
<ul>
<li>UNION必须由两条或两条以上的SELECT语句组成，语句之间用关键字UNION分隔（例：组合4条SELECT语句，需要使用3个UNION关键字）。</li>
<li>UNION中的<strong>每个查询</strong>必须<strong>包含相同的列、表达式或聚集函数</strong>（各个列不需要以相同的次序列出，但这样结果集中相同列的数据将不一致。）</li>
<li>列数据类型必须兼容：类型不必完全相同，但必须是DBMS可以隐含地转换的类型（例如，不同的数值类型或不同的日期类型）。</li>
</ul>
<p>遵守这些基本规则或限制，则可以将UNION用于任何数据检索的任务。</p>
<p><br><br><br></p>
<h4 id="17-2-3-包含或取消重复的行"><a href="#17-2-3-包含或取消重复的行" class="headerlink" title="17.2.3 包含或取消重复的行"></a>17.2.3 包含或取消重复的行</h4><p><code>UNION</code>从查询结果集中自动去除了重复的行。</p>
<p>这是<code>UNION</code>的默认行为，如果需要不去除重复的行，即返回所有匹配行，可以使用 <strong><code>UNION ALL</code></strong> 关键字。</p>
<p>例：与17.2.1的需求一致</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id, prod_id, prod_price </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="operator">&lt;=</span> <span class="number">5</span> </span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span>	<span class="comment">-- UNION ALL 返回所有匹配行</span></span><br><span class="line"><span class="keyword">SELECT</span> vend_id, prod_id, prod_price </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">IN</span> (<span class="number">1001</span>,<span class="number">1002</span>);</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+---------+------------+</span><br><span class="line">| vend_id | prod_id | prod_price |</span><br><span class="line">+---------+---------+------------+</span><br><span class="line">|    1003 | FC      |       2.50 |</span><br><span class="line">|    1002 | FU1     |       3.42 |</span><br><span class="line">|    1003 | SLING   |       4.49 |</span><br><span class="line">|    1003 | TNT1    |       2.50 |</span><br><span class="line">|    1001 | ANV01   |       5.99 |</span><br><span class="line">|    1001 | ANV02   |       9.99 |</span><br><span class="line">|    1001 | ANV03   |      14.99 |</span><br><span class="line">|    1002 | FU1     |       3.42 |</span><br><span class="line">|    1002 | OL1     |       8.99 |</span><br><span class="line">+---------+---------+------------+	<span class="comment">#共9条结果</span></span><br></pre></td></tr></table></figure>

<p><br><br><br></p>
<h4 id="17-2-4-对组合查询结果排序"><a href="#17-2-4-对组合查询结果排序" class="headerlink" title="17.2.4 对组合查询结果排序"></a>17.2.4 对组合查询结果排序</h4><p>使用<code>UNION</code>组合查询时，只允许使用一条<code>ORDER BY</code>子句，它必须出现在最后一条<code>SELECT</code>语句之后。MySQL将按照它排序所有返回的结果。</p>
<p>例：排序之前检索的内容。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id, prod_id, prod_price </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="operator">&lt;=</span> <span class="number">5</span> </span><br><span class="line"><span class="keyword">UNION</span> </span><br><span class="line"><span class="keyword">SELECT</span> vend_id, prod_id, prod_price </span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">IN</span> (<span class="number">1001</span>,<span class="number">1002</span>) </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_id, prod_price;	<span class="comment">-- 指明排序标准</span></span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+---------+------------+</span><br><span class="line">| vend_id | prod_id | prod_price |</span><br><span class="line">+---------+---------+------------+</span><br><span class="line">|    1001 | ANV01   |       5.99 |</span><br><span class="line">|    1001 | ANV02   |       9.99 |</span><br><span class="line">|    1001 | ANV03   |      14.99 |</span><br><span class="line">|    1002 | FU1     |       3.42 |</span><br><span class="line">|    1002 | OL1     |       8.99 |</span><br><span class="line">|    1003 | FC      |       2.50 |</span><br><span class="line">|    1003 | TNT1    |       2.50 |</span><br><span class="line">|    1003 | SLING   |       4.49 |</span><br><span class="line">+---------+---------+------------+</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p><strong>组合不同的表</strong>    使用<code>UNION</code>可以应用于不同的表。</p>
</blockquote>
<p><br><br><br><br><br><br></p>
<h3 id="17-3-小结"><a href="#17-3-小结" class="headerlink" title="17.3 小结"></a>17.3 小结</h3><ul>
<li>利用UNION，可以把多条查询结果作为一条组合查询返回，不管它们的结果是否包含重复。</li>
<li>使用<strong>UNION</strong>可极大地<strong>简化复杂的WHERE子句</strong>，<strong>简化从多个表中检索数据的工作</strong>。</li>
</ul>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="18-全文本搜索"><a href="#18-全文本搜索" class="headerlink" title="18. 全文本搜索"></a>18. 全文本搜索</h2><ul>
<li>使用MySQL的全文本搜索功能进行高级的数据查询和选择</li>
</ul>
<p><br><br><br><br><br><br></p>
<h3 id="18-1-理解全文本搜索"><a href="#18-1-理解全文本搜索" class="headerlink" title="18.1 理解全文本搜索"></a>18.1 理解全文本搜索</h3><blockquote>
<p><strong>并非所有引擎都支持全文本搜索</strong>    如21节所述，MySQL支持几种基本的数据引擎。两个最常使用的引擎为 <strong>MyISAM</strong> 和 <strong>InnoDB</strong>。<strong>前者支持</strong>全文本搜索，而<font color="ff0000"><strong>后者【InnoDB】不支持</strong></font>。所以如果要使用全文本搜索功能，建表时<strong>注意存储引擎的选择</strong>。</p>
</blockquote>
<ul>
<li>回顾：<ul>
<li>第8节的<strong>LIKE</strong>关键字——利用通配操作符匹配文本（和部分文本）。使用LIKE，能够查找包含特殊值或部分值得行（不管这些值位于列内什么位置）。</li>
<li>第9节的<strong>正则表达式</strong>——可编写查找所需行的非常复杂的匹配模式。</li>
</ul>
</li>
<li>分析<ul>
<li>这些搜索机制非常有用，但存在几个限制<ul>
<li>性能——通配符和正则表达式匹配通常要求MySQL尝试匹配表中所有行。因此，由于被搜索行数不断增加，这些搜索可能非常耗时。</li>
<li>明确控制——使用通配符和正则表达式很难明确地控制匹配什么和不匹配什么。</li>
<li>智能化的结果——不嫩提供一种智能化的选择结果的方法（如按匹配相关度排序等）。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>这些限制都可用MySQL的全文本搜索来解决。使用MySQL的全文本搜索时，MySQL不需要分别查看每个行，不需要分别分析和处理每个词。<strong>MySQL创建指定列中各词的一个索引</strong>，搜索可以针对这些词进行。</p>
<p><br><br><br><br><br><br></p>
<h3 id="18-2-使用全文本搜索"><a href="#18-2-使用全文本搜索" class="headerlink" title="18.2 使用全文本搜索"></a>18.2 使用全文本搜索</h3><p>为了进行全文本搜索，<strong>必须索引被搜索的列</strong>。而且要随着数据的改变不断地重新索引。在对表列进行适当设计后，MySQL会自动进行所有的索引和重新索引。</p>
<p>在索引之后，SELECT可与Match()和Against()一起使用以实际执行搜索。</p>
<p><br><br><br></p>
<h4 id="18-2-1-启用全文本搜索支持"><a href="#18-2-1-启用全文本搜索支持" class="headerlink" title="18.2.1 启用全文本搜索支持"></a>18.2.1 启用全文本搜索支持</h4><p>一般<strong>在创建表时启动全文本搜索</strong>。CREATE TABLE 语句（21节介绍）接受 FULLTEXT 子句，它给出被索引列的一个逗号分隔的列表。</p>
<p>例：CREATE 语句演示FULLTEXT子句的使用方法</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> productnotes</span><br><span class="line">(</span><br><span class="line">    note_id		<span class="type">int</span>			<span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT, </span><br><span class="line">    prod_id		<span class="type">char</span>(<span class="number">10</span>)	<span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">    note_date	datetime	<span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">    note_text	text		<span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(note_id), </span><br><span class="line">    FULLTEXT(note_text)</span><br><span class="line">) ENGINE<span class="operator">=</span>MyISAM;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>一条建表语句。其中 note_text 列，为了进行全文本搜索，MySQL根据子句 FULLTEXT(note_text) 的指示对它进行索引。这里的FULLTEXT索引单个列，如果需要也可以逗号分隔指定多个列。</p>
<p>在定义之后，MySQL自动维护该索引。在增加、更新、删除行时，索引随之自动更新。</p>
<p>可以在创建表时指定FULLTEXT，或稍后指定。</p>
<blockquote>
<p><strong>不要在导入数据时使用FULLTEXT</strong>    应该先导入所有数据，然后再定义FULLTEXT。哟主语更快地导入数据。</p>
</blockquote>
<p><br><br><br></p>
<h4 id="18-2-2-进行全文本搜索"><a href="#18-2-2-进行全文本搜索" class="headerlink" title="18.2.2 进行全文本搜索"></a>18.2.2 进行全文本搜索</h4><p>索引之后，使用 Match() 和 Against() 两个函数执行全文本搜索。</p>
<ul>
<li>**Match()**：指定被搜索的列</li>
<li>**Against()**：指定要使用的搜索表达式</li>
</ul>
<p><strong>例</strong>：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text </span><br><span class="line"><span class="keyword">FROM</span> productnotes</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">&#x27;rabbit&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-----------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| note_text                                                                                                             |</span><br><span class="line">+-----------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Customer complaint: rabbit has been able to detect <span class="built_in">trap</span>, food apparently less effective now.                          |</span><br><span class="line">| Quantity varies, sold by the sack load.</span><br><span class="line">All guaranteed to be bright and orange, and suitable <span class="keyword">for</span> use as rabbit bait. |</span><br><span class="line">+-----------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>由于WEHRE子句，一个全文本搜索被执行。Match(note_text)指示MySQL针对指定列进行搜索；Against(‘rabbit’)zhi顶词 rabbit 作为搜索文本。最终返回包含词 rabbit 的两行。</p>
<blockquote>
<p><strong>使用完整的Match()说明</strong>    传递给Match()的值必须与FULLTEXT()定义中的相同。如果指定多个列，则必须列出它们（而且次序正确）。</p>
</blockquote>
<blockquote>
<p><strong>搜索不分大小写</strong>    除非使用BINARY方式，否则全文本搜索不区分大小写。</p>
</blockquote>
<br>

<p>全文本搜索不仅返回包含目标的行，还会按文本匹配的良好程度排序。</p>
<p>下面演示排序等级。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text, </span><br><span class="line">	<span class="keyword">Match</span>(note_text) Against(<span class="string">&#x27;rabbit&#x27;</span>) <span class="keyword">AS</span> ranks</span><br><span class="line"><span class="keyword">FROM</span> productnotes;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------+</span><br><span class="line">| note_text                                                                                                                                                  | ranks              |</span><br><span class="line">+------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------+</span><br><span class="line">| Customer complaint:</span><br><span class="line">Sticks not individually wrapped, too easy to mistakenly detonate all at once.</span><br><span class="line">Recommend individual wrapping.                         |                  0 |</span><br><span class="line">| Can shipped full, refills not available.</span><br><span class="line">Need to order new can <span class="keyword">if</span> refill needed.                                                                          |                  0 |</span><br><span class="line">| Safe is combination locked, combination not provided with safe.</span><br><span class="line">This is rarely a problem as safes are typically blown up or dropped by customers.         |                  0 |</span><br><span class="line">| Quantity varies, sold by the sack load.</span><br><span class="line">All guaranteed to be bright and orange, and suitable <span class="keyword">for</span> use as rabbit bait.                                      | 1.5905543565750122 |</span><br><span class="line">| Included fuses are short and have been known to detonate too quickly <span class="keyword">for</span> some customers.</span><br><span class="line">Longer fuses are available (item FU1) and should be recommended. |                  0 |</span><br><span class="line">| Matches not included, recommend purchase of matches or detonator (item DTNTR).                                                                             |                  0 |</span><br><span class="line">| Please note that no returns will be accepted <span class="keyword">if</span> safe opened using explosives.                                                                              |                  0 |</span><br><span class="line">| Multiple customer returns, anvils failing to drop fast enough or falling backwards on purchaser. Recommend that customer considers using heavier anvils.   |                  0 |</span><br><span class="line">| Item is extremely heavy. Designed <span class="keyword">for</span> dropping, not recommended <span class="keyword">for</span> use with slings, ropes, pulleys, or tightropes.                                        |                  0 |</span><br><span class="line">| Customer complaint: rabbit has been able to detect <span class="built_in">trap</span>, food apparently less effective now.                                                               | 1.6408053636550903 |</span><br><span class="line">| Shipped unassembled, requires common tools (including oversized hammer).                                                                                   |                  0 |</span><br><span class="line">| Customer complaint:</span><br><span class="line">Circular hole <span class="keyword">in</span> safe floor can apparently be easily cut with handsaw.                                                                |                  0 |</span><br><span class="line">| Customer complaint:</span><br><span class="line">Not heavy enough to generate flying stars around head of victim. If being purchased <span class="keyword">for</span> dropping, recommend ANV02 or ANV03 instead.   |                  0 |</span><br><span class="line">| Call from individual trapped <span class="keyword">in</span> safe plummeting to the ground, suggests an escape hatch be added.</span><br><span class="line">Comment forwarded to vendor.                            |                  0 |</span><br><span class="line">+------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------+</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>ranks列为全文本搜索计算出的<strong>等级值</strong>。等级由MySQL根据行中词的数目、唯一词的数目、整个索引中词的总数以及包含该次的行的数目计算出来。</p>
<p>这个例子有助于说明全文本排序如何排除行（排除等级为0的行），如何排序结果（按等级降序排序）。</p>
<p><br><br><br></p>
<h4 id="18-2-3-使用查询扩展"><a href="#18-2-3-使用查询扩展" class="headerlink" title="18.2.3 使用查询扩展"></a>18.2.3 使用查询扩展</h4><p>查询扩展用来设法放宽所返回的全文本搜索结果的范围。</p>
<p>使用查询扩展时，MySQL对数据和索引进行两遍扫描来完成搜索。</p>
<ul>
<li>首先，进行一个基本的全文本搜索，找出与搜索条件匹配的所有行；</li>
<li>其次，MySQL检查这些匹配行并选择所有有用的词；</li>
<li>再其次，MySQL再次进行全文本搜索，这次不仅使用原来的条件，而且还是用所有有用的词。</li>
</ul>
<p>利用查询扩展，能找出可能相关的结果。</p>
<p>例：不使用与使用查询扩展对比</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text</span><br><span class="line"><span class="keyword">FROM</span> productnotes</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">&#x27;anvils&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| note_text                                                                                                                                                |</span><br><span class="line">+----------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Multiple customer returns, anvils failing to drop fast enough or falling backwards on purchaser. Recommend that customer considers using heavier anvils. |</span><br><span class="line">+----------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>只有一行包含目标词，所以返回一行。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text</span><br><span class="line"><span class="keyword">FROM</span> productnotes</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">&#x27;anvils&#x27;</span> <span class="keyword">WITH</span> QUERY EXPANSION);</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----------------------------------------------------------------------------------------------------------------------------------------------------------+| note_text                                                                                                                                                |+----------------------------------------------------------------------------------------------------------------------------------------------------------+| Multiple customer returns, anvils failing to drop fast enough or falling backwards on purchaser. Recommend that customer considers using heavier anvils. || Customer complaint:Sticks not individually wrapped, too easy to mistakenly detonate all at once.Recommend individual wrapping.                       || Customer complaint:Not heavy enough to generate flying stars around head of victim. If being purchased <span class="keyword">for</span> dropping, recommend ANV02 or ANV03 instead. || Please note that no returns will be accepted <span class="keyword">if</span> safe opened using explosives.                                                                            || Customer complaint: rabbit has been able to detect <span class="built_in">trap</span>, food apparently less effective now.                                                             || Customer complaint:Circular hole <span class="keyword">in</span> safe floor can apparently be easily cut with handsaw.                                                              || Matches not included, recommend purchase of matches or detonator (item DTNTR).                                                                           |+----------------------------------------------------------------------------------------------------------------------------------------------------------+7 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>包含了可能相关的行。</p>
<blockquote>
<p><strong>行越多越好</strong>    表中的行越多，使用查询扩展返回的结果越好。 </p>
</blockquote>
<p><br><br><br></p>
<h4 id="18-2-4-布尔文本搜索"><a href="#18-2-4-布尔文本搜索" class="headerlink" title="18.2.4 布尔文本搜索"></a>18.2.4 布尔文本搜索</h4><p>MySQL支持全文本搜索的另外一种形式，称为<strong>布尔方式（boolean mode）</strong>。以布尔方式，可以提供关于如下内容的细节：</p>
<ul>
<li><strong>要匹配的词</strong>；</li>
<li><strong>要排斥的词</strong>（如果某行包含了这个词，则不返回该行，即使它包含其他指定的词也是如此）；</li>
<li><strong>排列提示</strong>（指定某些词比其他词更重要，更重要的词等级更高）；</li>
<li><strong>表达式分组</strong>；</li>
<li>其他内容。</li>
</ul>
<blockquote>
<p><strong>即使没有FULLTEXT索引也可以使用</strong>      布尔方式不同于迄今为止使用的全文本搜索语法的地方在于，即使没有定义FULLTEXT索引，也可以使用它。但这是一种非常缓慢的操作（其性能将随着数据量的增加而降低）。</p>
</blockquote>
<p><strong>例</strong>：演示 <strong>IN BOOLEAN MODE</strong> 的作用。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text </span><br><span class="line"><span class="keyword">FROM</span> productnotes </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">&#x27;heavy&#x27;</span> <span class="keyword">IN</span> <span class="type">BOOLEAN</span> MODE);</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| note_text                                                                                                                                                |</span><br><span class="line">+----------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Item is extremely heavy. Designed <span class="keyword">for</span> dropping, not recommended <span class="keyword">for</span> use with slings, ropes, pulleys, or tightropes.                                      |</span><br><span class="line">| Customer complaint:</span><br><span class="line">Not heavy enough to generate flying stars around head of victim. If being purchased <span class="keyword">for</span> dropping, recommend ANV02 or ANV03 instead. |</span><br><span class="line">+----------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>词全文本搜索检索包含词heavy的所有行（有两行）。其中使用了关键字 IN BOOLEAN MODE 但实际上没有指定布尔操作符，因此，其结果与没有指定布尔方式的结果相同。</p>
<blockquote>
<p><strong>IN BOOLEAN MODE的行为差异</strong>    虽然这个例子的结果与没有 IN BOOLEAN MODE 的相同，但其行为有一个重要差别（即使在这个特殊的例子没有表现出来）。将在18.2.5节指出。</p>
</blockquote>
<br>

<p><strong>表18-1 全文本布尔操作符</strong></p>
<table>
<thead>
<tr>
<th align="center">布尔操作符</th>
<th align="center">说 明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>+</code></td>
<td align="center">包含，词必须存在</td>
</tr>
<tr>
<td align="center"><code>-</code></td>
<td align="center">排除，词必须不出现</td>
</tr>
<tr>
<td align="center"><code>&gt;</code></td>
<td align="center">包含，而且增加等级值</td>
</tr>
<tr>
<td align="center"><code>&lt;</code></td>
<td align="center">包含，且减少等级值</td>
</tr>
<tr>
<td align="center"><code>()</code></td>
<td align="center">把词组成子表达式（允许这些子表达式作为一个组被包含、排除、排列等）</td>
</tr>
<tr>
<td align="center"><code>~</code></td>
<td align="center">取消一个词的排序值</td>
</tr>
<tr>
<td align="center"><code>*</code></td>
<td align="center">词尾的通配符</td>
</tr>
<tr>
<td align="center"><code>&quot;&quot;</code></td>
<td align="center">定义一个短语（与单个词的列表不一样，它匹配整个短语以便包含或排除这个短语）</td>
</tr>
</tbody></table>
<br>

<p>以下举例说明各操作符的使用样例：</p>
<p>匹配<strong>包含</strong>heavy但<strong>不包含</strong>任意<strong>以rope开始</strong>的词的行【-】【*】</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text </span><br><span class="line"><span class="keyword">FROM</span> productnotes </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">&#x27;heavy -rope*&#x27;</span> <span class="keyword">IN</span> <span class="type">BOOLEAN</span> MODE);</span><br></pre></td></tr></table></figure>

<p>匹配<strong>同时包含</strong>词rabbit和词bait的行【+】</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text </span><br><span class="line"><span class="keyword">FROM</span> productnotes</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">&#x27;+rabbit +bait&#x27;</span> <span class="keyword">IN</span> <span class="type">BOOLEAN</span> MODE);</span><br></pre></td></tr></table></figure>

<p><strong>没有指定操作符</strong>，该搜索匹配包含rabbit和bait中的至少一个词的行【无】</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text </span><br><span class="line"><span class="keyword">FROM</span> productnotes </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">&#x27;rabbit biat&#x27;</span> <span class="keyword">IN</span> <span class="type">BOOLEAN</span> MODE);</span><br></pre></td></tr></table></figure>

<p>匹配<strong>短语</strong>rabbit bait而不是匹配两个词rabbit和bait【””】</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text</span><br><span class="line"><span class="keyword">FROM</span> productnotes</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">&#x27;&quot;rabbit bait&quot;&#x27;</span> <span class="keyword">IN</span> <span class="type">BOOLEAN</span> MODE);</span><br></pre></td></tr></table></figure>

<p>匹配rabbit和carrot，增加前者的等级，降低后者的等级【&gt;】【&lt;】</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text</span><br><span class="line"><span class="keyword">FROM</span> productnotes</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">&#x27;&gt;rabbit &lt;bait&#x27;</span> <span class="keyword">IN</span> <span class="type">BOOLEAN</span> MODE);</span><br></pre></td></tr></table></figure>

<p>匹配词safe和combination，降低后者的等级【()】</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text</span><br><span class="line"><span class="keyword">FROM</span> productnotes</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">&#x27;+safe +(&lt;combination)&#x27;</span> <span class="keyword">IN</span> <span class="type">BOOLEAN</span> MODE);</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p><strong>排列而不排序</strong>    在布尔方式中，不按等级值降序排序返回的行。</p>
</blockquote>
<p><br><br><br></p>
<h4 id="18-2-5-全文本搜索的使用说明"><a href="#18-2-5-全文本搜索的使用说明" class="headerlink" title="18.2.5 全文本搜索的使用说明"></a>18.2.5 全文本搜索的使用说明</h4><p>以下给出<strong>全文本搜索</strong>的**某些==重要的说明==**：</p>
<ul>
<li>在索引全文本数据时，<strong>短词被忽略且从索引中排除</strong>。短词定义为那些具有3个或3个以下字符的词（如果需要，这个数目可以更改）。</li>
<li>MySQL带有一个内建的<strong>非用词（stopword）列表</strong>，这些词在索引全文本数据时总是被忽略。如果需要，可以覆盖这个列表（请阅读MySQL文档以了解如何完成此工作）。</li>
<li>许多词出现的频率很高，搜索它们没有用处（返回太多的结果）。因此，MySQL规定了一条<strong>50%规则</strong>：如果一个词出现在50%以上的行中，则将他作为一个非用词忽略。50%规则不用于 IN BOOLEAN MODE。</li>
<li><strong>忽略词中的单引号</strong>。例如：don’t索引为dont。</li>
<li><strong>不具有词分隔符</strong>（包括日语和汉语）的语言<strong>不能恰当地返回全文本搜索结果</strong>。</li>
<li>如前所述，仅在<strong>MyISAM数据库引擎</strong>中<strong>支持全文本搜索</strong>。</li>
</ul>
<p><br><br><br><br><br><br></p>
<h3 id="18-3-小结"><a href="#18-3-小结" class="headerlink" title="18.3 小结"></a>18.3 小结</h3><ul>
<li><p>为什么使用全文本搜索</p>
</li>
<li><p>性能、控制、智能化搜索结果</p>
</li>
<li><p>如何使用全文本搜索</p>
</li>
</ul>
<p>建表时启用全文本搜索</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">FULLTEXT(目标列名)</span><br></pre></td></tr></table></figure>

<ul>
<li>使用全文本搜索<ul>
<li>Match(目标列)：指定要搜索的列</li>
<li>Against()：指定要使用的搜索表达式</li>
</ul>
</li>
</ul>
<p>使用查询扩展</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text</span><br><span class="line"><span class="keyword">FROM</span> productnotes</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">&#x27;anvils&#x27;</span> <span class="keyword">WITH</span> QUERY EXPANSION);</span><br></pre></td></tr></table></figure>

<p>布尔文本搜索</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text </span><br><span class="line"><span class="keyword">FROM</span> productnotes </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">&#x27;heavy -rope*&#x27;</span> <span class="keyword">IN</span> <span class="type">BOOLEAN</span> MODE);</span><br></pre></td></tr></table></figure>

<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="19-插入数据"><a href="#19-插入数据" class="headerlink" title="19. 插入数据"></a>19. 插入数据</h2><ul>
<li>利用SQL的<strong>INSERT</strong>语句将数据插入表中</li>
</ul>
<p><br><br><br><br><br><br></p>
<h3 id="19-1-数据插入"><a href="#19-1-数据插入" class="headerlink" title="19.1 数据插入"></a>19.1 数据插入</h3><p>INSERT是用来插入（或添加）行到数据库表的。插入可以用几种方式使用：</p>
<ul>
<li>插入完整的行；</li>
<li>插入行的一部分；</li>
<li>插入多行；</li>
<li>插入某些查询的结果。</li>
</ul>
<blockquote>
<p><strong>插入及系统安全</strong>    可针对每个表或每个用户，利用MySQL的安全机制禁止使用INSERT语句。（在28节涉及）</p>
</blockquote>
<p><br><br><br><br><br><br></p>
<h3 id="19-2-插入完整的行"><a href="#19-2-插入完整的行" class="headerlink" title="19.2 插入完整的行"></a>19.2 插入完整的行</h3><p>要求指定表名和被插入到新行中的值。</p>
<p><strong>例</strong>：插入一个新客户到 customers 表。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, </span><br><span class="line">      <span class="string">&#x27;Pep E. LaPew&#x27;</span>, </span><br><span class="line">      <span class="string">&#x27;100 Main Street&#x27;</span>, </span><br><span class="line">      <span class="string">&#x27;Los Angeles&#x27;</span>, </span><br><span class="line">      <span class="string">&#x27;CA&#x27;</span>, </span><br><span class="line">      <span class="string">&#x27;90046&#x27;</span>, </span><br><span class="line">      <span class="string">&#x27;USA&#x27;</span>, </span><br><span class="line">      <span class="keyword">NULL</span>, </span><br><span class="line">      <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>没有输出</strong>    INSERT语句一般不会产生输出。</p>
</blockquote>
<p><strong>分析</strong></p>
<p>这种语法简单，但<strong>不安全，应尽量避免使用</strong>。该SQL语句高度依赖表中列的定义次序。</p>
<p>更安全的方法如下：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers(cust_name, </span><br><span class="line">                      cust_address, </span><br><span class="line">                      cust_city, </span><br><span class="line">                      cust_state, </span><br><span class="line">                      cust_zip, </span><br><span class="line">                      cust_country, </span><br><span class="line">                      cust_contact, </span><br><span class="line">                      cust_email)</span><br><span class="line">            <span class="keyword">VALUES</span>(<span class="string">&#x27;Pep E. LaPew&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;100 Main Street&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;Los Angeles&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;CA&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;90046&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;USA&#x27;</span>, </span><br><span class="line">                   <span class="keyword">NULL</span>, </span><br><span class="line">                   <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>总是使用列的列表</strong>    一般不要使用没有明确给出列的列表的INSERT语句。使用列的列表能使SQL代码继续发挥作用，即使表结构发生了变化。</p>
</blockquote>
<blockquote>
<p><strong>仔细地给出值</strong>    不管使用哪种INSERT语法，都必须给出VALUES的正确数目。不提供列名时，必须给每个表列提供一个值；提供列名时，必须给每个列出的列给出一个值。</p>
</blockquote>
<blockquote>
<p><strong>省略列</strong>    如果表的定义允许，可以在INSERT语句中省略某些列。省略的列必须满足以下某个条件</p>
<ul>
<li>该列定义为允许NULL值（无值或空值）。</li>
<li>在表定义中给出默认值。这表示如果不给出空值，将使用默认值。</li>
</ul>
</blockquote>
<blockquote>
<p><strong>提高整体性能</strong>    数据库经常被多个客户访问，对处理什么请求以及用什么次序处理进行管理时=是MySQL的任务。INSERT操作可能很耗时（特别是有很多索引需要更新时），而且它可能降低等待处理的SELECT语句的性能。</p>
<p>如果<strong>数据检索</strong>是最重要的（通常是这样）。则可以通过在<strong>INSERT</strong>和<strong>INTO</strong>之间添加关键字<strong>LOW_PRIORITY</strong>，指示MySQL<strong>降低INSERT语句的优先级</strong>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> LOW_PRIORITY <span class="keyword">INTO</span></span><br></pre></td></tr></table></figure>

<p>这也适用于<strong>UPDATE</strong>和<strong>DELETE</strong>语句。</p>
</blockquote>
<p><br><br><br><br><br><br></p>
<h3 id="19-3-插入多个行"><a href="#19-3-插入多个行" class="headerlink" title="19.3 插入多个行"></a>19.3 插入多个行</h3><p>一次插入多个行有如下几种办法。</p>
<p><strong>方法1</strong>：使用多条SELECT语句，每条语句分号结束，一次提交</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers(cust_name, </span><br><span class="line">                      cust_address, </span><br><span class="line">                      cust_city, </span><br><span class="line">                      cust_state, </span><br><span class="line">                      cust_zip, </span><br><span class="line">                      cust_country)</span><br><span class="line">            <span class="keyword">VALUES</span>(<span class="string">&#x27;Pep E. LaPew&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;100 Main Street&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;Los Angeles&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;CA&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;90046&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;USA&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers(cust_name, </span><br><span class="line">                      cust_address, </span><br><span class="line">                      cust_city, </span><br><span class="line">                      cust_state, </span><br><span class="line">                      cust_zip, </span><br><span class="line">                      cust_country)</span><br><span class="line">            <span class="keyword">VALUES</span>(<span class="string">&#x27;M. Martian&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;42 Galaxy Way&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;New York&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;NY&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;11213&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;USA&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>方法2</strong>：只要每条SELECT语句中的列名（和次序）相同，可以如下组合各语句：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers(cust_name, </span><br><span class="line">                      cust_address, </span><br><span class="line">                      cust_city, </span><br><span class="line">                      cust_state, </span><br><span class="line">                      cust_zip, </span><br><span class="line">                      cust_country)</span><br><span class="line">            <span class="keyword">VALUES</span>(</span><br><span class="line">                	<span class="string">&#x27;Pep E. LaPew&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;100 Main Street&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;Los Angeles&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;CA&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;90046&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;USA&#x27;</span>),</span><br><span class="line">				(</span><br><span class="line">                    <span class="string">&#x27;M. Martian&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;42 Galaxy Way&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;New York&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;NY&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;11213&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;USA&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>其中单条语句有多组列名、次序一致的值，每组值用一对圆括号括起来，用逗号分隔。</p>
<blockquote>
<p><strong>提高INSERT的性能</strong>    这种方法可以提高数据库处理的性能，因为MySQL用单条INSERT语句处理多个插入比使用多条INSERT更快。</p>
</blockquote>
<p><br><br><br><br><br><br></p>
<h3 id="19-4-插入检索出的数据"><a href="#19-4-插入检索出的数据" class="headerlink" title="19.4 插入检索出的数据"></a>19.4 插入检索出的数据</h3><ul>
<li><strong>适用场景</strong>：要从另一表中合并客户到你的customers表。</li>
</ul>
<p>此时，不需要每次读取一行，再将它用INSERT插入。</p>
<p>例：将custnew表中的数据导入customers表中。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers(cust_id, </span><br><span class="line">                      cust_contact, </span><br><span class="line">                      cust_email, </span><br><span class="line">                      cust_name, </span><br><span class="line">                      cust_address, </span><br><span class="line">                      cust_city, </span><br><span class="line">                      cust_state, </span><br><span class="line">                      cust_zip, </span><br><span class="line">                      cust_country)</span><br><span class="line">                 <span class="keyword">SELECT</span> cust_id, </span><br><span class="line">					cust_contact, </span><br><span class="line">					cust_email, </span><br><span class="line">					cust_name, </span><br><span class="line">					cust_address, </span><br><span class="line">					cust_city, </span><br><span class="line">					cust_state, </span><br><span class="line">					cust_zip, </span><br><span class="line">                      cust_country</span><br><span class="line">                 <span class="keyword">FROM</span> custnew</span><br><span class="line">                 <span class="keyword">WHERE</span> cust_id <span class="keyword">IN</span> (<span class="number">10010</span>);</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>该语句插入表customers多少行，取决于表custnew中的数据有多少行，没有则不会插入。</p>
<blockquote>
<p><strong>INSERT SELECT中的列名</strong>    为简单起见，上述示例中的INSERT和SELECT语句中使用了相同的列名。但是，<strong>不一定要求列名匹配</strong>。事实上，<strong>MySQL不关心SELECT返回的列名</strong>。**它使用的是<font color="ffa600">列的位置</font>**。因此SELECT中的第一列（不管其列名是什么）将用来填充INSERT表列中指定的第一个列，第二列将用来填充INSERT表列中指定的第二个列，依此类推。这对于使用不同列名的表中导入数据是非常有用的。</p>
</blockquote>
<p><br><br></p>
<p>INSERT SELECT语句中SELECT语句可包含WHERE子句以过滤插入的数据。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers(cust_id, </span><br><span class="line">                      cust_contact, </span><br><span class="line">                      cust_email, </span><br><span class="line">                      cust_name, </span><br><span class="line">                      cust_address, </span><br><span class="line">                      cust_city, </span><br><span class="line">                      cust_state, </span><br><span class="line">                      cust_zip, </span><br><span class="line">                      cust_country)</span><br><span class="line">                 <span class="keyword">SELECT</span> cust_id, </span><br><span class="line">					cust_contact, </span><br><span class="line">					cust_email, </span><br><span class="line">					cust_name, </span><br><span class="line">					cust_address, </span><br><span class="line">					cust_city, </span><br><span class="line">					cust_state, </span><br><span class="line">					cust_zip, </span><br><span class="line">                      cust_country</span><br><span class="line">                 <span class="keyword">FROM</span> custnew</span><br><span class="line">                 <span class="keyword">WHERE</span> cust_id <span class="keyword">IN</span> (<span class="number">10010</span>);</span><br></pre></td></tr></table></figure>

<p><br><br><br><br><br><br></p>
<h3 id="19-5-小结"><a href="#19-5-小结" class="headerlink" title="19.5 小结"></a>19.5 小结</h3><ul>
<li>使用<code>INSERT INTO</code>语句将数据插入表</li>
<li>使用<code>INSERT INTO SELECT</code>语句从其他表导入数据</li>
</ul>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="20-更新和删除数据"><a href="#20-更新和删除数据" class="headerlink" title="20. 更新和删除数据"></a>20. 更新和删除数据</h2><ul>
<li>利用UPDATE和DELETE语句进一步操纵表数据。</li>
</ul>
<p><br><br><br><br><br><br></p>
<h3 id="20-1-更新数据"><a href="#20-1-更新数据" class="headerlink" title="20.1 更新数据"></a>20.1 更新数据</h3><p>更新（修改）表中的数据，可使用<strong>UPDATE</strong>语句。可采用<strong>两种方式</strong>使用UPDATE：</p>
<ul>
<li>更新表中的特定行；</li>
<li>更新表中的所有行。</li>
</ul>
<blockquote>
<p><strong>不要省略WHERE子句</strong>    在使用UPDATE时一定要注意细心，因为稍不注意，就会更新表中的所有行。</p>
</blockquote>
<blockquote>
<p><strong>UPDATE与安全</strong>    可以限制和控制UPDATE语句的使用，更多内容见28节。</p>
</blockquote>
<p>基本的UPDATE语句由3部分组成：</p>
<ol>
<li>要更新的表；</li>
<li>列名和它们的新值</li>
<li>确定要更新行的过滤条件。</li>
</ol>
<br>

<p>例：客户10005有了电子邮件地址，因此他的记录需要更新。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE customers </span><br><span class="line"><span class="keyword">SET</span> cust_email <span class="operator">=</span> <span class="string">&#x27;elmer@fudd.com&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="number">10005</span>;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>UPDATE + 表名 指明要更新的表；SET + 列名 + ‘值’ 指明要更新的列和值；WHERE + 条件 筛选指定更新的行。</p>
<p>如果没有WHERE子句，MySQL将更新列目标列的所有行。</p>
<br>

<p><strong>更新多个列</strong>的语法稍有不同。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE customers </span><br><span class="line"><span class="keyword">SET</span> cust_name <span class="operator">=</span> <span class="string">&#x27;The Fudds&#x27;</span>, </span><br><span class="line">	cust_email <span class="operator">=</span> <span class="string">&#x27;elmer@fudd.com&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="number">10005</span>;</span><br></pre></td></tr></table></figure>

<p>更新多个列时，只需要使用单个SET命令，每个“列=值”对之间用逗号分隔（最后一列之后不用逗号。</p>
<blockquote>
<p><strong>注</strong>：<strong>关键字SET和列名之间不能用制表TAB分隔</strong>，可以使用空格作为分隔符。</p>
</blockquote>
<blockquote>
<p><strong>在UPDATE语句中使用子查询</strong>    UPDATE语句中可以使用子查询，使得能<strong>用SELECT语句检索出的数据更新列数据</strong>。子查询内容详见14节。</p>
</blockquote>
<blockquote>
<p><strong>IGNORE关键字</strong>    如果用UPDATE语句更新更多行，并且在<strong>更新</strong>这些行中的一行或多行时<strong>出现</strong>一个<strong>错误</strong>，则<strong>整个UPDATE操作被取消</strong>（错误发生前更新的所有行被恢复到它们原来的值）。<strong>如果需要即使时发生错误，也继续进行更新，可以使用IGNORE关键字</strong>，如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE IGNORE customers ...</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>删除某个列</strong>的值，<strong>可以将其置为NULL</strong>。</p>
<p><br><br><br><br><br><br></p>
<h3 id="20-2-删除数据"><a href="#20-2-删除数据" class="headerlink" title="20.2 删除数据"></a>20.2 删除数据</h3><p>使用DELETE语句，有两种方式：</p>
<ul>
<li>从表中删除特定的行；</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></table></figure>

<ul>
<li>从表中删除所有行。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>不要省略WHERE子句</strong>    使用DELETE语句时，如果省略WHERE子句，将会删除所有行。</p>
</blockquote>
<blockquote>
<p><strong>DELTE与安全</strong>    可以限制和控制DELTE语句的使用。详见28节，</p>
</blockquote>
<p><br><strong>例1</strong>：从customers表中删除一行。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> customers </span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="number">10010</span>;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>DELETE FROM 指明要从中删除数据的表名；WHERE子句过滤要删除的行。如果没有WHERE子句，将删除表中的所有行。</p>
<p>DELETE不需要列名或通配符，DELETE删除的是整行的数据。要删除指定的列，需使用UPDATE语句。</p>
<blockquote>
<p><strong>删除表的内容而不是表</strong>    DELETE语句从表中删除行，甚至是删除表中的所有行。但是，DELETE不删除表本身。</p>
</blockquote>
<blockquote>
<p><strong>更快的删除</strong>    如果想<strong>从表中删除所有行</strong>，不要使用DELETE。可使用<strong>TRANCATE TABLE</strong>语句。该语句的速度更快。（TRANCATE TABLE实际上是删除原来的表并重建一个新表。而不是逐行删除原来表的数据）。</p>
</blockquote>
<p><br><br><br><br><br><br></p>
<h3 id="20-3-更新和删除的指导原则"><a href="#20-3-更新和删除的指导原则" class="headerlink" title="20.3 更新和删除的指导原则"></a>20.3 更新和删除的指导原则</h3><ul>
<li>除非确实打算更新或删除每一行，否则绝对<strong>不要使用不带WHERE子句的UPDATE或DELETE子句</strong>。</li>
<li><strong>保证每个表都有主键</strong>（见15节），尽可能像WHERE子句那样使用它（可以指定各主键，多个值或值的范围）。</li>
<li>在<strong>对UPDATE或DELETE语句使用WHERE子句前</strong>，应该<strong>先用SELECT子句进行测试</strong>，保证它过滤的是正确的记录，以防编写的WHERE子句不正确。</li>
<li><strong>使用强制实施引用完整性的数据库</strong>（见15节），这样MySQL将不允许删除具有与其他表相关联的数据的行。</li>
</ul>
<blockquote>
<p><strong>小心使用</strong>    MySQL没有撤销（undo）按钮，所以使用UPDATE和DELETE时，应小心慎重。</p>
</blockquote>
<p><br><br><br><br><br><br></p>
<h3 id="20-4-小结"><a href="#20-4-小结" class="headerlink" title="20.4 小结"></a>20.4 小结</h3><ul>
<li>UPDATE语句</li>
<li>DELETE语句</li>
<li>WHERE子句在其中的重要性</li>
<li>删改相关原则</li>
</ul>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="21-创建和操纵表"><a href="#21-创建和操纵表" class="headerlink" title="21. 创建和操纵表"></a>21. 创建和操纵表</h2><p>创建表：<code>CREATE TABLE</code></p>
<p><code>NULL</code>值</p>
<p>主键</p>
<p>使用<code>AUTO_INCREMENT</code></p>
<p>使用默认值<code>DEFAULT</code></p>
<p>引擎类型</p>
<p>更改表：<code>ALTER TABLE</code></p>
<p>给表增加一个列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> vendors</span><br><span class="line"><span class="keyword">ADD</span> vend_phone <span class="type">CHAR</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure>

<p>给表删除一个列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Vendors</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> vend_phone;</span><br></pre></td></tr></table></figure>

<p>定义<font color="ffa600">外键</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> orderitems	<span class="comment">-- 修改表orderitems</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_orderitems_orders	<span class="comment">-- 为其添加外键约束 fk_orderitems_orders</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (order_num) <span class="keyword">REFERENCES</span> orders (order_num);	<span class="comment">-- 外键order_num，引用表orders的order_num列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> orderitems	<span class="comment">-- 修改表orderitems</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_orderitems_products <span class="comment">-- 为其添加外键约束 fk_orderitems_products</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (prod_id) <span class="keyword">REFERENCES</span> products (prod_id);	<span class="comment">-- 外键prod_id，引用表products的prod_id列</span></span><br></pre></td></tr></table></figure>

<p>删除表</p>
<p>使用<code>DROP TABLE</code>语句删除表（删除整个表而不是其内容）。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> customers2;	<span class="comment">-- 执行这条语句将永久删除该表</span></span><br></pre></td></tr></table></figure>

<p>重命名表</p>
<p>使用<code>RENAME TABLE</code> 语句可以重命名一个表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> customers2 <span class="keyword">TO</span> customers;</span><br></pre></td></tr></table></figure>

<p><br><br><br><br><br><br></p>
<h3 id="21-1-创建表"><a href="#21-1-创建表" class="headerlink" title="21.1 创建表"></a>21.1 创建表</h3><p><br><br><br></p>
<h4 id="21-1-1-表创建基础"><a href="#21-1-1-表创建基础" class="headerlink" title="21.1.1 表创建基础"></a>21.1.1 表创建基础</h4><p>使用CREATE TABLE创建表，必须包含表的</p>
<p><br><br></p>
<p>示例1：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">########################</span><br><span class="line"><span class="keyword">Create</span> customers <span class="keyword">table</span></span><br><span class="line">########################</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customers</span><br><span class="line">(</span><br><span class="line">    cust_id      <span class="type">int</span>       <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    cust_name    <span class="type">char</span>(<span class="number">50</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">    cust_address <span class="type">char</span>(<span class="number">50</span>)  <span class="keyword">NULL</span> ,</span><br><span class="line">    cust_city    <span class="type">char</span>(<span class="number">50</span>)  <span class="keyword">NULL</span> ,</span><br><span class="line">    cust_state   <span class="type">char</span>(<span class="number">5</span>)   <span class="keyword">NULL</span> ,</span><br><span class="line">    cust_zip     <span class="type">char</span>(<span class="number">10</span>)  <span class="keyword">NULL</span> ,</span><br><span class="line">    cust_country <span class="type">char</span>(<span class="number">50</span>)  <span class="keyword">NULL</span> ,</span><br><span class="line">    cust_contact <span class="type">char</span>(<span class="number">50</span>)  <span class="keyword">NULL</span> ,</span><br><span class="line">    cust_email   <span class="type">char</span>(<span class="number">255</span>) <span class="keyword">NULL</span> ,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (cust_id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure>

<p><strong>示例2</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `mf_fd_cache` (</span><br><span class="line">    `id` 			 <span class="type">bigint</span>(<span class="number">18</span>)		<span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    `dep` 			 <span class="type">varchar</span>(<span class="number">3</span>) 	<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    `arr` 			 <span class="type">varchar</span>(<span class="number">3</span>) 	<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    `flightNo` 	 	 <span class="type">varchar</span>(<span class="number">10</span>)  	 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    `flightDate` 	 <span class="type">date</span> 			<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1000-10-10&#x27;</span>,</span><br><span class="line">    `flightTime` 	 <span class="type">varchar</span>(<span class="number">20</span>)  	 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    `isCodeShare`  	 tinyint(<span class="number">1</span>) 	 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    `tax` 			<span class="type">int</span>(<span class="number">11</span>) 		<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    `yq` 			<span class="type">int</span>(<span class="number">11</span>) 		<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    `cabin` 		<span class="type">char</span>(<span class="number">2</span>) 		<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    `ibe_price` 	<span class="type">int</span>(<span class="number">11</span>) 		<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    `ctrip_price` 	<span class="type">int</span>(<span class="number">11</span>) 		<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    `official_price` <span class="type">int</span>(<span class="number">11</span>) 		<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    `uptime` 		datetime 		<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1000-10-10 10:10:10&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uid` (`dep`,`arr`,`flightNo`,`flightDate`,`cabin`),</span><br><span class="line">  KEY `uptime` (`uptime`),</span><br><span class="line">  KEY `flight` (`dep`,`arr`),</span><br><span class="line">  KEY `flightDate` (`flightDate`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB  <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>gbk;</span><br></pre></td></tr></table></figure>

<p><br><br><br></p>
<h4 id="21-1-2-使用NULL值"><a href="#21-1-2-使用NULL值" class="headerlink" title="21.1.2 使用NULL值"></a>21.1.2 使用NULL值</h4><blockquote>
<p><strong>理解NULL</strong>    不要把NULL与空串相混淆。NULL值是没有值，不是空串。如果指定<code>&#39;&#39;</code>（两个单引号，中间无字符），这在NOT NULL列中是允许的。空串是一个有效的值，不是无值。NULL值用NULL关键字指定。</p>
</blockquote>
<p><br><br><br></p>
<h4 id="21-1-3-主键再介绍"><a href="#21-1-3-主键再介绍" class="headerlink" title="21.1.3 主键再介绍"></a>21.1.3 主键再介绍</h4><p>无论单列还是多列的组合，主键值必须唯一。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#########################</span><br><span class="line"># <span class="keyword">Create</span> orderitems <span class="keyword">table</span></span><br><span class="line">#########################</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orderitems</span><br><span class="line">(</span><br><span class="line">  order_num  <span class="type">int</span>          <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">  order_item <span class="type">int</span>          <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">  prod_id    <span class="type">char</span>(<span class="number">10</span>)     <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">  quantity   <span class="type">int</span>          <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">  item_price <span class="type">decimal</span>(<span class="number">8</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (order_num, order_item)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>主键只能使用不允许NULL值的列。允许NULL值得列不能作为唯一标识。</p>
</blockquote>
<p><br><br><br></p>
<h4 id="21-1-4-使用AUTO-INCREMENT"><a href="#21-1-4-使用AUTO-INCREMENT" class="headerlink" title="21.1.4 使用AUTO_INCREMENT"></a>21.1.4 使用AUTO_INCREMENT</h4><p>AUTL_INCREMENT告诉MySQL，本列每当增加一行时自动增量。每次执行一个INSERT操作时，MySQL自动对该列增量，给该列赋予下一个可用的值。</p>
<blockquote>
<p><strong>AUTO_INCREMENT值不会重复生成</strong>    经测试，使用AUTO_INCREMENT自动生成ID后，将该行删去，再次使用AUTO_INCREMENT生成新的一行，新的ID值为被删除行的ID自增1。也就是说，MySQL会记录历史生成过的AUTO_INCREMENT值，无论该行是否被删去，AUTO_INCREMENT都不会重用某个值，以避免主键重复。</p>
</blockquote>
<p><strong>每个表只允许一个AUTO_INCREMENT列</strong>，而且<strong>它必须被索引</strong>（如，通过使它成为主键）。</p>
<blockquote>
<p><strong>覆盖AUTO_INCREMENT</strong>    在AUTO_INCREMENT列中，可以在INSERT语句中显示地指定一个值，只要确保它的值是唯一的即可。后续的增量将根据手工插入的值计算。</p>
</blockquote>
<blockquote>
<p><strong>确定AUTO_INCREMENT值</strong>    使用 <strong><code>last_insert_id()</code></strong> 方法查找最后一个AUTO_INCREMENT的值。使用方法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_insert_id</span><br></pre></td></tr></table></figure>

<p>可将它用于后续的MySQL语句。</p>
</blockquote>
<p><br><br><br></p>
<h4 id="21-1-5-使用默认值"><a href="#21-1-5-使用默认值" class="headerlink" title="21.1.5 使用默认值"></a>21.1.5 使用默认值</h4><p>插入行时若没有给出值，将使用默认值。</p>
<p>例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#########################</span><br><span class="line"># <span class="keyword">Create</span> orderitems <span class="keyword">table</span></span><br><span class="line">#########################</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orderitems</span><br><span class="line">(</span><br><span class="line">  order_num  <span class="type">int</span>          <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">  order_item <span class="type">int</span>          <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">  prod_id    <span class="type">char</span>(<span class="number">10</span>)     <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">  quantity   <span class="type">int</span>          <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>,</span><br><span class="line">  item_price <span class="type">decimal</span>(<span class="number">8</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (order_num, order_item)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>不允许函数</strong>    与大多数DBMS不一样，MySQL不允许使用函数作为默认值，DEFAULT<strong>只支持常量</strong>。</p>
</blockquote>
<blockquote>
<p><strong>使用默认值而不是NULL值</strong>    对用于<strong>计算</strong>或<strong>数据分组</strong>的列<strong>应使用默认值</strong>而不是NULL。</p>
</blockquote>
<p><br><br><br></p>
<h4 id="21-1-6-引擎类型"><a href="#21-1-6-引擎类型" class="headerlink" title="21.1.6 引擎类型"></a>21.1.6 引擎类型</h4><p>以下是几个MySQL常用引擎：</p>
<ul>
<li><strong>InnoDB</strong>：可靠的<strong>事务处理</strong>引擎（见26节），不支持全文本搜索。</li>
<li><strong>MEMORY</strong>：功能等同于MyISAM，但由于数据存储在内存（不是磁盘）中，速度很快（特别<strong>适合于临时表</strong>）。</li>
<li><strong>MyISAM</strong>：高性能引擎，<strong>支持全文本搜索</strong>，但不支持事务处理。</li>
</ul>
<blockquote>
<p><strong>外键不能跨引擎</strong>    混用引擎类型有一个大缺陷。外键）用于强制实施引用完整性（见第1节），不能跨引擎，即使使用一个引擎的表不能引用具有使用不同引擎的表的外键。</p>
</blockquote>
<p><br><br><br><br><br><br></p>
<h3 id="21-2-更新表"><a href="#21-2-更新表" class="headerlink" title="21.2 更新表"></a>21.2 更新表</h3><p>使用ALTER TABLE语句更新表。理想状态下，当表中存储数据以后，该表就不应该再被更新。在表的设计过程中需要花费大量时间来考虑，以便后期不对该表进行大的改动。</p>
<p>为了使用<code>ALTER TABLE</code> 更改表结构，必须给出下面的信息：</p>
<ul>
<li>在<code>ALTER TABLE</code> 之后给出要更改的表名（该表必须存在，否则将出错）；</li>
<li>所做更改的列表。</li>
</ul>
<p><strong>例1</strong>：给表添加一个列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> vendors</span><br><span class="line"><span class="keyword">ADD</span> vend_phone <span class="type">CHAR</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure>

<p><strong>例2</strong>：删除一个列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Vendors</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> vend_phone;</span><br></pre></td></tr></table></figure>

<br>

<p><code>ALTER TABLE</code> 的一种常见用途是定义外键。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> orderitems	<span class="comment">-- 修改表orderitems</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_orderitems_orders	<span class="comment">-- 为其添加外键约束 fk_orderitems_orders</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (order_num) <span class="keyword">REFERENCES</span> orders (order_num);	<span class="comment">-- 外键order_num，引用表orders的order_num列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> orderitems	<span class="comment">-- 修改表orderitems</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_orderitems_products <span class="comment">-- 为其添加外键约束 fk_orderitems_products</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (prod_id) <span class="keyword">REFERENCES</span> products (prod_id);	<span class="comment">-- 外键prod_id，引用表products的prod_id列</span></span><br></pre></td></tr></table></figure>

<p>这里，由于要更改4个不同的表，使用了4条<code>ALTER TABLE</code> 语句。为了对单个表进行多个更改，可以使用单条<code>ALTER TABLE</code> 语句，每个更改用逗号分隔。</p>
<p>复杂的表结构更改一般需要手动删除过程，它涉及以下步骤：</p>
<ul>
<li>用新的列布局创建一个新表；</li>
<li>使用<code>INSERT SELECT</code> 语句（详见19节）从旧表复制数据到新表。如果有必要，可使用转换函数和计算字段；</li>
<li>检验包含所需数据的新表；</li>
<li>重命名旧表（如果确定，可以删除它）；</li>
<li>用旧表原来的名字重命名新表；</li>
<li>根据需要，重新创建触发器、存储过程、索引和外键。</li>
</ul>
<blockquote>
<p><strong>小心使用<code>ALTER TABLE</code></strong>     数据库表的更改不能撤销，应该在进行改动前做一个完整的备份（模式和数据的备份）。如果增加了不需要的列，可能不能删除；如果删除了不应该删除的列，可能会丢失该列中的所有数据。</p>
</blockquote>
<p><br><br><br><br><br><br></p>
<h3 id="21-3-删除表"><a href="#21-3-删除表" class="headerlink" title="21.3 删除表"></a>21.3 删除表</h3><p>使用<code>DROP TABLE</code>语句删除表（删除整个表而不是其内容）。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> customers2;	<span class="comment">-- 执行这条语句将永久删除该表</span></span><br></pre></td></tr></table></figure>

<p>删除表没有确认，也不能撤销，执行这条语句将永久删除该表。</p>
<p><br><br><br><br><br><br></p>
<h3 id="21-4-重命名表"><a href="#21-4-重命名表" class="headerlink" title="21.4 重命名表"></a>21.4 重命名表</h3><p>使用<code>RENAME TABLE</code> 语句可以重命名一个表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> customers2 <span class="keyword">TO</span> customers;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> backup_customers <span class="keyword">TO</span> customers,</span><br><span class="line">             backup_vendors <span class="keyword">TO</span> vendors,</span><br><span class="line">             backup_products <span class="keyword">TO</span> products;</span><br></pre></td></tr></table></figure>

<p><br><br><br><br><br><br></p>
<h3 id="21-5-小结"><a href="#21-5-小结" class="headerlink" title="21.5 小结"></a>21.5 小结</h3><ul>
<li><code>CREATE TABLE</code> 创建新表</li>
<li><code>ALTER TABLE</code> 更改表列（或其他诸如约束或索引等对象）</li>
<li><code>DROP TABLE</code> 用来完整地删除一个表</li>
<li>数据库引擎、定义主键和外键，以及其他重要的表和列选项</li>
<li>这些语句必须小心使用，并且应在做了<strong>备份</strong>后使用。</li>
</ul>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="22-使用视图"><a href="#22-使用视图" class="headerlink" title="22. 使用视图"></a>22. 使用视图</h2><p>什么是视图</p>
<ul>
<li>视图为<strong>虚拟的</strong>表。</li>
<li>视图是包装的SQL查询，可将其当作一个表使用。</li>
<li>视图仅仅是用来查看存储在别处的数据的一种设施，所以视图本身并<strong>不包含数据</strong>。</li>
</ul>
<p>创建和修改视图</p>
<ul>
<li>视图用<code>CREATE VIEW</code> 语句来创建。</li>
<li>使用<code>SHOW CREATE VIEW viewname;</code> 来查看创建视图的语句。</li>
<li>用<code>DROP</code> 删除视图，其语法为<code>DROP VIEW viewname;</code> 。</li>
<li>更新视图时，可以先用<code>DROP</code> 再用<code>CREATE</code> ，也可以直接用<code>CREATE OR REPLACE VIEW</code> 。如果要更新的视图不存在，则第2条更新语句会创建一个视图；如果要更新的视图存在，则第2条更新语句会替换原有视图。</li>
</ul>
<p>利用视图简化某些SQL操作</p>
<p>简化复杂的联结</p>
<p>创建一个名为<code>productcustomers</code> 的视图，它联结三个表，以返回已订购了任意产品的所有客户的列表。如果执行<code>SELECT * FROM productcustomers</code> ，将列出订购了任意产品的客户。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> productcustomers <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, prod_id</span><br><span class="line"><span class="keyword">FROM</span> customers, orders, orderitems</span><br><span class="line"><span class="keyword">WHERE</span> customers.cust_id <span class="operator">=</span> orders.cust_id</span><br><span class="line">  <span class="keyword">AND</span> orderitems.order_num <span class="operator">=</span> orders.order_num;	<span class="comment">-- 创建视图productcustomers</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> productcustomers</span><br><span class="line"><span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span>;		<span class="comment">-- 使用视图productcustomers，检索订购了产品`TNT2` 的客户</span></span><br></pre></td></tr></table></figure>

<p>重新格式化检索出的数据</p>
<p>在单个组合计算列中返回供应商名和位置</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> vendorlocations <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Concat(RTrim(vend_name), <span class="string">&#x27; (&#x27;</span>, RTrim(vend_country), <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">       <span class="keyword">AS</span> vend_title</span><br><span class="line"><span class="keyword">FROM</span> vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> vendorlocations;</span><br></pre></td></tr></table></figure>

<p>过滤不想要的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> customeremaillist <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_id, cust_name, cust_email</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_email <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>



<p>与计算字段联用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> orderitemsexpanded <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> order_num,	<span class="comment">-- 注意：增加了order_num列，用于在使用视图时通过该列检索</span></span><br><span class="line">       prod_id,</span><br><span class="line">       quantity,</span><br><span class="line">       item_price,</span><br><span class="line">       quantity<span class="operator">*</span>item_price <span class="keyword">AS</span> expanded_price</span><br><span class="line"><span class="keyword">FROM</span> orderitems;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> orderitemsexpanded</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20005</span>;</span><br></pre></td></tr></table></figure>

<p>更新视图</p>
<p>视情况而定。详见后文。</p>
<p><br><br><br><br><br><br></p>
<h3 id="22-1-视图"><a href="#22-1-视图" class="headerlink" title="22.1 视图"></a>22.1 视图</h3><blockquote>
<p><strong>需要MySQL 5</strong> MySQL 5添加了对视图的支持。</p>
</blockquote>
<p><strong>视图是虚拟的表</strong>。与包含数据的表不一样，<strong>视图只包含<font color="ffa600">使用时动态检索数据的查询</font>。</strong></p>
<p>一个例子理解视图：第15节中用下面的<code>SELECT</code> 语句从3个表中检索数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> customers, orders, orderitems</span><br><span class="line"><span class="keyword">WHERE</span> customers.cust_id <span class="operator">=</span> orders.cust_id</span><br><span class="line">    <span class="keyword">AND</span> orderitems.order_num <span class="operator">=</span> orders.order_num</span><br><span class="line">    <span class="keyword">AND</span> prod_id <span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>此查询用来检索订购了某个特定产品的客户。任何需要这个数据的人都必须理解相关表的结构，并且知道如何创建查询和对表进行联结。为了检索其他产品（或多个产品）的相同数据，必须修改最后的<code>WHERE</code> 子句。</p>
<p>现在，假如可以把整个查询包装成一个名为<code>productcustomers</code> 的虚拟表，则可以如下轻松地检索出相同的数据：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> productcustomers</span><br><span class="line"><span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>这就是视图的作用。<code>productcustomers</code> 是一个视图，作为<font color="ffa600"><strong>视图</strong></font>，它不包含表中应该有的任何列或数据，它<font color="ffa600">包含的是一个SQL查询</font>（与上面用以正确联结表的相同的查询）。</p>
<p><br><br><br></p>
<h4 id="22-1-1-为什么使用视图"><a href="#22-1-1-为什么使用视图" class="headerlink" title="22.1.1 为什么使用视图"></a>22.1.1 为什么使用视图</h4><p>下面是视图的一些常见应用。</p>
<ul>
<li><strong>重用SQL语句</strong>。</li>
<li><strong>简化复杂的SQL操作</strong>。在编写查询后，可以方便地重用它而不必知道它的基本查询细节。</li>
<li>使用表的组成部分而不是整个表。</li>
<li><strong>保护数据</strong>。可以给用户授予表的特定部分的访问权限而不是整个表的访问权限。</li>
<li><strong>更改数据格式和表示</strong>。视图可返回与底层表的表示和格式不同的数据。</li>
</ul>
<p>在视图创建之后，可以用与表基本相同的方式利用它们。可以对视图执行<code>SELECT</code> 操作，过滤和排序数据，将视图联结到其他视图或表，甚至能添加和更新数据（添加和更新数据存在某些限制。关于这个内容稍后还要做进一步的介绍）。</p>
<p>重要的是知道<font color="ffa600"><strong>视图仅仅是用来查看存储在别处的数据的一种设施</strong></font>。<strong>视图本身不包含数据</strong>，因此<strong>它们返回的数据是从其他表中检索出来的</strong>。在添加或更改这些表中的数据时，视图将返回改变过的数据。</p>
<blockquote>
<p><strong>性能问题</strong>     因为视图不包含数据，所以每次使用视图时，都必须处理查询执行时所需的任一个检索。如果你用多个联结和过滤创建了复杂的视图或者嵌套了视图，可能会发现性能下降得很厉害。因此，在部署使用了大量视图的应用前，应该进行测试。</p>
</blockquote>
<p><br><br><br></p>
<h4 id="22-1-2-视图的规则和限制"><a href="#22-1-2-视图的规则和限制" class="headerlink" title="22.1.2 视图的规则和限制"></a>22.1.2 视图的规则和限制</h4><p>视图创建和使用的一些最常见的规则和限制：</p>
<ul>
<li>与表一样，视图必须<font color="ffa600">唯一命名</font>（不能给视图取与别的视图或表相同的名字）。</li>
<li>对于可以创建的视图数目没有限制。</li>
<li>为了创建视图，必须具有足够的<font color="ffa600">访问权限</font>。这些限制通常由数据库管理人员授予。</li>
<li><font color="ffa600">视图可以嵌套</font>。即可以利用从其他视图中检索数据的查询来构造一个视图。</li>
<li><code>ORDER BY</code> 可以用在视图中，但如果从该视图检索数据<code>SELECT</code>中也含有<code>ORDER BY</code> ，那么该视图中的<code>ORDER BY</code> 将被覆盖。</li>
<li><font color="ffa600">视图不能索引</font>，也不能有关联的触发器或默认值。</li>
<li>视图可以和表一起使用。例如，编写一条联结表和视图的<code>SELECT</code> 语句。</li>
</ul>
<p><br><br><br><br><br><br></p>
<h3 id="22-2-使用视图"><a href="#22-2-使用视图" class="headerlink" title="22.2 使用视图"></a>22.2 使用视图</h3><br>

<p>视图的创建：</p>
<ul>
<li>视图用<code>CREATE VIEW</code> 语句来创建。</li>
<li>使用<code>SHOW CREATE VIEW viewname;</code> 来查看创建视图的语句。</li>
<li>用<code>DROP</code> 删除视图，其语法为<code>DROP VIEW viewname;</code> 。</li>
<li>更新视图时，可以先用<code>DROP</code> 再用<code>CREATE</code> ，也可以直接用<code>CREATE OR REPLACE VIEW</code> 。如果要更新的视图不存在，则第2条更新语句会创建一个视图；如果要更新的视图存在，则第2条更新语句会替换原有视图。</li>
</ul>
<p><br><br><br><br><br><br></p>
<h4 id="22-2-1-利用视图简化复杂的联结"><a href="#22-2-1-利用视图简化复杂的联结" class="headerlink" title="22.2.1 利用视图简化复杂的联结"></a>22.2.1 利用视图简化复杂的联结</h4><p>视图的最常见的应用之一是隐藏复杂的SQL，这通常都会涉及联结。</p>
<p>例：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> productcustomers <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, prod_id</span><br><span class="line"><span class="keyword">FROM</span> customers, orders, orderitems</span><br><span class="line"><span class="keyword">WHERE</span> customers.cust_id <span class="operator">=</span> orders.cust_id</span><br><span class="line">  <span class="keyword">AND</span> orderitems.order_num <span class="operator">=</span> orders.order_num;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>这条语句创建一个名为<code>productcustomers</code> 的视图，它联结三个表，以返回已订购了任意产品的所有客户的列表。如果执行<code>SELECT * FROM productcustomers</code> ，将列出订购了任意产品的客户。</p>
<p>为检索订购了产品<code>TNT2</code> 的客户，可如下进行：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> productcustomers</span><br><span class="line"><span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span>;		<span class="comment">-- 使用视图，检索订购了产品`TNT2` 的客户</span></span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----------------+--------------+</span><br><span class="line">| cust_name      | cust_contact |</span><br><span class="line">+----------------+--------------+</span><br><span class="line">| Coyote Inc.    | Y Lee        |</span><br><span class="line">| Yosemite Place | Y Sam        |</span><br><span class="line">+----------------+--------------+</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>这条语句通过<code>WHERE</code> 子句从视图中检索特定数据。在MySQL处理此查询时，它将指定的<code>WHERE</code> 子句添加到视图查询中的已有<code>WHERE</code> 子句中，以便正确过滤数据。</p>
<p>利用视图，可一次性编写基础的SQL，然后根据需要多次使用。</p>
<blockquote>
<p><strong>创建可重用的视图</strong>    创建不受特定数据限制的视图是一种好办法。例如，上面创建的视图返回生产所有产品的客户而不仅仅是生产<code>TNT2</code> 的客户。扩展视图的范围不仅使得它能被重用，而且甚至更有用。这样做不需要创建和维护多个类似视图。</p>
</blockquote>
<p><br><br><br></p>
<h4 id="22-2-2-用视图重新格式化检索出的数据"><a href="#22-2-2-用视图重新格式化检索出的数据" class="headerlink" title="22.2.2 用视图重新格式化检索出的数据"></a><strong>22.2.2</strong> 用视图重新格式化检索出的数据</h4><br>

<p>下面的<code>SELECT</code> 语句（第10节）在单个组合计算列中返回供应商名和位置：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Concat(RTrim(vend_name), <span class="string">&#x27; (&#x27;</span>, RTrim(vend_country), <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">       <span class="keyword">AS</span> vend_title</span><br><span class="line"><span class="keyword">FROM</span> vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br></pre></td></tr></table></figure>

<p>如经常需要这个格式的结果。不必在每次需要时执行联结，创建一个视图，每次需要时使用它即可。</p>
<p>将此语句转换为视图，可按如下进行：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> vendorlocations <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Concat(RTrim(vend_name), <span class="string">&#x27; (&#x27;</span>, RTrim(vend_country), <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">       <span class="keyword">AS</span> vend_title</span><br><span class="line"><span class="keyword">FROM</span> vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br></pre></td></tr></table></figure>

<p>这条语句使用与以前的<code>SELECT</code> 语句相同的查询创建视图。为了检索出以创建所有邮件标签的数据，可如下进行：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> vendorlocations;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-------------------------+</span><br><span class="line">| vend_title              |</span><br><span class="line">+-------------------------+</span><br><span class="line">| ACME (USA)              |</span><br><span class="line">| Anvils R Us (USA)       |</span><br><span class="line">| Furball Inc. (USA)      |</span><br><span class="line">| Jet Set (England)       |</span><br><span class="line">| Jouets Et Ours (France) |</span><br><span class="line">| LT Supplies (USA)       |</span><br><span class="line">+-------------------------+</span><br></pre></td></tr></table></figure>

<p><br><br><br><br><br><br></p>
<h4 id="22-2-3-用视图过滤不想要的数据"><a href="#22-2-3-用视图过滤不想要的数据" class="headerlink" title="22.2.3 用视图过滤不想要的数据"></a>22.2.3 用视图过滤不想要的数据</h4><p>在普通的WHERE子句中，可以定义<code>customeremaillist</code> 视图，它过滤没有电子邮件地址的客户。【此处过滤<code>NULL</code>值】</p>
<p><strong>输入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE VIEW customeremaillist AS</span><br><span class="line">SELECT cust_id, cust_name, cust_email</span><br><span class="line">FROM customers</span><br><span class="line">WHERE cust_email IS NOT NULL;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>该视图过滤了<code>cust_email</code> 列中具有<code>NULL</code> 值的那些行，使他们不被检索出来。</p>
<p>现在，可以像使用其他表一样使用视图<code>customeremaillist</code> 。</p>
<p><strong>输入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM customeremaillist;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+----------------+---------------------+</span><br><span class="line">| cust_id | cust_name      | cust_email          |</span><br><span class="line">+---------+----------------+---------------------+</span><br><span class="line">|   10001 | Coyote Inc.    | ylee@coyote.com     |</span><br><span class="line">|   10003 | Wascals        | rabbit@wascally.com |</span><br><span class="line">|   10004 | Yosemite Place | sam@yosemite.com    |</span><br><span class="line">+---------+----------------+---------------------+</span><br></pre></td></tr></table></figure>

<p><br><br><br><br><br><br></p>
<h4 id="22-2-4-使用视图与计算字段"><a href="#22-2-4-使用视图与计算字段" class="headerlink" title="22.2.4 使用视图与计算字段"></a>22.2.4 使用视图与计算字段</h4><p>视图有助于<strong>简化计算字段的使用</strong>。</p>
<p><strong>例：第10节中介绍的一条<code>SELECT</code> 语句。它检索某个特定订单中的物品，计算每种物品的总价格：</strong></p>
<p>原包含计算字段的语句如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id,</span><br><span class="line">       quantity,</span><br><span class="line">       item_price,</span><br><span class="line">       quantity<span class="operator">*</span>item_price <span class="keyword">AS</span> expanded_price</span><br><span class="line"><span class="keyword">FROM</span> orderitems</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20005</span>;</span><br></pre></td></tr></table></figure>

<p>将其转换为一个视图，如下进行：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> orderitemsexpanded <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> order_num,	<span class="comment">-- 注意：增加了order_num列，用于在使用视图时通过该列检索</span></span><br><span class="line">       prod_id,</span><br><span class="line">       quantity,</span><br><span class="line">       item_price,</span><br><span class="line">       quantity<span class="operator">*</span>item_price <span class="keyword">AS</span> expanded_price</span><br><span class="line"><span class="keyword">FROM</span> orderitems;</span><br></pre></td></tr></table></figure>

<p>为检索订单<code>20005</code> 的详细内容（上面的输出），如下进行：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> orderitemsexpanded</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20005</span>;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-----------+---------+----------+------------+----------------+</span><br><span class="line">| order_num | prod_id | quantity | item_price | expanded_price |</span><br><span class="line">+-----------+---------+----------+------------+----------------+</span><br><span class="line">|     20005 | ANV01   |       10 |       5.99 |          59.90 |</span><br><span class="line">|     20005 | ANV02   |        3 |       9.99 |          29.97 |</span><br><span class="line">|     20005 | TNT2    |        5 |      10.00 |          50.00 |</span><br><span class="line">|     20005 | FB      |        1 |      10.00 |          10.00 |</span><br><span class="line">+-----------+---------+----------+------------+----------------+</span><br></pre></td></tr></table></figure>

<p><br><br><br></p>
<h4 id="22-2-5-更新视图"><a href="#22-2-5-更新视图" class="headerlink" title="22.2.5 更新视图"></a>22.2.5 更新视图</h4><p>迄今为止的所有视图都是和<code>SELECT</code> 语句使用的。然而，视图的数据能否更新？答案视情况而定。</p>
<p>通常，视图是可更新的（即，可以对它们使用<code>INSERT</code> 、<code>UPDATE</code> 和<code>DELETE</code> ）。更新一个视图将更新其基表（视图本身没有数据）。如果对视图增加或删除行，实际上是对其基表增加或删除行。</p>
<p>但是，并非所有视图都是可更新的。基本上可以说，如果MySQL不能正确地确定被更新的基数据，则不允许更新（包括插入和删除）。这实际上意味着，如果视图定义中有以下操作，则<font color="ff0000"><strong>不能</strong></font>进行视图的更新：</p>
<ul>
<li>分组（使用<code>GROUP BY</code> 和<code>HAVING</code> ）；</li>
<li>联结；</li>
<li>子查询；</li>
<li>并；</li>
<li>聚集函数（<code>Min()</code> 、<code>Count()</code> 、<code>Sum()</code> 等）；</li>
<li><code>DISTINCT</code> ；</li>
<li>导出（计算）列。</li>
</ul>
<br>

<blockquote>
<p><strong>将视图用于检索</strong>     一般，应该将视图用于检索（<code>SELECT</code> 语句）而不用于更新（<code>INSERT</code> 、<code>UPDATE</code> 和<code>DELETE</code> )。</p>
</blockquote>
<p><br><br><br><br><br><br></p>
<h3 id="22-3-小结"><a href="#22-3-小结" class="headerlink" title="22.3 小结"></a>22.3 小结</h3><ul>
<li>视图为虚拟的表。</li>
<li>视图包含的不是数据而是根据需要检索数据的查询。</li>
<li>视图提供了一种MySQL的<code>SELECT</code> 语句层次的封装</li>
<li>可用来<ul>
<li>简化数据处理</li>
<li>重新格式化基础数据</li>
<li>保护基础数据</li>
</ul>
</li>
</ul>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="23-使用存储过程"><a href="#23-使用存储过程" class="headerlink" title="23. 使用存储过程"></a>23. 使用存储过程</h2><ul>
<li><p>什么是存储过程</p>
<ul>
<li>为以后的使用而保存的一条或多条MySQL语句的集合。类似批文件，但作用不仅限于批处理。</li>
</ul>
</li>
<li><p>为什么要使用存储过程</p>
<ul>
<li><p>把处理封装在容易使用的单元中，<strong>简化复杂的操作</strong>；</p>
</li>
<li><p>不要求反复建立一系列处理步骤，这<strong>保证了数据的完整性</strong>；</p>
</li>
<li><p><strong>简化对变动的管理</strong>。如果表名、列名或业务逻辑（或别的内容）有变化，只需要更改存储过程的代码。使用它的人员甚至不需要知道这些变化。</p>
</li>
<li><p><strong>提高性能</strong>。因为使用存储过程比使用单独的SQL语句要快。</p>
</li>
<li><p>存在一些只能用在单个请求中的MySQL元素和特性，存储过程可以使用它们来编写功能更强更灵活的代码（在下一节的例子中可以看到。）</p>
<p>使用存储过程有3个主要的好处，即<font color="ffa600">简单、安全、高性能</font>。</p>
</li>
</ul>
</li>
</ul>
<p>使用存储过程</p>
<p>执行存储过程<code>CALL procedurename();</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> productpricing(<span class="variable">@pricelow</span>,	<span class="comment">-- 括号内为存储过程的参数，此处的3个参数用于保存调用结果</span></span><br><span class="line">                    <span class="variable">@pricehigh</span>,</span><br><span class="line">                    <span class="variable">@priceaverage</span>);	<span class="comment">-- 执行存储过程productpricing</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@pricelow</span>, <span class="variable">@pricehigh</span>, <span class="variable">@priceaverage</span>;	<span class="comment">-- 查看调用结果</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> ordertotal(<span class="number">20005</span>,<span class="number">0</span>,<span class="variable">@total</span>);	<span class="comment">-- 调用存储过程ordertotal，前2个参数为传入参数，第3个为传出参数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@total</span>;	<span class="comment">-- 查看调用结果</span></span><br></pre></td></tr></table></figure>

<p>创建存储过程</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> productpricing()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="built_in">Avg</span>(prod_price) <span class="keyword">AS</span> priceaverage</span><br><span class="line">  <span class="keyword">FROM</span> products;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意使用命令行创建存储过程时要临时修改分隔符。</li>
</ul>
<p>删除存储过程</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> productpricing;	<span class="comment">-- 只给出存储过程名，不需要加括号及参数。</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用参数</li>
</ul>
<p>使用<code>IN</code> 和<code>OUT</code> 参数。<code>ordertotal</code> 接受订单号并返回该订单的合计</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> ordertotal(</span><br><span class="line">	<span class="keyword">IN</span> onumber <span class="type">INT</span>,	<span class="comment">-- 输入参数</span></span><br><span class="line">    <span class="keyword">OUT</span> ototal <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)	<span class="comment">-- 输出参数</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">Sum</span>(item_price<span class="operator">*</span>quantity)</span><br><span class="line">	<span class="keyword">FROM</span> orderitems</span><br><span class="line">	<span class="keyword">WHERE</span> order_num <span class="operator">=</span> onumber</span><br><span class="line">	<span class="keyword">INTO</span> ototal;</span><br><span class="line"><span class="keyword">END</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>建立智能存储过程</p>
<ul>
<li>包含分支等逻辑的存储过程，由输入的参数判定逻辑。</li>
</ul>
</li>
</ul>
<p>检查存储过程</p>
<p>显示用来创建一个存储过程的<code>CREATE</code> 语句，使用<code>SHOW CREATE PROCEDURE</code> 语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> ordertotal;</span><br></pre></td></tr></table></figure>

<p>获得包括何时、由谁创建等详细信息的存储过程列表，使用<code>SHOW PROCEDURE STATUS</code> 。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">PROCEDURE</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;ordertotal&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><br><br><br><br><br><br></p>
<h3 id="23-1-存储过程"><a href="#23-1-存储过程" class="headerlink" title="23.1 存储过程"></a>23.1 存储过程</h3><blockquote>
<p><strong>需要MySQL 5</strong>     MySQL 5添加了对存储过程的支持。</p>
</blockquote>
<p>迄今为止，使用的大多数SQL语句都是针对一个或多个表的单条语句。并非所有操作都这么简单，经常会有一个完整的操作需要多条语句才能完成。例如，考虑以下的情形。</p>
<ul>
<li>为了处理订单，需要核对以保证库存中有相应的物品。</li>
<li>如果库存有物品，这些物品需要预定以便不将它们再卖给别的人，并且要减少可用的物品数量以反映正确的库存量。</li>
<li>库存中没有的物品需要订购，这需要与供应商进行某种交互。</li>
<li>关于哪些物品入库（并且可以立即发货）和哪些物品退订，需要通知相应的客户。</li>
</ul>
<p>可以创建存储过程。<font color="ffa600"><strong>存储过程</strong>简单来说，就是<strong>为以后的使用而保存的一条或多条MySQL语句的集合</strong>。<strong>可将其视为批文件，虽然它们的作用不仅限于批处理</strong>。</font></p>
<p><br><br><br><br><br><br></p>
<h3 id="23-2-为什么使用存储过程"><a href="#23-2-为什么使用存储过程" class="headerlink" title="23.2 为什么使用存储过程"></a>23.2 为什么使用存储过程</h3><p>理由：</p>
<ul>
<li>通过把处理封装在容易使用的单元中，<strong>简化复杂的操作</strong>（正如前面例子所述）。</li>
<li>由于不要求反复建立一系列处理步骤，这<strong>保证了数据的完整性</strong>。</li>
</ul>
<p>如果所有开发人员和应用程序都使用同一（试验和测试）存储过程，则所使用的代码都是相同的。</p>
<p>这一点的延伸就是防止错误。需要执行的步骤越多，出错的可能性就越大。防止错误保证了数据的一致性。</p>
<ul>
<li><strong>简化对变动的管理</strong>。如果表名、列名或业务逻辑（或别的内容）有变化，只需要更改存储过程的代码。使用它的人员甚至不需要知道这些变化。</li>
</ul>
<p>这一点的延伸就是安全性。通过存储过程限制对基础数据的访问减少了数据讹误（无意识的或别的原因所导致的数据讹误）的机会。</p>
<ul>
<li><strong>提高性能</strong>。因为使用存储过程比使用单独的SQL语句要快。</li>
<li>存在一些只能用在单个请求中的MySQL元素和特性，存储过程可以使用它们来编写功能更强更灵活的代码（在下一节的例子中可以看到。）</li>
</ul>
<p>使用存储过程有3个主要的好处，即<font color="ffa600">简单、安全、高性能</font>。</p>
<br>

<p>它的一些缺陷：</p>
<ul>
<li>一般来说，存储过程的编写比基本SQL语句复杂，编写存储过程需要更高的技能，更丰富的经验。</li>
<li>你可能没有创建存储过程的安全访问权限。许多数据库管理员限制存储过程的创建权限，允许用户使用存储过程，但不允许他们创建存储过程。</li>
</ul>
<p><br><br><br><br><br><br></p>
<h3 id="23-3-使用存储过程"><a href="#23-3-使用存储过程" class="headerlink" title="23.3 使用存储过程"></a>23.3 使用存储过程</h3><p>分为执行、创建等内容。</p>
<p><br><br><br></p>
<h4 id="23-3-1-执行存储过程"><a href="#23-3-1-执行存储过程" class="headerlink" title="23.3.1 执行存储过程"></a>23.3.1 执行存储过程</h4><p>MySQL称存储过程的执行为调用，因此MySQL执行存储过程的语句为<code>CALL</code> 。<code>CALL</code> 接受存储过程的名字以及需要传递给它的任意参数。举例如下：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> productpricing(<span class="variable">@pricelow</span>,	<span class="comment">-- 括号内为存储过程的参数，此处的3个参数用于保存调用结果</span></span><br><span class="line">                    <span class="variable">@pricehigh</span>,</span><br><span class="line">                    <span class="variable">@priceaverage</span>);	<span class="comment">-- 执行存储过程productpricing</span></span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>其中，执行名为<code>productpricing</code> 的存储过程，它计算并返回产品的最低、最高和平均价格。</p>
<p>存储过程可以显示结果，也可以不显示结果，如稍后所述。</p>
<p><br><br><br></p>
<h4 id="23-3-2-创建存储过程"><a href="#23-3-2-创建存储过程" class="headerlink" title="23.3.2 创建存储过程"></a>23.3.2 创建存储过程</h4><p><strong>例1：创建一个返回产品平均价格的存储过程。</strong></p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> productpricing()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">Avg</span>(prod_price) <span class="keyword">AS</span> priceaverage</span><br><span class="line">	<span class="keyword">FROM</span> products;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>此存储过程名为<code>productpricing</code> ，用<code>CREATE PROCEDURE productpricing()</code> 语句定义。如果存储过程接受参数，它们将在<code>()</code> 中列举出来。此存储过程没有参数，但后跟的<code>()</code> 仍然需要。<code>BEGIN</code> 和<code>END</code> 语句用来限定存储过程体，过程体本身仅是一个简单的<code>SELECT</code> 语句（使用第12章介绍的<code>Avg()</code> 函数）。</p>
<p>在MySQL处理这段代码时，它创建一个新的存储过程<code>productpricing</code> 。没有返回数据，因为这段代码并未调用存储过程，这里只是为以后使用而创建它。</p>
<blockquote>
<p>==<strong>MySQL 命令行客户机的分隔符</strong>==    如果你使用的是<code>mysql</code> 命令行实用程序，应该仔细阅读此说明。</p>
<p>默认的MySQL语句分隔符为<code>;</code>。<code>mysql</code> 命令行实用程序也使用;作为语句分隔符。如果命令行实用程序要解释<strong>存储过程自身内的;字符</strong>，则它们最终不会成为存储过程的成分，这会使存储过程中的SQL出现句法错误。</p>
<p>解决办法是临时更改命令行实用程序的语句分隔符，如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> productpricing()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="built_in">Avg</span>(prod_price) <span class="keyword">AS</span> priceaverage</span><br><span class="line">  <span class="keyword">FROM</span> products;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p>其中，<code>DELIMITER//</code> 告诉命令行实用程序使用<code>//</code> 作为新的语句结束分隔符，可以看到标志存储过程结束的<code>END</code> 定义为<code>END//</code> 而不是<code>END;</code> 。这样，存储过程体内的<code>;</code> 仍然保持不动，并且正确地传递给数据库引擎。最后，为恢复为原来的语句分隔符，可使用<code>DELIMITER;</code> 。</p>
<p>除<code>\</code> 符号外，任何字符都可以用作语句分隔符。</p>
<p>如果你使用的是<code>mysql</code> 命令行实用程序，在阅读本章时请记住这里的内容。</p>
</blockquote>
<p><br><br></p>
<p>使用这个存储过程方法如下所示：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> productpricing();</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+--------------+</span><br><span class="line">| priceaverage |</span><br><span class="line">+--------------+</span><br><span class="line">|    16.133571 |</span><br><span class="line">+--------------+</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p><code>CALL productpricing();</code> 执行刚创建的存储过程并显示返回的结果。因为<font color="ffa600"><strong>存储过程实际上是一种函数</strong></font>，所以存储过程名后需要有<code>()</code>符号（即使不传递参数也需要）。</p>
<p><br><br><br></p>
<h4 id="23-3-3-删除存储过程"><a href="#23-3-3-删除存储过程" class="headerlink" title="23.3.3 删除存储过程"></a>23.3.3 删除存储过程</h4><p>存储过程在创建之后，被保存在服务器上以供使用，直至被删除。删除命令（类似于第21章所介绍的语句）从服务器中删除存储过程。</p>
<p>为删除刚创建的存储过程，可使用以下语句：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> productpricing;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>这条语句删除刚创建的存储过程。请<font color="ffa600"><strong>注意</strong></font>没有使用后面的<code>()</code> ，<strong>只给出存储过程名</strong>。</p>
<blockquote>
<p><strong>仅当存在时删除</strong>    如果指定的过程不存在，则<code>DROP PROCEDURE</code> 将产生一个错误。当过程存在想删除它时（如果过程不存在也不产生错误）可使用<code>DROP PROCEDURE IF EXISTS</code> 。</p>
</blockquote>
<p><br><br><br></p>
<h4 id="23-2-4-使用参数"><a href="#23-2-4-使用参数" class="headerlink" title="23.2.4 使用参数"></a>23.2.4 使用参数</h4><p>一般，存储过程并不显示结果，而是把结果返回给你指定的变量。</p>
<ul>
<li><strong>变量（variable）</strong>：内存中一个特定的位置，用来临时存储数据。</li>
</ul>
<p>以下是<code>productpricing</code> 的修改版本（如果不先删除此存储过程，则不能再次创建它）：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> productpricing(</span><br><span class="line">	<span class="keyword">OUT</span> pl <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>),</span><br><span class="line">    <span class="keyword">OUT</span> ph <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>),</span><br><span class="line">    <span class="keyword">OUT</span> pa <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">Min</span>(prod_price)</span><br><span class="line">	<span class="keyword">INTO</span> pl</span><br><span class="line">	<span class="keyword">FROM</span> products;</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">Max</span>(prod_price)</span><br><span class="line">	<span class="keyword">INTO</span> ph</span><br><span class="line">	<span class="keyword">FROM</span> products;</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">Avg</span>(prod_price)</span><br><span class="line">	<span class="keyword">INTO</span> pa</span><br><span class="line">	<span class="keyword">FROM</span> products;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>此存储过程接受3个参数：<code>pl</code> 存储产品最低价格，<code>ph</code> 存储产品最高价格，<code>pa</code> 存储产品平均价格。每个参数必须具有指定的类型，这里使用十进制值。关键字<code>OUT</code> 指出相应的参数用来从存储过程传出一个值（返回给调用者）。</p>
<p>MySQL支持</p>
<ul>
<li><code>IN</code> （传递给存储过程）</li>
<li><code>OUT</code>（从存储过程传出，如这里所用）</li>
<li><code>INOUT</code> （对存储过程传入和传出）类型的参数</li>
</ul>
<p>存储过程的代码位于<code>BEGIN</code> 和<code>END</code> 语句内，如前所见，它们是一系列<code>SELECT</code> 语句，用来检索值，然后保存到相应的变量（通过指定<code>INTO</code> 关键字）。</p>
<blockquote>
<p><strong>参数的数据类型</strong>     存储过程的参数允许的数据类型与表中使用的数据类型相同。<strong>附录D</strong>列出了这些类型。</p>
<p>注意，记录集不是允许的类型，因此，不能通过一个参数返回多个行和列。这就是前面的例子为什么要使用3个参数（和3条<code>SELECT</code> 语句）的原因。</p>
</blockquote>
<p><br><br></p>
<p>为了调用此存储过程，需要指定3个变量名。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> productpricing(<span class="variable">@pricelow</span>,</span><br><span class="line">                    <span class="variable">@pricehigh</span>,</span><br><span class="line">                    <span class="variable">@priceaverage</span>);</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>由于此存储过程要求3个参数，因此必须正好传递3个参数，不多也不少。所以，这条<code>CALL</code> 语句给出3个参数。它们是存储过程将保存结果的3个变量的名字。</p>
<blockquote>
<p><strong>变量名</strong>     所有MySQL变量都必须以<code>@</code> 开始。</p>
</blockquote>
<p>在调用时，这条语句并不显示任何数据。它返回以后可以显示（或在其他处理中使用）的变量。</p>
<p>可以通过<strong>SELECT</strong>语句显示变量值：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="variable">@priceaverage</span>;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------------+</span><br><span class="line">| @priceaverage |</span><br><span class="line">+---------------+</span><br><span class="line">|         16.13 |</span><br><span class="line">+---------------+</span><br></pre></td></tr></table></figure>

<p>同时获得三个值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="variable">@pricelow</span>, <span class="variable">@pricehigh</span>, <span class="variable">@priceaverage</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-----------+------------+---------------+</span><br><span class="line">| @pricelow | @pricehigh | @priceaverage |</span><br><span class="line">+-----------+------------+---------------+</span><br><span class="line">|      2.50 |      55.00 |         16.13 |</span><br><span class="line">+-----------+------------+---------------+</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p>另一个例子：使用<code>IN</code> 和<code>OUT</code> 参数。<code>ordertotal</code> 接受订单号并返回该订单的合计：</p>
<p><strong>创建存储过程</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> ordertotal(</span><br><span class="line">	<span class="keyword">IN</span> onumber <span class="type">INT</span>,	<span class="comment">-- 输入参数</span></span><br><span class="line">    <span class="keyword">OUT</span> ototal <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)	<span class="comment">-- 输出参数</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">Sum</span>(item_price<span class="operator">*</span>quantity)</span><br><span class="line">	<span class="keyword">FROM</span> orderitems</span><br><span class="line">	<span class="keyword">WHERE</span> order_num <span class="operator">=</span> onumber</span><br><span class="line">	<span class="keyword">INTO</span> ototal;</span><br><span class="line"><span class="keyword">END</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p><strong>调用存储过程</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> ordertotal(<span class="number">20005</span>,<span class="variable">@total</span>);</span><br></pre></td></tr></table></figure>

<p><strong>查看调用结果</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="variable">@total</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+--------+</span><br><span class="line">| @total |</span><br><span class="line">+--------+</span><br><span class="line">| 149.87 |</span><br><span class="line">+--------+</span><br></pre></td></tr></table></figure>

<br>

<p>为了得到另一个订单的合计显示，需要再次调用存储过程，然后重新显示变量：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> ordertotal(<span class="number">20009</span>,<span class="variable">@total</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@total</span>;</span><br></pre></td></tr></table></figure>

<p><br><br><br></p>
<h4 id="23-3-5-建立智能存储过程"><a href="#23-3-5-建立智能存储过程" class="headerlink" title="23.3.5 建立智能存储过程"></a>23.3.5 建立智能存储过程</h4><p>考虑存储过程内包含业务规则和智能处理的情形：</p>
<p>需要获得与以前一样的订单合计，但需要对合计增加营业税，不过只针对某些顾客（或许是你所在州中那些顾客）。那么，你需要做下面几件事情：</p>
<ul>
<li>获得合计（与以前一样）；</li>
<li>把营业税有条件地添加到合计；</li>
<li>返回合计（带或不带税）。</li>
</ul>
<p>存储过程的完整工作如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Name: ordertotal</span></span><br><span class="line"><span class="comment">-- Parameters: onumber = order number</span></span><br><span class="line"><span class="comment">-- 			   taxable = 0 if not taxable, 1 if taxable</span></span><br><span class="line"><span class="comment">-- 			   ototal = order total variable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> ordertotal(</span><br><span class="line">	<span class="keyword">IN</span> onumber <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">IN</span> taxable <span class="type">BOOLEAN</span>,</span><br><span class="line">    <span class="keyword">OUT</span> ototal <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">) COMMENT <span class="string">&#x27;Obtain order total, optionally adding tax&#x27;</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">-- Declare variable for total</span></span><br><span class="line">	<span class="keyword">DECLARE</span> total <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>);</span><br><span class="line">	<span class="comment">-- Declare tax percentage</span></span><br><span class="line">	<span class="keyword">DECLARE</span> taxrate <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">6</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- Get the order total</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">Sum</span>(item_price<span class="operator">*</span>quantity)</span><br><span class="line">	<span class="keyword">FROM</span> orderitems</span><br><span class="line">	<span class="keyword">WHERE</span> order_num <span class="operator">=</span> onumber</span><br><span class="line">	<span class="keyword">INTO</span> total;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- Is this taxable?</span></span><br><span class="line">	IF taxable <span class="keyword">THEN</span></span><br><span class="line">		<span class="comment">-- Yes, so add taxrate to the total</span></span><br><span class="line">		<span class="keyword">SELECT</span> total<span class="operator">+</span>(total<span class="operator">/</span><span class="number">100</span><span class="operator">*</span>taxrate) <span class="keyword">INTO</span> total;</span><br><span class="line">	<span class="keyword">END</span> IF;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- And finally, save to out variable</span></span><br><span class="line">	<span class="keyword">SELECT</span> total <span class="keyword">INTO</span> ototal;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">END</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>此存储过程有很大的变动。首先，增加了注释（前面放置<code>--</code> ）。在存储过程复杂性增加时，这样做特别重要。添加了另外一个参数<code>taxable</code> ，它是一个布尔值（如果要增加税则为真，否则为假）。在存储过程体中，用<code>DECLARE</code> 语句定义了两个局部变量。<code>DECLARE</code>要求指定变量名和数据类型，它也支持可选的默认值（这个例子中的<code>taxrate</code> 的默认被设置为<code>6%</code> ）。<code>SELECT</code> 语句已经改变，因此其结果存储到<code>total</code> （局部变量）而不是<code>ototal</code> 。<code>IF</code> 语句检查<code>taxable</code> 是否为真，如果为真，则用另一<code>SELECT</code> 语句增加营业税到局部变量<code>total</code> 。最后，用另一<code>SELECT</code> 语句将<code>total</code> （它增加或许不增加营业税）保存到<code>ototal</code> 。</p>
<blockquote>
<p><strong><code>COMMENT</code> 关键字</strong>     本例子中的存储过程在<code>CREATE PROCEDURE</code>语句中包含了一个<code>COMMENT</code> 值。它不是必需的，但如果给出，将在<code>SHOW PROCEDURE STATUS</code> 的结果中显示。</p>
</blockquote>
<p>以下输入测试该存储过程</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> ordertotal(<span class="number">20005</span>,<span class="number">0</span>,<span class="variable">@total</span>);	<span class="comment">-- 调用存储过程ordertotal，前2个参数为输入参数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@total</span>;	<span class="comment">-- 查看调用结果</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+--------+</span><br><span class="line">| @total |</span><br><span class="line">+--------+</span><br><span class="line">| 149.87 |</span><br><span class="line">+--------+</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> ordertotal(<span class="number">20005</span>,<span class="number">1</span>,<span class="variable">@total</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@total</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+--------+</span><br><span class="line">| @total |</span><br><span class="line">+--------+</span><br><span class="line">| 158.86 |</span><br><span class="line">+--------+</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p><code>BOOLEAN</code> 值指定为<code>1</code> 表示真，指定为<code>0</code> 表示假（实际上，非零值都考虑为真，只有<code>0</code> 被视为假）。通过给中间的参数指定<code>0</code> 或<code>1</code> ，可以有条件地将营业税加到订单合计上。</p>
<blockquote>
<p><strong><code>IF</code> 语句</strong>     这个例子给出了MySQL的<code>IF</code> 语句的基本用法。<code>IF</code> 语句还支持<code>ELSEIF</code> 和<code>ELSE</code> 子句（前者还使用<code>THEN</code> 子句，后者不使用）。在以后章节中将涉及<code>IF</code> 的其他用法（以及其他流控制语句）</p>
</blockquote>
<p><br><br><br></p>
<h4 id="23-3-6-检查存储过程"><a href="#23-3-6-检查存储过程" class="headerlink" title="23.3.6 检查存储过程"></a>23.3.6 检查存储过程</h4><p>为显示用来创建一个存储过程的<code>CREATE</code> 语句，使用<code>SHOW CREATE PROCEDURE</code> 语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> ordertotal;</span><br></pre></td></tr></table></figure>

<p>为了获得包括何时、由谁创建等详细信息的存储过程列表，使用<code>SHOW PROCEDURE STATUS</code> 。</p>
<blockquote>
<p><strong>限制过程状态结果</strong>     <code>SHOW PROCEDURE STATUS</code> 列出所有存储过程。为限制其输出，可使用<code>LIKE</code> 指定一个过滤模式，例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">PROCEDURE</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;ordertotal&#x27;</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><br><br><br><br><br><br></p>
<h3 id="23-4-小结"><a href="#23-4-小结" class="headerlink" title="23.4 小结"></a>23.4 小结</h3><p>本节介绍了什么是存储过程、存储过程的执行、创建、删除及一些方法。下一节将继续介绍存储过程。</p>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="24-使用游标"><a href="#24-使用游标" class="headerlink" title="24. 使用游标"></a>24. 使用游标</h2><p><br><br></p>
<ul>
<li><strong>游标（cursor）</strong>：是一个存储在MySQL服务器上的数据库查询，它不是一条<code>SELECT</code> 语句，而是被该语句检索出来的结果集。在存储了游标之后，应用程序可以根据需要滚动或浏览其中的数据。</li>
</ul>
<ul>
<li><p>个人理解：游标的作用类似于<font color="ff0000"><strong>迭代器（Iterator）</strong></font>，它可以<font color="ffa600"><strong>结合流程控制</strong></font>，提供了一种按需求<font color="ffa600"><strong>遍历数据</strong></font>或<font color="ffa600"><strong>访问某一特定行</strong></font>的途径。</p>
</li>
<li><p><font color="ffa600"><strong>注意</strong>：游标需要在<strong>存储过程内</strong>定义、开启和使用。</font></p>
</li>
</ul>
<p>什么要使用游标：有时，需要在检索出来的行中前进或后退一行或多行。</p>
<p>创建游标</p>
<p>在存储过程中创建游标</p>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> cursor_name <span class="keyword">CURSOR</span></span><br><span class="line"><span class="keyword">FOR</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> a_table;</span><br></pre></td></tr></table></figure>

<ul>
<li>打开游标</li>
</ul>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">OPEN</span> cursor_name;</span><br></pre></td></tr></table></figure>

<ul>
<li>关闭游标</li>
</ul>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CLOSE</span> cursor_name</span><br></pre></td></tr></table></figure>

<ul>
<li>一个完整的游标样例结构：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> procedure_name()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">-- Declare local variables</span></span><br><span class="line">   <span class="keyword">DECLARE</span> done <span class="type">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">DECLARE</span> var1 <span class="type">INT</span>;</span><br><span class="line">   <span class="keyword">DECLARE</span> var2 <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">-- Declare the cursor</span></span><br><span class="line">   <span class="keyword">DECLARE</span> cursor_name <span class="keyword">CURSOR</span></span><br><span class="line">   <span class="keyword">FOR</span></span><br><span class="line">   <span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> a_table;</span><br><span class="line">   <span class="comment">-- Declare continue handler</span></span><br><span class="line">   <span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">SET</span> done<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">-- Create a table to store the results</span></span><br><span class="line">   <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> resulttable</span><br><span class="line">      (col1 <span class="type">INT</span>, col2 <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">   <span class="comment">-- Open the cursor</span></span><br><span class="line">   <span class="keyword">OPEN</span> cursor_name;</span><br><span class="line"></span><br><span class="line">   <span class="comment">-- Loop through all rows</span></span><br><span class="line">   REPEAT</span><br><span class="line"></span><br><span class="line">      <span class="comment">-- Get order number</span></span><br><span class="line">      <span class="keyword">FETCH</span> ordernumbers <span class="keyword">INTO</span> var1;</span><br><span class="line"></span><br><span class="line">      <span class="comment">-- Get the total for this order(call another procedure to assign value to variable o and t)</span></span><br><span class="line">      <span class="keyword">CALL</span> ordertotal(var1, <span class="number">1</span>, var2);</span><br><span class="line"></span><br><span class="line">      <span class="comment">-- Insert order and total into ordertotals</span></span><br><span class="line">      <span class="keyword">INSERT</span> <span class="keyword">INTO</span> resulttable(col1, col2)</span><br><span class="line">      <span class="keyword">VALUES</span>(var1, var2);</span><br><span class="line"></span><br><span class="line">   <span class="comment">-- End of loop</span></span><br><span class="line">   UNTIL done <span class="keyword">END</span> REPEAT;</span><br><span class="line"></span><br><span class="line">   <span class="comment">-- Close the cursor</span></span><br><span class="line">   <span class="keyword">CLOSE</span> cursor_name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>



<p><br><br><br><br><br><br></p>
<h3 id="24-1-游标"><a href="#24-1-游标" class="headerlink" title="24.1 游标"></a>24.1 游标</h3><blockquote>
<p><strong>需要MySQL 5</strong>     MySQL 5添加了对游标的支持.</p>
</blockquote>
<p>有时，需要在检索出来的行中前进或后退一行或多行。这就是使用游标的原因。<strong>游标（cursor）</strong>是一个存储在MySQL服务器上的数据库查询，它不是一条<code>SELECT</code> 语句，而是被该语句检索出来的结果集。在存储了游标之后，应用程序可以根据需要滚动或浏览其中的数据。</p>
<p>游标主要用于交互式应用，其中用户需要滚动屏幕上的数据，并对数据进行浏览或做出更改。</p>
<blockquote>
<p><strong>只能用于存储过程</strong>     不像多数DBMS，MySQL游标只能用于存储过程（和函数）。</p>
</blockquote>
<p><br><br><br><br><br><br></p>
<h3 id="24-2-使用游标"><a href="#24-2-使用游标" class="headerlink" title="24.2 使用游标"></a>24.2 使用游标</h3><p>使用游标的几个明确步骤：</p>
<ul>
<li>在能够使用游标前，必须<strong>声明</strong>（定义）它。这个过程实际上没有检索数据，它只是定义要使用的<code>SELECT</code> 语句。</li>
<li>一旦声明后，必须<strong>打开</strong>游标以供使用。这个过程用前面定义的<code>SELECT</code> 语句把数据实际检索出来。</li>
<li>对于填有数据的游标，根据需要取出（检索）各行。</li>
<li>在结束游标使用时，必须<strong>关闭</strong>游标。</li>
</ul>
<p>在声明游标后，可根据需要频繁地打开和关闭游标。在游标打开后，可根据需要频繁地执行取操作。</p>
<p><br><br><br></p>
<h4 id="24-2-1-创建游标"><a href="#24-2-1-创建游标" class="headerlink" title="24.2.1 创建游标"></a>24.2.1 创建游标</h4><p>游标用<code>DECLARE</code> 语句创建。<code>DECLARE</code> 命名游标，并定义相应的<code>SELECT</code> 语句，根据需要带<code>WHERE</code> 和其他子句。</p>
<p><strong>例：</strong>下面的语句定义了名为<code>ordernumbers</code> 的游标，使用了可以检索所有订单的<code>SELECT</code> 语句。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> processorders()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> ordernumbers <span class="keyword">CURSOR</span></span><br><span class="line">	<span class="keyword">FOR</span></span><br><span class="line">	<span class="keyword">SELECT</span> ordernum <span class="keyword">FROM</span> orders;</span><br><span class="line"><span class="keyword">END</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>这个存储过程并没有做很多事情，<code>DECLARE</code> 语句用来定义和命名游标，这里为<code>ordernumbers</code> 。存储过程处理完成后，游标就消失（因为它局限于存储过程）。</p>
<p>在定义游标之后，可以打开它。</p>
<p><br><br><br></p>
<h4 id="24-2-2-打开和关闭游标"><a href="#24-2-2-打开和关闭游标" class="headerlink" title="24.2.2 打开和关闭游标"></a>24.2.2 打开和关闭游标</h4><p>游标用<code>OPEN CURSOR</code> 语句来打开：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">OPEN</span> ordernumbers;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>在处理<code>OPEN</code> 语句时执行查询，存储检索出的数据以供浏览和滚动。</p>
<p>游标处理完成后，应当使用如下语句关闭游标：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CLOSE</span> ordernumbers;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p><code>CLOSE</code> 释放游标使用的所有内部内存和资源，因此在每个游标不再需要时都应该关闭。</p>
<p>在一个游标关闭后，如果没有重新打开，则不能使用它。但是，使用声明过的游标不需要再次声明，用<code>OPEN</code> 语句打开它就可以了。</p>
<blockquote>
<p><strong>隐含关闭</strong>     如果你不明确关闭游标，MySQL将会在到达<code>END</code> 语句时自动关闭它。</p>
</blockquote>
<p><br><br></p>
<p>下面是前面例子的修改版本：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> processorders()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="comment">-- Declare the cursor</span></span><br><span class="line">   <span class="keyword">DECLARE</span> ordernumbers <span class="keyword">CURSOR</span></span><br><span class="line">   <span class="keyword">FOR</span></span><br><span class="line">   <span class="keyword">SELECT</span> order_num <span class="keyword">FROM</span> orders;</span><br><span class="line"></span><br><span class="line">   <span class="comment">-- Open the cursor</span></span><br><span class="line">   <span class="keyword">OPEN</span> ordernumbers;</span><br><span class="line"></span><br><span class="line">   <span class="comment">-- Close the cursor</span></span><br><span class="line">   <span class="keyword">CLOSE</span> ordernumbers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>这个存储过程声明、打开和关闭一个游标。但对检索出的数据什么也没做。</p>
<p><br><br><br></p>
<h4 id="24-2-3-使用游标数据"><a href="#24-2-3-使用游标数据" class="headerlink" title="24.2.3 使用游标数据"></a>24.2.3 使用游标数据</h4><p>在一个游标被打开后，可以使用<code>FETCH</code> 语句分别访问它的每一行。<code>FETCH</code> 指定检索什么数据（所需的列），检索出来的数据存储在什么地方。它还向前移动游标中的内部行指针，使下一条<code>FETCH</code> 语句检索下一行（不重复读取同一行）。</p>
<p><br><br></p>
<p><strong>例1：</strong>从从游标中检索单个行（第一行）</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> processorders()</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"></span><br><span class="line">	<span class="comment">-- Declare local variables</span></span><br><span class="line">	<span class="keyword">DECLARE</span> o <span class="type">INT</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- Declare the cursor</span></span><br><span class="line">	<span class="keyword">DECLARE</span> ordernumbers <span class="keyword">CURSOR</span></span><br><span class="line">	<span class="keyword">FOR</span></span><br><span class="line">	<span class="keyword">SELECT</span> order_num <span class="keyword">FROM</span> orders;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- Open the cursor</span></span><br><span class="line">	<span class="keyword">OPEN</span> ordernumbers;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- Get order number</span></span><br><span class="line">	<span class="keyword">FETCH</span> ordernumbers <span class="keyword">INTO</span> o;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- Close the cursor</span></span><br><span class="line">	<span class="keyword">CLOSE</span> ordernumbers;</span><br><span class="line"><span class="keyword">END</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>其中<code>FETCH</code> 用来检索当前行的<code>order_num</code> 列（将自动从第一行开始）到一个名为<code>o</code> 的局部声明的变量中。对检索出的数据不做任何处理。</p>
<br>

<p><strong>例2：</strong>循环检索数据，从第一行到最后一行</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> processorders()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">-- Declare local variables</span></span><br><span class="line">	<span class="keyword">DECLARE</span> done <span class="type">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">DECLARE</span> o <span class="type">INT</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- Declare the cursor</span></span><br><span class="line">	<span class="keyword">DECLARE</span> ordernumbers <span class="keyword">CURSOR</span></span><br><span class="line">	<span class="keyword">FOR</span></span><br><span class="line">	<span class="keyword">SELECT</span> order_num <span class="keyword">FROM</span> orders;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- Declare continue handler</span></span><br><span class="line">	<span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">SET</span> done<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- Open the cursor</span></span><br><span class="line">	<span class="keyword">OPEN</span> ordernumbers;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- Loop through all rows</span></span><br><span class="line">	REPEAT</span><br><span class="line">	</span><br><span class="line">		<span class="comment">-- Get order number</span></span><br><span class="line">		<span class="keyword">FETCH</span> ordernumbers <span class="keyword">INTO</span> o;</span><br><span class="line">		</span><br><span class="line">	<span class="comment">-- End of loop</span></span><br><span class="line">	UNTIL done <span class="keyword">END</span> REPEAT;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- Close the cursor</span></span><br><span class="line">	<span class="keyword">CLOSE</span> ordernumbers;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">END</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>与前一个例子一样，这个例子使用<code>FETCH</code> 检索当前<code>order_num</code> 到声明的名为<code>o</code> 的变量中。但与前一个例子不一样的是，这个例子中的<code>FETCH</code> 是在<code>REPEAT</code> 内，因此它反复执行直到<code>done</code> 为真（由<code>UNTIL done END REPEAT;</code> 规定）。为使它起作用，用一个<code>DEFAULT 0</code>（假，不结束）定义变量<code>done</code> 。那么，<code>done</code> 被设置为真的条件由以下语句定义：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">SET</span> done<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>这条语句定义了一个<code>CONTINUE HANDLER</code> ，它是在条件出现时被执行的代码。这里，它指出当<code>SQLSTATE &#39;02000&#39;</code> 出现时，<code>SET done=1</code> 。<code>SQLSTATE &#39;02000&#39;</code> 是一个未找到条件，当<code>REPEAT</code> 由于没有更多的行供循环而不能继续时，出现这个条件。</p>
<blockquote>
<p><strong>MySQL的错误代码</strong>     关于MySQL5使用的MySQL错误代码列表，详见<a href="http://dev.mysql.com/doc/mysql/en/error-handling.html">http://dev.mysql.com/doc/mysql/en/error-handling.html</a> 。</p>
</blockquote>
<blockquote>
<p><strong><code>DECLARE</code> 语句的次序</strong>     <code>DECLARE</code> 语句的发布存在特定的次序。用<code>DECLARE</code> 语句定义的<font color="ffa600">局部变量</font>必须在定义任意&lt;font color=”ffa600”游标或句柄之前&gt;定义，而<font color="ffa600">句柄</font>必须在<font color="ffa600">游标之后</font>定义。不遵守此顺序将产生错误消息。</p>
</blockquote>
<p>如果调用这个存储过程，它将定义几个变量和一个<code>CONTINUE HANDLER</code> ，定义并打开一个游标，重复读取所有行，然后关闭游标。</p>
<p>如果一切正常，可以在循环内放入任意需要的处理（在<code>FETCH</code> 语句之后，循环结束之前）。</p>
<blockquote>
<p><strong>重复或循环？</strong>     除这里使用的<code>REPEAT</code> 语句外，MySQL还支持循环语句，它可用来重复执行代码，直到使用<code>LEAVE</code> 语句手动退出为止。通常<code>REPEAT</code> 语句的语法使它更适合于对游标进行循环。</p>
</blockquote>
<p><br><br></p>
<p><strong>例3</strong>：游标存储过程样例的更进一步修改的版本，对取出的数据进行某种实际的处理</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> processorders()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">-- Declare local variables</span></span><br><span class="line">   <span class="keyword">DECLARE</span> done <span class="type">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">DECLARE</span> o <span class="type">INT</span>;</span><br><span class="line">   <span class="keyword">DECLARE</span> t <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">-- Declare the cursor</span></span><br><span class="line">   <span class="keyword">DECLARE</span> ordernumbers <span class="keyword">CURSOR</span></span><br><span class="line">   <span class="keyword">FOR</span></span><br><span class="line">   <span class="keyword">SELECT</span> order_num <span class="keyword">FROM</span> orders;</span><br><span class="line">   <span class="comment">-- Declare continue handler</span></span><br><span class="line">   <span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">SET</span> done<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">-- Create a table to store the results</span></span><br><span class="line">   <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ordertotals</span><br><span class="line">      (order_num <span class="type">INT</span>, total <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">   <span class="comment">-- Open the cursor</span></span><br><span class="line">   <span class="keyword">OPEN</span> ordernumbers;</span><br><span class="line"></span><br><span class="line">   <span class="comment">-- Loop through all rows</span></span><br><span class="line">   REPEAT</span><br><span class="line"></span><br><span class="line">      <span class="comment">-- Get order number</span></span><br><span class="line">      <span class="keyword">FETCH</span> ordernumbers <span class="keyword">INTO</span> o;</span><br><span class="line"></span><br><span class="line">      <span class="comment">-- Get the total for this order</span></span><br><span class="line">      IF <span class="keyword">NOT</span> done <span class="keyword">THEN</span>	<span class="comment">-- 避免重复读取最后一行数据</span></span><br><span class="line">      <span class="keyword">CALL</span> ordertotal(o, <span class="number">1</span>, t);</span><br><span class="line"></span><br><span class="line">      <span class="comment">-- Insert order and total into ordertotals</span></span><br><span class="line">      <span class="keyword">INSERT</span> <span class="keyword">INTO</span> ordertotals(order_num, total)</span><br><span class="line">      <span class="keyword">VALUES</span>(o, t);</span><br><span class="line">      </span><br><span class="line">   <span class="keyword">END</span> IF;</span><br><span class="line">   <span class="comment">-- End of loop</span></span><br><span class="line">   UNTIL done <span class="keyword">END</span> REPEAT;</span><br><span class="line"></span><br><span class="line">   <span class="comment">-- Close the cursor</span></span><br><span class="line">   <span class="keyword">CLOSE</span> ordernumbers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>在这个例子中，我们增加了另一个名为<code>t</code> 的变量（存储每个订单的合计）。此存储过程还在运行中创建了一个新表（如果它不存在的话），名为<code>ordertotals</code> 。这个表将保存存储过程生成的结果。<code>FETCH</code> 像以前一样取每个<code>order_num</code> ，然后用<code>CALL</code> 执行另一个存储过程（我们在前一章中创建）来计算每个订单的带税的合计（结果存储到<code>t</code> ）。最后，用<code>INSERT</code> 保存每个订单的订单号和合计。</p>
<p><br><br></p>
<p><strong>执行该存储过程</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> processorders();</span><br></pre></td></tr></table></figure>

<p>此存储过程不返回数据，但它创建了表 ordertotals，并将结果填充在其中，可以用一条简单的<code>SELECT</code> 语句查看该表：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> ordertotals;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-----------+---------+</span><br><span class="line">| order_num | total   |</span><br><span class="line">+-----------+---------+</span><br><span class="line">|     20005 |  158.86 |</span><br><span class="line">|     20009 |   40.78 |</span><br><span class="line">|     20006 |   58.30 |</span><br><span class="line">|     20007 | 1060.00 |</span><br><span class="line">|     20008 |  132.50 |</span><br><span class="line">|     20008 |  132.50 |</span><br><span class="line">+-----------+---------+</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p>注意：上述的输出结果中最后一行 <code>order_num = 2008</code> 处重复查询了一次</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> processorders()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">-- Declare local variables</span></span><br><span class="line">   <span class="keyword">DECLARE</span> done <span class="type">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">DECLARE</span> o <span class="type">INT</span>;</span><br><span class="line">   <span class="keyword">DECLARE</span> t <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">-- Declare the cursor</span></span><br><span class="line">   <span class="keyword">DECLARE</span> ordernumbers <span class="keyword">CURSOR</span></span><br><span class="line">   <span class="keyword">FOR</span></span><br><span class="line">   <span class="keyword">SELECT</span> order_num <span class="keyword">FROM</span> orders;</span><br><span class="line">   <span class="comment">-- Declare continue handler</span></span><br><span class="line">   <span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">SET</span> done<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">-- Create a table to store the results</span></span><br><span class="line">   <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ordertotals</span><br><span class="line">      (order_num <span class="type">INT</span>, total <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">   <span class="comment">-- Open the cursor</span></span><br><span class="line">   <span class="keyword">OPEN</span> ordernumbers;</span><br><span class="line"></span><br><span class="line">   <span class="comment">-- Loop through all rows</span></span><br><span class="line">   REPEAT</span><br><span class="line"></span><br><span class="line">      <span class="comment">-- Get order number</span></span><br><span class="line">      <span class="keyword">FETCH</span> ordernumbers <span class="keyword">INTO</span> o;</span><br><span class="line"></span><br><span class="line">      <span class="comment">-- Get the total for this order</span></span><br><span class="line">      IF <span class="keyword">NOT</span> done <span class="keyword">THEN</span>	<span class="comment">-- 避免重复读取最后一行数据</span></span><br><span class="line">      <span class="keyword">CALL</span> ordertotal(o, <span class="number">1</span>, t);</span><br><span class="line"></span><br><span class="line">      <span class="comment">-- Insert order and total into ordertotals</span></span><br><span class="line">      <span class="keyword">INSERT</span> <span class="keyword">INTO</span> ordertotals(order_num, total)</span><br><span class="line">      <span class="keyword">VALUES</span>(o, t);</span><br><span class="line">      </span><br><span class="line">   <span class="keyword">END</span> IF;</span><br><span class="line">   <span class="comment">-- End of loop</span></span><br><span class="line">   UNTIL done <span class="keyword">END</span> REPEAT;</span><br><span class="line"></span><br><span class="line">   <span class="comment">-- Close the cursor</span></span><br><span class="line">   <span class="keyword">CLOSE</span> ordernumbers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>



<p>以上，为一个存储过程、游标、逐行处理以及存储过程调用其他存储过程的一个完整的工作样例。</p>
<p><br><br><br><br><br><br><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="25-使用触发器"><a href="#25-使用触发器" class="headerlink" title="25. 使用触发器"></a>25. 使用触发器</h2><p><br><br></p>
<ul>
<li><p><strong>触发器（TRIGGER）</strong>：是MySQL响应<code>INSERT</code>、<code>DELETE</code>、<code>UPDATE</code> 语句而<strong>自动执行的MySQL语句</strong>（或位于<code>BEGIN</code>和<code>END</code> 语句之间的一组语句）。</p>
</li>
<li><p>为什么使用触发器？</p>
<ul>
<li>为了实现在某个表发生更改时的自动处理，如：<ul>
<li>新增记录时提示</li>
<li>删除记录时记录【备份到另一张表】</li>
<li>修改记录时检验【保证数据的一致性（大小写、格式等）】</li>
</ul>
</li>
</ul>
</li>
<li><p>创建触发器时，需给出以下四部分信息</p>
<ul>
<li>唯一的<strong>触发器名</strong>；</li>
<li>触发器<strong>关联的表</strong>；</li>
<li>触发器应该<strong>响应的活动</strong>（<code>DELETE</code> 、<code>INSERT</code> 或<code>UPDATE</code> ）；</li>
<li>触发器<strong>何时执行</strong>（处理之前<code>BEFORE</code>或之后<code>AFTER</code>）。</li>
</ul>
</li>
</ul>
<ul>
<li>触发器的分类</li>
</ul>
<p>INSERT触发器</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> neworder AFTER <span class="keyword">INSERT</span> <span class="keyword">ON</span> orders</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="keyword">SELECT</span> NEW.order_num <span class="keyword">INTO</span> <span class="variable">@new</span>_order_num;	<span class="comment">-- 返回 orders 表新记录的订单号</span></span><br></pre></td></tr></table></figure>

<p>DELETE触发器</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> deleteorder BEFORE <span class="keyword">DELETE</span> <span class="keyword">ON</span> orders</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span>	<span class="comment">-- 将表 orders 将要被删除的行记录到一个存档表 archive_orders 中</span></span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> archive_orders(order_num, order_date, cust_id)</span><br><span class="line">   <span class="keyword">VALUES</span>(OLD.order_num, OLD.order_date, OLD.cust_id);</span><br><span class="line"><span class="keyword">END</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p>UPDATE触发器</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> updatevendor BEFORE UPDATE <span class="keyword">ON</span> vendors</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="keyword">SET</span> NEW.vend_state <span class="operator">=</span> <span class="built_in">Upper</span>(New.vend_state);	<span class="comment">-- 保证UPDATE数据时字段vend_state总是大写</span></span><br></pre></td></tr></table></figure>

<p>删除触发器</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> trigger_name;</span><br></pre></td></tr></table></figure>

<ul>
<li>触发器不能更新或覆盖。为了修改一个触发器，必须先删除它，然后再重新创建。</li>
</ul>
<p><br><br><br><br><br><br></p>
<h3 id="25-1-触发器"><a href="#25-1-触发器" class="headerlink" title="25.1 触发器"></a>25.1 触发器</h3><blockquote>
<p><strong>需要MySQL 5</strong>     对触发器的支持是在MySQL 5中增加的。因此，本章内容适用于MySQL 5或之后的版本。</p>
</blockquote>
<p>问题背景：MySQL语句在需要时被执行，存储过程也是如此。但是，如果你想要某条语句（或某些语句）在事件发生时自动执行，例如：</p>
<ul>
<li>每当增加一个顾客到某个数据库表时，都检查其电话号码格式是否正确，州的缩写是否为大写；</li>
<li>每当订购一个产品时，都从库存数量中减去订购的数量；</li>
<li>无论何时删除一行，都在某个存档表中保留一个副本。</li>
</ul>
<p>这些例子的共同之处是它们都需要在<font color="ffa600"><strong>某个表发生更改时自动处理</strong></font>。这确切地说就是触发器。<strong>触发器是MySQL响应以下任意语句而自动执行的一条MySQL语句</strong>（或位于<code>BEGIN</code>和<code>END</code> 语句之间的一组语句）：</p>
<ul>
<li>DELETE；</li>
<li>INSERT；</li>
<li>UPDATE。</li>
</ul>
<p>其他MySQL语句不支持触发器。</p>
<p><br><br><br><br><br><br></p>
<h3 id="25-2-创建触发器"><a href="#25-2-创建触发器" class="headerlink" title="25.2 创建触发器"></a>25.2 创建触发器</h3><p>在创建触发器时，需给出4条信息：</p>
<ul>
<li>唯一的<strong>触发器名</strong>；</li>
<li>触发器<strong>关联的表</strong>；</li>
<li>触发器应该<strong>响应的活动</strong>（<code>DELETE</code> 、<code>INSERT</code> 或<code>UPDATE</code> ）；</li>
<li>触发器<strong>何时执行</strong>（处理之前<code>BEFORE</code>或之后<code>AFTER</code>）。</li>
</ul>
<blockquote>
<p><strong>保持每个数据库的触发器名唯一</strong>     在MySQL 5中，触发器名必须在每个表中唯一，但不是在每个数据库中唯一。这表示同一数据库中的两个表可具有相同名字的触发器。这在其他每个数据库触发器名必须唯一的DBMS中是不允许的，而且后序的MySQL版本很可能会使命名规则更为严格。因此，最好在数据库范围内使用唯一的触发器名。</p>
</blockquote>
<p>触发器用<code>CREATE TRIGGER</code> 语句创建。举例如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> newproduct AFTER <span class="keyword">INSERT</span> <span class="keyword">ON</span> products</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="keyword">SELECT</span> <span class="string">&#x27;Product added&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p><code>CREATE TRIGGER</code> 用来创建名为<code>newproduct</code> 的新触发器。触发器可在一个操作发生之前或之后执行，这里给出了<code>AFTER INSERT</code> ，所以此触发器将在<code>INSERT</code> 语句成功执行后执行。这个触发器还指定<code>FOR EACH ROW</code> ，因此代码对每个插入行执行。在这个例子中，文本<code>Product added</code> 将对每个插入的行显示一次。</p>
<blockquote>
<p><font color="ffa600"><strong>注意</strong></font>：执行上述触发器定义代码会报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ERROR 1415 (0A000): Not allowed to <span class="built_in">return</span> a result <span class="built_in">set</span> from a trigger</span><br></pre></td></tr></table></figure>

<p><font color="ffa600"><strong>原因</strong></font>：我是用的是MySQL 8.0.25版本，新版本的MySQL不允许触发器返回一个结果集。</p>
<p><font color="ffa600"><strong>解决办法</strong></font>：使用 <code>INTO @var_name</code> ，将结果赋值到变量中。修改定义语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> newproduct AFTER <span class="keyword">INSERT</span> <span class="keyword">ON</span> productsFOR <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="keyword">SELECT</span> <span class="string">&#x27;Product added&#x27;</span> <span class="keyword">INTO</span> <span class="variable">@temp</span>_var;  <span class="comment">-- 结果要存入变量</span></span><br></pre></td></tr></table></figure>

<p>修改后可成功执行。</p>
</blockquote>
<p><strong>测试触发器</strong></p>
<p>使用<code>INSERT</code> 语句添加一行或多行到<code>products</code> 中，将看到对每个成功的插入，显示<code>Product added</code> 消息。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> products</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;Test001&#x27;</span>, <span class="number">1001</span>, <span class="string">&#x27;Anthony 2000&#x27;</span>, <span class="number">100</span>, <span class="string">&#x27;Anthony 2000&#x27;</span>);	<span class="comment">-- 插入一条语句</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@temp</span>_var;	<span class="comment">-- 查询结果</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------------+</span><br><span class="line">| @temp_var     |</span><br><span class="line">+---------------+</span><br><span class="line">| Product added |</span><br><span class="line">+---------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)	<span class="comment"># 控制台输出查询结果</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p> <strong>仅支持表</strong>     只有表才支持触发器，视图不支持（临时表也不支持）。</p>
</blockquote>
<p>触发器按每个表每个事件每次地定义，每个表每个事件每次只允许一个触发器。因此，每个表最多支持6个触发器（每条<code>INSERT</code> 、<code>UPDATE</code> 和<code>DELETE</code> 的之前和之后）。单一触发器不能与多个事件或多个表关联，所以，如果你需要一个对<code>INSERT</code> 和<code>UPDATE</code> 操作执行的触发器，则应该定义两个触发器。</p>
<blockquote>
<p><strong>触发器失败</strong>     如果<code>BEFORE</code> 触发器失败，则MySQL将不执行请求的操作。此外，如果<code>BEFORE</code> 触发器或语句本身失败，MySQL将不执行<code>AFTER</code> 触发器（如果有的话）。</p>
</blockquote>
<p><br><br><br><br><br><br></p>
<h3 id="25-3-删除触发器"><a href="#25-3-删除触发器" class="headerlink" title="25.3 删除触发器"></a>25.3 删除触发器</h3><p>删除一个触发器，可使用<code>DROP TRIGGER</code> 语句:</p>
<p><strong>输入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TRIGGER newproduct;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><font color="ffa600"><strong>注意</strong></font>：    触发器不能更新或覆盖。为了修改一个触发器，必须先删除它，然后再重新创建。</p>
</blockquote>
<p><br><br><br><br><br><br></p>
<h3 id="25-4-使用触发器"><a href="#25-4-使用触发器" class="headerlink" title="25.4 使用触发器"></a>25.4 使用触发器</h3><p>涉及各种触发器类型及相关差异。</p>
<p><br><br><br></p>
<h4 id="25-4-1-INSERT触发器"><a href="#25-4-1-INSERT触发器" class="headerlink" title="25.4.1 INSERT触发器"></a>25.4.1 INSERT触发器</h4><p><code>NSERT</code> 触发器在<code>INSERT</code> 语句执行之前或之后执行。</p>
<ul>
<li>在<code>INSERT</code> 触发器代码内，可引用一个名为<code>NEW</code> 的虚拟表，访问被插入的行；</li>
<li>在<code>BEFORE INSERT</code> 触发器中，<code>NEW</code> 中的值也可以被更新（允许更改被插入的值）；</li>
<li>对于<code>AUTO_INCREMENT</code> 列，<code>NEW</code> 在<code>INSERT</code> 执行之前包含<code>0</code> ，在<code>INSERT</code> 执行之后包含新的自动生成值。</li>
</ul>
<p><strong>例</strong>：创建一个触发器，返回 orders 表新记录的订单号</p>
<p><strong>创建触发器</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> neworder AFTER <span class="keyword">INSERT</span> <span class="keyword">ON</span> orders</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="keyword">SELECT</span> NEW.order_num <span class="keyword">INTO</span> <span class="variable">@new</span>_order_num;	<span class="comment">-- 返回 orders 表新记录的订单号</span></span><br></pre></td></tr></table></figure>

<p><strong>测试触发器</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders(order_num, order_date, cust_id)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">20010</span>, Now(), <span class="number">10001</span>);	<span class="comment">-- 插入一条记录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@new</span>_order_num;	<span class="comment">-- 查看触发器结果</span></span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----------------+</span><br><span class="line">| @new_order_num |</span><br><span class="line">+----------------+</span><br><span class="line">|          20010 |</span><br><span class="line">+----------------+</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p><code>orders</code> 包含3个列。<code>order_date</code> 和<code>cust_id</code> 必须显示地给出，<code>order_num</code> 由MySQL自动生成，<code>order_num</code> 自动被返回，存入变量<code>new_order_num</code>。</p>
<blockquote>
<p>**选择<code>BEFORE</code> 还是<code>AFTER</code> **     通常，将<code>BEFORE</code> 用于<font color="ffa600">数据验证和净化</font>（目的是保证插入表中的数据确实是需要的数据）。本提示也适用于<code>UPDATE</code> 触发器。</p>
</blockquote>
<p><br><br><br></p>
<h4 id="25-4-2-DELETE触发器"><a href="#25-4-2-DELETE触发器" class="headerlink" title="25.4.2 DELETE触发器"></a>25.4.2 DELETE触发器</h4><p><code>DELETE</code> 触发器在<code>DELETE</code> 语句执行之前或之后执行。</p>
<ul>
<li>在<code>DELETE</code> 触发器代码内，你可以引用一个名为<code>OLD</code> 的虚拟表，访问被删除的行；</li>
<li><code>OLD</code> 中的值全都是只读的，不能更新。</li>
</ul>
<p><br><br></p>
<p><strong>例</strong>：使用<code>OLD</code> 将表 orders 将要被删除的行记录到一个存档表 archive_orders 中</p>
<blockquote>
<p>需先创建一个与orders表结构相同的表 archive_orders</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#####################</span><br><span class="line"># <span class="keyword">Create</span> archive_orders <span class="keyword">table</span></span><br><span class="line">#####################</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> archive_orders</span><br><span class="line">(</span><br><span class="line">order_num  <span class="type">int</span>      <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">order_date datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">cust_id    <span class="type">int</span>      <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (order_num)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure>


</blockquote>
<p><strong>创建触发器</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> deleteorder BEFORE <span class="keyword">DELETE</span> <span class="keyword">ON</span> orders</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span>	<span class="comment">-- 将表 orders 将要被删除的行记录到一个存档表 archive_orders 中</span></span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> archive_orders(order_num, order_date, cust_id)</span><br><span class="line">   <span class="keyword">VALUES</span>(OLD.order_num, OLD.order_date, OLD.cust_id);</span><br><span class="line"><span class="keyword">END</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p><strong>测试触发器</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20010</span>;	<span class="comment">-- 删除一条记录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> archive_orders;	<span class="comment">-- 从 archive_orders 表中查看触发器记录</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">+-----------+---------------------+---------+</span><br><span class="line">| order_num | order_date          | cust_id |</span><br><span class="line">+-----------+---------------------+---------+</span><br><span class="line">|     20010 | 2021-09-26 08:43:25 |   10001 |</span><br><span class="line">+-----------+---------------------+---------+</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>在任意订单被删除前将执行此触发器。它使用一条<code>INSERT</code> 语句将<code>OLD</code> 中的值（要被删除的订单）保存到一个名为<code>archive_orders</code> 的存档表中（为实际使用这个例子，你需要用与<code>orders</code> 相同的列创建一个名为<code>archive_orders</code> 的表）。</p>
<ul>
<li>使用<code>BEFORE DELETE</code> 触发器的<strong>优点</strong>（相对于<code>AFTER DELETE</code> 触发器来说）为：如果由于某种原因，订单不能存档，<code>DELETE</code> 本身将被放弃【如档案表 archive_orders 被删除，则此时无法删除表 orders 中的记录】。</li>
</ul>
<blockquote>
<p><strong>多语句触发器</strong>     触发器<code>deleteorder</code> 使用<code>BEGIN</code> 和<code>END</code> 语句标记触发器体。这在此例子中并不是必需的，不过也没有害处。使用<code>BEGIN END</code> 块的好处是触发器能容纳多条SQL语句（在<code>BEGIN END</code> 块中一条挨着一条）。</p>
</blockquote>
<p><br><br><br></p>
<h4 id="25-4-3-UPDATE触发器"><a href="#25-4-3-UPDATE触发器" class="headerlink" title="25.4.3 UPDATE触发器"></a>25.4.3 UPDATE触发器</h4><p><code>UPDATE</code> 触发器在<code>UPDATE</code> 语句执行之前或之后执行。</p>
<ul>
<li>在<code>UPDATE</code> 触发器代码中，你可以引用一个名为<code>OLD</code> 的虚拟表访问以前（<code>UPDATE</code> 语句前）的值，引用一个名为<code>NEW</code> 的虚拟表访问新更新的值；</li>
<li>在<code>BEFORE UPDATE</code> 触发器中，<code>NEW</code> 中的值可能也被更新（允许更改将要用于<code>UPDATE</code>语句中的值）；</li>
<li><code>OLD</code> 中的值全都是只读的，不能更新。</li>
</ul>
<br>

<p>例：创建UPDATE触发器保证州名缩写总是大写。</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> updatevendor BEFORE UPDATE <span class="keyword">ON</span> vendors</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="keyword">SET</span> NEW.vend_state <span class="operator">=</span> <span class="built_in">Upper</span>(New.vend_state);	<span class="comment">-- 保证UPDATE数据时字段vend_state总是大写</span></span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>显然，任何数据净化都需要在<code>UPDATE</code> 语句之前进行，如上所示。每次更新一个行时，<code>NEW.vend_state</code> 中的值（将用来更新表行的值）都用<code>Upper(NEW.vend_state)</code> 替换。</p>
<p><strong>测试UPDATE触发器</strong></p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE vendors</span><br><span class="line"><span class="keyword">SET</span> vend_state <span class="operator">=</span> <span class="string">&#x27;ab&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="number">1007</span>;	<span class="comment">-- 修改id为1007的记录州信息为小写ab</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> vendors <span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="number">1007</span>;	<span class="comment">-- 查看修改的结果</span></span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意：vend_state字段自动更正为大写AB</span></span><br><span class="line">+---------+---------------+--------------+-----------+------------+----------+--------------+</span><br><span class="line">| vend_id | vend_name     | vend_address | vend_city | vend_state | vend_zip | vend_country |</span><br><span class="line">+---------+---------------+--------------+-----------+------------+----------+--------------+</span><br><span class="line">|    1007 | New Vendor 01 | Address01    | City01    | AB         | 00000    | Chinese      |</span><br><span class="line">+---------+---------------+--------------+-----------+------------+----------+--------------+</span><br></pre></td></tr></table></figure>

<p><br><br><br></p>
<h4 id="25-4-4-关于触发器的进一步介绍"><a href="#25-4-4-关于触发器的进一步介绍" class="headerlink" title="25.4.4 关于触发器的进一步介绍"></a>25.4.4 关于触发器的进一步介绍</h4><p><strong>使用触发器</strong>时需牢记的<font color="ff0000"><strong>重点</strong></font>：</p>
<ul>
<li>与其他DBMS相比，MySQL5中支持的触发器相当初级。未来的MySQL版本中有一些改进和增强触发器支持的计划。</li>
<li><font color="ffa600">创建触发器</font>可能<font color="ffa600">需要特殊的安全访问权限</font>，但是，<font color="ffa600"><strong>触发器的执行</strong>是<strong>自动的</strong></font>。如果<code>INSERT</code> 、<code>UPDATE</code> 或<code>DELETE</code> 语句能够执行，则相关的触发器也能执行。</li>
<li><font color="ffa600"><strong>应该用触发器来保证数据的一致性（大小写、格式等）</strong></font>。在触发器中执行这种类型的处理的优点是它总是进行这种处理，而且是<font color="ffa600">透明地进行，与客户机应用无关</font>。</li>
<li>触发器的一种非常有意义的使用是<font color="ffa600"><strong>创建审计跟踪</strong></font>。使用触发器，<font color="ffa600"><strong>把做出更改的内容</strong>（如果需要，甚至还有之前和之后的状态）<strong>记录到另一个表</strong>非常容易。</font></li>
<li>遗憾的是，MySQL触发器中不支持<code>CALL</code> 语句。这表示<strong>不能从触发器内调用存储过程</strong>。所需的<font color="ffa600">存储过程代码需要复制到触发器内</font>。</li>
</ul>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="26-管理事务处理"><a href="#26-管理事务处理" class="headerlink" title="26. 管理事务处理"></a>26. 管理事务处理</h2><br>

<ul>
<li><strong>事务处理（transactionprocessing）</strong>：可以用来维护数据库的完整性，它保证成批的MySQL操作要么完全执行，要么完全不执行。</li>
</ul>
<p>控制事务处理：</p>
<p>事务启动</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;	<span class="comment">-- 开启事务</span></span><br></pre></td></tr></table></figure>

<p>回退（撤销）到事务启动前的状态</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;	<span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> ordertotals;	<span class="comment">-- 删除表所有行</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;		<span class="comment">-- 回退</span></span><br></pre></td></tr></table></figure>

<p>部分提交（部分回退）：使用保留点</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SAVEPOINT</span> delete1;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> delete1;</span><br></pre></td></tr></table></figure>

<p>更改默认的提交行为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> autocommit<span class="operator">=</span><span class="number">0</span>;	<span class="comment">-- 设置为默认不提交</span></span><br><span class="line"><span class="keyword">SET</span> autocommit<span class="operator">=</span><span class="number">1</span>;	<span class="comment">-- 设置为默认提交</span></span><br></pre></td></tr></table></figure>

<ul>
<li><font color="ff0000">注意</font>：<code>autocommit</code> 标志是针对每个<font color="ffa600">连接</font>而不是服务器的。</li>
</ul>
<p><br><br><br><br><br><br></p>
<h3 id="26-1-事务处理"><a href="#26-1-事务处理" class="headerlink" title="26.1 事务处理"></a>26.1 事务处理</h3><blockquote>
<p><strong>并非所有引擎都支持事务处理</strong>     MySQL支持几种基本的数据库引擎。<code>MyISAM</code> 和<code>InnoDB</code> 是两种最常使用的引擎。前者不支持明确的事务处理管理，而后者支持。如果你的应用中需要事务处理功能，则一定要使用正确的引擎类型。</p>
</blockquote>
<p><strong>事务处理（transactionprocessing）</strong>：可以用来维护数据库的完整性，它保证成批的MySQL操作要么完全执行，要么完全不执行。</p>
<p>事务处理是一种机制，用来管理必须成批执行的MySQL操作，以保证数据库不包含不完整的操作结果。利用事务处理，可以保证一组操作不会中途停止，它们或者作为整体执行，或者完全不执行（除非明确指示）。如果没有错误发生，整组语句提交给（写到）数据库表。如果发生错误，则进行回退（撤销）以恢复数据库到某个已知且安全的状态。</p>
<p>例：对比<strong>给系统添加订单</strong>流程无事务和有事务的系列操作。</p>
<ul>
<li>无事务 <ol>
<li>检查数据库中是否存在相应的客户（从<code>customers</code> 表查询），如果不存在，添加他/她。</li>
<li>检索客户的ID。</li>
<li>添加一行到<code>orders</code> 表，把它与客户ID关联。</li>
<li>检索<code>orders</code> 表中赋予的新订单ID。</li>
<li>对于订购的每个物品在<code>orderitems</code> 表中添加一行，通过检索出来的ID把它与<code>orders</code>表关联（以及通过产品ID与<code>products</code> 表关联）。</li>
</ol>
</li>
<li>使用事务<ol>
<li>检查数据库<code>customers</code>表中是否存在相应的客户，如果不存在，添加他/她。</li>
<li>提交客户信息。</li>
<li>检索客户的ID。</li>
<li>添加一行到<code>orders</code> 表。</li>
<li>如果在添加行到<code>orders</code> 表时出现故障，回退。</li>
<li>检索<code>orders</code> 表中赋予的新订单ID。</li>
<li>对于订购的每项物品，添加新行到<code>orderitems</code> 表。</li>
<li>如果在添加新行到<code>orderitems</code> 时出现故障，回退所有添加的<code>orderitems</code> 行和<code>orders</code> 行。</li>
<li>提交订单信息。</li>
</ol>
</li>
</ul>
<p>事务的几个关键术语：</p>
<ul>
<li><strong>事务（transaction）</strong> ：指一组SQL语句；</li>
<li><strong>回退（rollback）</strong> ：指撤销指定SQL语句的过程；</li>
<li><strong>提交（commit）</strong> ：指将未存储的SQL语句结果写入数据库表；</li>
<li><strong>保留点（savepoint）</strong> 指事务处理中设置的临时占位符（place-holder），你可以对它发布回退（与回退整个事务处理不同）。</li>
</ul>
<p><br><br><br><br><br><br></p>
<h3 id="26-2-控制事务处理"><a href="#26-2-控制事务处理" class="headerlink" title="26.2 控制事务处理"></a>26.2 控制事务处理</h3><p><font color="ffa600"><strong>管理事务处理的关键</strong>在于<strong>将SQL语句组分解为逻辑块，并明确规定数据何时应该回退，何时不应该回退。</strong></font></p>
<p>MySQL标识事务的开始：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;	<span class="comment">-- 开启事务</span></span><br></pre></td></tr></table></figure>

<p><br><br><br></p>
<h4 id="26-2-1-使用ROLLBACK"><a href="#26-2-1-使用ROLLBACK" class="headerlink" title="26.2.1 使用ROLLBACK"></a>26.2.1 使用ROLLBACK</h4><p>例：使用<code>ROLLBACK</code> 命令回退（撤销）MySQL语句</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> ordertotals;	</span><br><span class="line"><span class="keyword">START</span> TRANSACTION;	<span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> ordertotals;	<span class="comment">-- 删除表所有行</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> ordertotals;	<span class="comment">-- 查看删除结果</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;		<span class="comment">-- 回退</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> ordertotals;	<span class="comment">-- 重新查看结果</span></span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>这个例子从显示<code>ordertotals</code> 表（此表在第24节中填充）的内容开始。首先执行一条<code>SELECT</code> 以显示该表不为空。然后开始一个事务处理，用一条<code>DELETE</code> 语句删除<code>ordertotals</code> 中的所有行。另一条<code>SELECT</code> 语句验证<code>ordertotals</code> 确实为空。这时用一条<code>ROLLBACK</code> 语句回退<code>START TRANSACTION</code> 之后的所有语句，最后一条<code>SELECT</code> 语句显示该表不为空。</p>
<p>显然，<code>ROLLBACK</code> 只能在一个事务处理内使用（在执行一条<code>START TRANSACTION</code> 命令之后）。</p>
<blockquote>
<p><strong>哪些语句可以回退？</strong>     事务处理用来管理<code>INSERT</code> 、<code>UPDATE</code> 和<code>DELETE</code> 语句。</p>
<p>不能回退<code>SELECT</code> 语句。（这样做也没有什么意义。）不能回退<code>CREATE</code> 或<code>DROP</code> 操作。事务处理块中可以使用这两条语句，但如果你执行回退，它们不会被撤销。</p>
</blockquote>
<p><br><br><br></p>
<h4 id="26-2-2-使用COMMIT"><a href="#26-2-2-使用COMMIT" class="headerlink" title="26.2.2 使用COMMIT"></a>26.2.2 使用COMMIT</h4><p>一般的MySQL语句都是直接针对数据库表执行和编写的。这就是所谓的<strong>隐含提交（implicitcommit）</strong>，即提交（写或保存）操作是自动进行的。</p>
<p>但是，在事务处理块中，需进行明确的提交，使用<code>COMMIT</code> 语句，如下所示：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> orderitems <span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20010</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20010</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>在这个例子中，从系统中完全删除订单<code>20010</code> 。因为涉及更新两个数据库表<code>orders</code> 和<code>orderItems</code> ，所以使用事务处理块来保证订单不被部分删除。最后的<code>COMMIT</code> 语句仅在不出错时写出更改。如果第一条<code>DELETE</code> 起作用，但第二条失败，则<code>DELETE</code> 不会提交（实际上，它是被自动撤销的）。</p>
<blockquote>
<p><strong>隐含事务关闭</strong>     当<code>COMMIT</code> 或<code>ROLLBACK</code> 语句执行后，事务会<strong>自动关闭</strong>（将来的更改会隐式地自动提交）。</p>
</blockquote>
<p><br><br><br></p>
<h4 id="26-2-3-使用保留点"><a href="#26-2-3-使用保留点" class="headerlink" title="26.2.3 使用保留点"></a>26.2.3 使用保留点</h4><p>简单的<code>ROLLBACK</code> 和<code>COMMIT</code> 语句就可以写入或撤销整个事务处理。但是，<strong>更复杂的</strong>事务处理可能需要<font color="ffa600"><strong>部分提交</strong></font>或<font color="ffa600"><strong>回退</strong></font>。</p>
<p>例如，前面描述的添加订单的过程为一个事务处理。如果发生错误，只需要返回到添加<code>orders</code> 行之前即可，不需要回退到<code>customers</code> 表（如果存在的话）。</p>
<p>为了支持回退部分事务处理，必须能在事务处理块中合适的位置放置占位符。这样，如果需要回退，可以回退到某个占位符。</p>
<p>这些占位符称为<font color="ffa600"><strong>保留点</strong></font>。为了创建占位符，可如下使用<code>SAVEPOINT</code> 语句：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SAVEPOINT</span> delete1;</span><br></pre></td></tr></table></figure>

<p>每个保留点都取标识它的唯一名字，以便在回退时，MySQL知道要回退到何处。为了回退到本例给出的保留点，可如下进行：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> delete1;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>保留点越多越好</strong>     可以在MySQL代码中设置任意多的保留点，越多越好。保留点越多，就越能按自己的意愿灵活地进行回退。</p>
</blockquote>
<blockquote>
<p><strong>释放保留点</strong>     保留点在事务处理完成（执行一条<code>ROLLBACK</code> 或<code>COMMIT</code> ）后自动释放。自MySQL 5以来，也可以用<code>RELEASE SAVEPOINT</code> 明确地释放保留点。</p>
</blockquote>
<p><br><br><br></p>
<h4 id="26-2-4-更改默认的提交行为"><a href="#26-2-4-更改默认的提交行为" class="headerlink" title="26.2.4 更改默认的提交行为"></a>26.2.4 更改默认的提交行为</h4><p><strong>默认</strong>的MySQL行为是<strong>自动提交所有更改</strong>。换句话说，任何时候执行一条MySQL语句，该语句实际上都是针对表执行的，而且所做的更改立即生效。为指示MySQL不自动提交更改，需要使用以下语句：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> autocommit<span class="operator">=</span><span class="number">0</span>;	<span class="comment">-- 设置为默认不提交</span></span><br><span class="line"><span class="keyword">SET</span> autocommit<span class="operator">=</span><span class="number">1</span>;	<span class="comment">-- 设置为默认提交</span></span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p><code>autocommit</code> 标志决定是否自动提交更改，不管有没有<code>COMMIT</code> 语句。设置<code>autocommit</code> 为<code>0</code> （假）指示MySQL不自动提交更改（直到<code>autocommit</code> 被设置为真为止）。</p>
<blockquote>
<p><strong>标志为连接专用</strong>     <code>autocommit</code> 标志是针对每个<font color="ffa600">连接</font>而不是服务器的。</p>
</blockquote>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="27-全球化和本地化"><a href="#27-全球化和本地化" class="headerlink" title="27. 全球化和本地化"></a>27. 全球化和本地化</h2><ul>
<li><p>涉及MySQL处理不同字符集和语言的基础知识。</p>
</li>
<li><p>查看字符集和校对</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span>;		<span class="comment">-- 查看MySQL所支持的字符集完整列表</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;character%&#x27;</span>;	<span class="comment">-- 确定默认的字符集</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">COLLATION</span>;		<span class="comment">-- 查看MySQL所支持校对的完整列表</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;collation%&#x27;</span>;	<span class="comment">-- 确定默认的校对</span></span><br></pre></td></tr></table></figure>

<ul>
<li>指定字符集和校对</li>
</ul>
<p>建表时为表指定字符集和校对</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line">(</span><br><span class="line">   columnn1   <span class="type">INT</span>,</span><br><span class="line">   columnn2   <span class="type">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line">) <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> hebrew</span><br><span class="line">  <span class="keyword">COLLATE</span> hebrew_general_ci;</span><br></pre></td></tr></table></figure>

<p>建表时单独对某个列设置字符集和校对</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line">(</span><br><span class="line">   columnn1   <span class="type">INT</span>,</span><br><span class="line">   columnn2   <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">   column3    <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> latin1 <span class="keyword">COLLATE</span> latin1_general_ci</span><br><span class="line">) <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> hebrew</span><br><span class="line">  <span class="keyword">COLLATE</span> hebrew_general_ci;</span><br></pre></td></tr></table></figure>

<p>在SELECT语句中的ORDER BY子句指定校对</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> lastname, firstname <span class="keyword">COLLATE</span> latin1_general_cs;	<span class="comment">-- 指定校对为区分大小写</span></span><br></pre></td></tr></table></figure>



<p><br><br><br><br><br><br></p>
<h3 id="27-1-字符集和校对顺序"><a href="#27-1-字符集和校对顺序" class="headerlink" title="27.1 字符集和校对顺序"></a>27.1 字符集和校对顺序</h3><p>数据库表被用来存储和检索数据。不同的语言和字符集需要以不同的方式存储和检索。因此，MySQL需要适应不同的字符集（不同的字母和字符），适应不同的排序和检索数据的方法。</p>
<p>语言和字符集的相关重要术语：</p>
<ul>
<li><strong>字符集</strong>（<code>CHARACTER SET</code>）：为字母和符号的集合；</li>
<li><strong>编码</strong>：为某个字符集成员的内部表示；</li>
<li><strong>校对</strong>（<code>COLLATE</code>）：为规定字符如何比较的指令。</li>
</ul>
<blockquote>
<p><strong>校对为什么重要</strong>     排序英文正文很容易，对吗？或许不。考虑词APE、apex和Apple。它们处于正确的排序顺序吗？这有赖于你是否想区分大小写。使用区分大小写的校对顺序，这些词有一种排序方式，使用不区分大小写的校对顺序有另外一种排序方式。这不仅影响排序（如用<code>ORDER BY</code> 排序数据），还影响搜索（例如，寻找apple的<code>WHERE</code> 子句是否能找到APPLE）。在使用诸如法文à或德文ö这样的字符时，情况更复杂，在使用不基于拉丁文的字符集（日文、希伯来文、俄文等）时，情况更为复杂。</p>
</blockquote>
<p>在MySQL的正常数据库活动（<code>SELECT</code> 、<code>INSERT</code> 等）中，不需要考虑太多。使用何种字符集和校对的决定在服务器、数据库和表级进行。</p>
<p><br><br><br><br><br><br></p>
<h3 id="27-2-使用字符集和校对顺序"><a href="#27-2-使用字符集和校对顺序" class="headerlink" title="27.2 使用字符集和校对顺序"></a>27.2 使用字符集和校对顺序</h3><p>查看MySQL所支持的字符集完整列表，使用以下语句：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span>;		<span class="comment">-- 查看MySQL所支持的字符集完整列表</span></span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>这条语句显示所有可用的字符集以及每个字符集的描述和默认校对。</p>
<br>

<p>查看所支持校对的完整列表，使用以下语句：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">COLLATION</span>;		<span class="comment">-- 查看MySQL所支持校对的完整列表</span></span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>此语句显示所有可用的校对，以及它们适用的字符集。可以看到有的字符集具有不止一种校对。例如，<code>latin1</code> 对不同的欧洲语言有几种校对，而且许多校对出现两次，一次<font color="ffa600">区分大小写</font>（由<code>_cs</code> 表示），一次不区分大小写（由<code>_ci</code> 表示）。</p>
<p>通常系统管理在安装时定义一个默认的字符集和校对。此外，也可以在创建数据库时，指定默认的字符集和校对。为了确定所用的字符集和校对，可以使用以下语句：<strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;character%&#x27;</span>;	<span class="comment">-- 确定默认的字符集</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;collation%&#x27;</span>;	<span class="comment">-- 确定默认的校对</span></span><br></pre></td></tr></table></figure>

<p>实际上，<strong>字符集很少是服务器范围（甚至数据库范围）的设置</strong>。<strong>不同的表，甚至不同的列都可能需要不同的字符集，而且两者都可以在创建表时指定。</strong></p>
<br>

<h4 id="给表指定字符集和校对"><a href="#给表指定字符集和校对" class="headerlink" title="给表指定字符集和校对"></a>给表指定字符集和校对</h4><p>可使用带子句的<code>CREATE TABLE</code> （参见第21章）：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line">(</span><br><span class="line">   columnn1   <span class="type">INT</span>,</span><br><span class="line">   columnn2   <span class="type">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line">) <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> hebrew</span><br><span class="line">  <span class="keyword">COLLATE</span> hebrew_general_ci;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>此语句创建一个包含两列的表，并且指定一个字符集和一个校对顺序。</p>
<p>该例子中指定了<code>CHARACTER SET</code> 和<code>COLLATE</code> 两者。一般，MySQL如下确定使用什么样的字符集和校对。</p>
<ul>
<li>如果指定<code>CHARACTER SET</code> 和<code>COLLATE</code> 两者，则使用这些值。</li>
<li>如果只指定<code>CHARACTER SET</code> ，则使用此字符集及其默认的校对（如<code>SHOW CHARACTER SET</code> 的结果中所示）。</li>
<li>如果既不指定<code>CHARACTER SET</code> ，也不指定<code>COLLATE</code> ，则使用数据库默认。</li>
</ul>
<br>

<h4 id="单独对某个列设置字符集和校对"><a href="#单独对某个列设置字符集和校对" class="headerlink" title="单独对某个列设置字符集和校对"></a>单独对某个列设置字符集和校对</h4><p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line">(</span><br><span class="line">   columnn1   <span class="type">INT</span>,</span><br><span class="line">   columnn2   <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">   column3    <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> latin1 <span class="keyword">COLLATE</span> latin1_general_ci</span><br><span class="line">) <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> hebrew</span><br><span class="line">  <span class="keyword">COLLATE</span> hebrew_general_ci;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>这里对整个表以及一个特定的列指定了<code>CHARACTER SET</code> 和<code>COLLATE</code> 。</p>
<br>

<h4 id="在SELECT语句中的ORDER-BY子句指定校对"><a href="#在SELECT语句中的ORDER-BY子句指定校对" class="headerlink" title="在SELECT语句中的ORDER BY子句指定校对"></a>在SELECT语句中的ORDER BY子句指定校对</h4><p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> lastname, firstname <span class="keyword">COLLATE</span> latin1_general_cs;	<span class="comment">-- 指定校对为区分大小写</span></span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>此<code>SELECT</code> 使用<code>COLLATE</code> 指定一个备用的校对顺序（在这个例子中，为<font color="ffa600">区分大小写</font>的校对）。这显然将会影响到结果排序的次序。</p>
<blockquote>
<p><strong>临时区分大小写</strong>     上面的<code>SELECT</code> 语句演示了在通常不区分大小写的表上进行区分大小写搜索的一种技术。当然，反过来也是可以的（使用<code>COLLATE latin1_general_ci</code>）。</p>
</blockquote>
<blockquote>
<p><strong><code>SELECT</code> 的其他<code>COLLATE</code> 子句</strong>     除了这里看到的在<code>ORDER BY</code> 子句中使用以外，<code>COLLATE</code> 还可以用于<code>GROUP BY</code> 、<code>HAVING</code> 、聚集函数、别名等。</p>
</blockquote>
<blockquote>
<p><strong>串的字符集转换</strong>    如果绝对需要，串可以在字符集之间进行转换。为此，使用<code>Cast()</code>或<code>Convert()</code> 函数。</p>
</blockquote>
<p><br><br><br><br><br><br></p>
<h3 id="27-3-小结"><a href="#27-3-小结" class="headerlink" title="27.3 小结"></a>27.3 小结</h3><p>查看字符集和校对</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span>;		<span class="comment">-- 查看MySQL所支持的字符集完整列表</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;character%&#x27;</span>;	<span class="comment">-- 确定默认的字符集</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">COLLATION</span>;		<span class="comment">-- 查看MySQL所支持校对的完整列表</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;collation%&#x27;</span>;	<span class="comment">-- 确定默认的校对</span></span><br></pre></td></tr></table></figure>

<p>指定字符集和校对</p>
<p>建表时为表指定字符集和校对</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line">(</span><br><span class="line">   columnn1   <span class="type">INT</span>,</span><br><span class="line">   columnn2   <span class="type">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line">) <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> hebrew</span><br><span class="line">  <span class="keyword">COLLATE</span> hebrew_general_ci;</span><br></pre></td></tr></table></figure>

<p>建表时单独对某个列设置字符集和校对</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line">(</span><br><span class="line">   columnn1   <span class="type">INT</span>,</span><br><span class="line">   columnn2   <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">   column3    <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> latin1 <span class="keyword">COLLATE</span> latin1_general_ci</span><br><span class="line">) <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> hebrew</span><br><span class="line">  <span class="keyword">COLLATE</span> hebrew_general_ci;</span><br></pre></td></tr></table></figure>

<p>在SELECT语句中的ORDER BY子句指定校对</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> lastname, firstname <span class="keyword">COLLATE</span> latin1_general_cs;	<span class="comment">-- 指定校对为区分大小写</span></span><br></pre></td></tr></table></figure>

<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="28-安全管理"><a href="#28-安全管理" class="headerlink" title="28. 安全管理"></a>28. 安全管理</h2><p>数据库服务器通常包含关键的数据，确保这些数据的安全和完整需要利用访问控制。本节涉及MySQL的访问控制和用户管理。</p>
<p>访问控制：给用户提供且仅提供需要的访问权限</p>
<p>应该严肃对待<code>root</code> 登录的使用。<font color="ffa600">仅在绝对需要时使用它</font>（或许在你不能登录其他管理账号时使用）。不应该在日常的MySQL操作中使用<code>root</code> 。</p>
<br>

<p>管理用户</p>
<ul>
<li>创建用户账号</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;ben&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;111&#x27;</span>;	<span class="comment">-- 例</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;ben&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123&#x27;</span>;	<span class="comment">-- 例</span></span><br></pre></td></tr></table></figure>

<ul>
<li>重命名用户账号</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">RENAME <span class="keyword">USER</span> <span class="string">&#x27;ben&#x27;</span> <span class="keyword">TO</span> <span class="string">&#x27;bfortaplus&#x27;</span>;</span><br><span class="line">RENAME <span class="keyword">USER</span> <span class="string">&#x27;ben&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">TO</span> <span class="string">&#x27;bforta&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>删除用户账号</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;bfortaplus&#x27;</span>;	<span class="comment">-- 例</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;bforta&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;	<span class="comment">-- 例</span></span><br></pre></td></tr></table></figure>

<br>

<p>设置访问权限</p>
<ul>
<li>查询用户权限</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> ben@<span class="string">&#x27;localhost&#x27;</span>;	<span class="comment">-- accessible</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> ben<span class="variable">@localhost</span>;	<span class="comment">-- accessible</span></span><br></pre></td></tr></table></figure>

<ul>
<li>设置用户权限</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 授予权限</span></span><br><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">TO</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"><span class="comment">-- 允许用户在crashcourse.* （crashcourse 数据库的所有表）上使用SELECT。即授予只读访问权限。</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> crashcourse.<span class="operator">*</span> <span class="keyword">TO</span> ben<span class="variable">@localhost</span>;</span><br><span class="line"><span class="comment">-- 给主机的ben用户授予SELECT,和INSERT权限，在crashcourse数据库任意表上</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span> <span class="keyword">ON</span> crashcourse.<span class="operator">*</span> <span class="keyword">TO</span> ben<span class="variable">@localhost</span>;</span><br><span class="line"><span class="comment">-- 给主机的ben用户授予所有权限，在任意数据库任意表上</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;ben&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 移除权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">FROM</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"><span class="comment">-- 移除用户在crashcourse.* （crashcourse 数据库的所有表）上使用SELECT的权限。即移除只读访问权限。</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> crashcourse.<span class="operator">*</span> <span class="keyword">FROM</span> ben<span class="variable">@localhost</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改密码</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;新密码&#x27;</span>;	<span class="comment">-- 8.0.25版本可执行语法</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> ben<span class="variable">@localhost</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;	<span class="comment">-- 样例</span></span><br><span class="line"></span><br><span class="line">UPDATE <span class="keyword">USER</span> <span class="keyword">SET</span> PASSWORD <span class="operator">=</span> PASSWORD(<span class="string">&#x27;新密码&#x27;</span>) <span class="keyword">WHERE</span> <span class="keyword">USER</span> <span class="operator">=</span> <span class="string">&#x27;用户名&#x27;</span>;</span><br><span class="line">UPDATE <span class="keyword">USER</span> <span class="keyword">SET</span> PASSWORD <span class="operator">=</span> PASSWORD(<span class="string">&#x27;abc&#x27;</span>) <span class="keyword">WHERE</span> <span class="keyword">USER</span> <span class="operator">=</span> <span class="string">&#x27;ben&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> <span class="operator">=</span> Password(<span class="string">&#x27;新密码&#x27;</span>);</span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> ben<span class="variable">@localhost</span> <span class="operator">=</span> Password(<span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><br><br><br><br><br><br></p>
<h3 id="28-1-访问控制"><a href="#28-1-访问控制" class="headerlink" title="28.1 访问控制"></a>28.1 访问控制</h3><p>需要给用户提供他们所需的访问权，且仅提供他们所需的访问权。这就是所谓的<strong>访问控制</strong>，<font color="ffa600"><strong>管理访问控制需要创建和管理用户账号</strong></font>。</p>
<blockquote>
<p><strong>使用MySQL Administrator</strong>     MySQL Administrator（第2节提到）提供了一个图形用户界面，可用来管理用户及账号权限。MySQL Administrator在内部利用本章介绍的语句，使你能交互地、方便地管理访问控制。</p>
</blockquote>
<p>（第3节提到）为了执行数据库操作，需要登录MySQL。MySQL创建一个名为<code>root</code> 的用户账号，它对整个MySQL服务器具有完全的控制。在学习中可以使用<code>root</code> 进行过登录；不过在现实世界的日常工作中，决<font color="ffa600">不能</font>使用<code>root</code> 。应该创建一系列的账号，有的用于管理，有的供用户使用，有的供开发人员使用，等等。</p>
<blockquote>
<p><strong>防止无意的错误</strong>     重要的是注意到，访问控制的目的不仅仅是防止用户的恶意企图。数据梦魇更为常见的是无意识错误的结果，如错打MySQL语句，在不合适的数据库中操作或其他一些用户错误。通过保证用户不能执行他们不应该执行的语句，访问控制有助于避免这些情况的发生。</p>
</blockquote>
<blockquote>
<p><strong>不要使用<code>root</code></strong>     应该严肃对待<code>root</code> 登录的使用。<font color="ffa600">仅在绝对需要时使用它</font>（或许在你不能登录其他管理账号时使用）。不应该在日常的MySQL操作中使用<code>root</code> 。</p>
</blockquote>
<p><br><br><br><br><br><br></p>
<h3 id="28-2-管理用户"><a href="#28-2-管理用户" class="headerlink" title="28.2 管理用户"></a>28.2 管理用户</h3><p>MySQL用户账号和信息存储在名为<code>mysql</code> 的MySQL数据库中。</p>
<p>需要获得所有用户账号列表时，访问该数据库。使用以下代码：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+------------------+</span><br><span class="line">| user             |</span><br><span class="line">+------------------+</span><br><span class="line">| mysql.infoschema |</span><br><span class="line">| mysql.session    |</span><br><span class="line">| mysql.sys        |</span><br><span class="line">| root             |</span><br><span class="line">+------------------+</span><br></pre></td></tr></table></figure>

<p><br><br><br></p>
<h4 id="28-2-1-创建用户账号"><a href="#28-2-1-创建用户账号" class="headerlink" title="28.2.1 创建用户账号"></a>28.2.1 创建用户账号</h4><p>使用<code>CREATE USER</code> 语句创建一个新用户账号：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;ben&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;111&#x27;</span>;	<span class="comment">-- 例</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;ben&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123&#x27;</span>;	<span class="comment">-- 例</span></span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p><code>CREATE USER</code> 创建一个新用户账号。在创建用户账号时不一定需要口令，不过这个例子用<code>IDENTIFIED BY &#39;p@$$wOrd&#39;</code> 给出了一个口令。</p>
<blockquote>
<p><strong>指定散列口令</strong>     <code>IDENTIFIED BY</code> 指定的口令为纯文本，MySQL将在保存到<code>user</code> 表之前对其进行加密。为了作为散列值指定口令，使用<code>IDENTIFIED BY PASSWORD</code> 。</p>
</blockquote>
<blockquote>
<p><strong>使用<code>GRANT</code> 或<code>INSERT</code></strong>     <code>GRANT</code> 语句（稍后介绍）也可以创建用户账号，但一般来说<code>CREATE USER</code> 是最清楚和最简单的句子。此外，也可以通过直接插入行到<code>user</code> 表来增加用户，不过为安全起见，一般不建议这样做。MySQL用来存储用户账号信息的表（以及表模式等）极为重要，对它们的任何毁坏都可能严重地伤害到MySQL服务器。因此，相对于直接处理来说，最好是用标记和函数来处理这些表。</p>
</blockquote>
<br>

<p>为重新命名一个用户账号，使用<code>RENAME USER</code> 语句，如下所示：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">RENAME <span class="keyword">USER</span> <span class="string">&#x27;ben&#x27;</span> <span class="keyword">TO</span> <span class="string">&#x27;bfortaplus&#x27;</span>;</span><br><span class="line">RENAME <span class="keyword">USER</span> <span class="string">&#x27;ben&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">TO</span> <span class="string">&#x27;bforta&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>MySQL 5之前</strong>     仅MySQL 5或之后的版本支持<code>RENAME USER</code> 。为了在以前的MySQL中重命名一个用户，可使用<code>UPDATE</code> 直接更新<code>user</code> 表。</p>
</blockquote>
<p><br><br><br></p>
<h4 id="28-2-2-删除用户账号"><a href="#28-2-2-删除用户账号" class="headerlink" title="28.2.2 删除用户账号"></a>28.2.2 删除用户账号</h4><p>删除一个用户账号（以及相关的权限），使用<code>DROP USER</code> 语句，如下所示：</p>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;bfortaplus&#x27;</span>;	<span class="comment">-- 例</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;bforta&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;	<span class="comment">-- 例</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>MySQL 5之前</strong>     自MySQL 5以来，<code>DROP USER</code> 删除用户账号和所有相关的账号权限。在MySQL 5以前，<code>DROP USER</code> 只能用来删除用户账号，不能删除相关的权限。因此，如果使用旧版本的MySQL，需要先用<code>REVOKE</code> 删除与账号相关的权限，然后再用<code>DROP USER</code> 删除账号。</p>
</blockquote>
<p><br><br><br></p>
<h4 id="28-2-3-设置访问权限"><a href="#28-2-3-设置访问权限" class="headerlink" title="28.2.3 设置访问权限"></a>28.2.3 设置访问权限</h4><h5 id="查询权限"><a href="#查询权限" class="headerlink" title="查询权限"></a>查询权限</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> ben@<span class="string">&#x27;localhost&#x27;</span>;	<span class="comment">-- accessible</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> ben<span class="variable">@localhost</span>;	<span class="comment">-- accessible</span></span><br></pre></td></tr></table></figure>

<p> <strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-----------------------------------------+</span><br><span class="line">| Grants <span class="keyword">for</span> ben@localhost                |</span><br><span class="line">+-----------------------------------------+</span><br><span class="line">| GRANT USAGE ON *.* TO `ben`@`localhost` |</span><br><span class="line">+-----------------------------------------+</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>输出结果显示用户<code>bforta</code> 有一个权限<code>USAGE ON*.*</code> 。<code>USAGE</code> 表示<em>根本没有权限</em> ，所以，此结果表示在<em>任意数据库</em> 和<em>任意表</em> 上对<em>任何东西没有权限</em> 。</p>
<blockquote>
<p><strong>用户定义为<code>user@host</code></strong>     MySQL的权限用用户名和主机名结合定义。如果不指定主机名，则使用默认的主机名%（授予用户访问权限而不管主机名）。</p>
</blockquote>
<p><br><br></p>
<h5 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h5><ul>
<li>使用 <code>GRANT</code> 语句授予/更新权限；</li>
<li>使用 <code>REVOKE</code> 语句移除权限。与 <code>GRANT</code> 语句语法一致。</li>
</ul>
<p><code>GRANT</code> 要求你至少给出以下信息：</p>
<ul>
<li>要授予的权限；</li>
<li>被授予访问权限的数据库或表；</li>
<li>用户名。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 授予权限</span></span><br><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">TO</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"><span class="comment">-- 允许用户在crashcourse.* （crashcourse 数据库的所有表）上使用SELECT。即授予只读访问权限。</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> crashcourse.<span class="operator">*</span> <span class="keyword">TO</span> ben<span class="variable">@localhost</span>;</span><br><span class="line"><span class="comment">-- 给主机的ben用户授予SELECT,和INSERT权限，在crashcourse数据库任意表上</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span> <span class="keyword">ON</span> crashcourse.<span class="operator">*</span> <span class="keyword">TO</span> ben<span class="variable">@localhost</span>;</span><br><span class="line"><span class="comment">-- 给主机的ben用户授予所有权限，在任意数据库任意表上</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;ben&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 移除权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">FROM</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"><span class="comment">-- 移除用户在crashcourse.* （crashcourse 数据库的所有表）上使用SELECT的权限。即移除只读访问权限。</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> crashcourse.<span class="operator">*</span> <span class="keyword">FROM</span> ben<span class="variable">@localhost</span>;</span><br></pre></td></tr></table></figure>



<p><br><br></p>
<p><code>GRANT</code> 和<code>REVOKE</code> 可在几个层次上控制访问权限：</p>
<ul>
<li>整个服务器，使用<code>GRANT ALL</code> 和<code>REVOKE ALL</code> ；</li>
<li>整个数据库，使用<code>ON database.*</code> ；</li>
<li>特定的表，使用<code>ON database.table</code> ；</li>
<li>特定的列；</li>
<li>特定的存储过程。</li>
</ul>
<p>表28-1列出可以授予或撤销的每个权限。</p>
<p><strong>表28-1 权限</strong></p>
<table>
<thead>
<tr>
<th align="center">权 限</th>
<th align="center">说 明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>ALL</code></td>
<td align="center">除<code>GRANT OPTION</code> 外的所有权限</td>
</tr>
<tr>
<td align="center"><code>ALTER</code></td>
<td align="center">使用<code>ALTER TABLE</code></td>
</tr>
<tr>
<td align="center"><code>ALTER ROUTINE</code></td>
<td align="center">使用<code>ALTER PROCEDURE</code> 和<code>DROP PROCEDURE</code></td>
</tr>
<tr>
<td align="center"><code>CREATE</code></td>
<td align="center">使用<code>CREATE TABLE</code></td>
</tr>
<tr>
<td align="center"><code>CREATE ROUTINE</code></td>
<td align="center">使用<code>CREATE PROCEDURE</code></td>
</tr>
<tr>
<td align="center"><code>CREATE TEMPORARY TABLES</code></td>
<td align="center">使用<code>CREATE TEMPORARY TABLE</code></td>
</tr>
<tr>
<td align="center"><code>CREATE USER</code></td>
<td align="center">使用<code>CREATE USER</code> 、<code>DROP USER</code> 、<code>RENAME USER</code> 和<code>REVOKE ALL PRIVILEGES</code></td>
</tr>
<tr>
<td align="center"><code>CREATE VIEW</code></td>
<td align="center">使用<code>CREATE VIEW</code></td>
</tr>
<tr>
<td align="center"><code>DELETE</code></td>
<td align="center">使用<code>DELETE</code></td>
</tr>
<tr>
<td align="center"><code>DROP</code></td>
<td align="center">使用<code>DROP TABLE</code></td>
</tr>
<tr>
<td align="center"><code>EXECUTE</code></td>
<td align="center">使用<code>CALL</code> 和存储过程</td>
</tr>
<tr>
<td align="center"><code>FILE</code></td>
<td align="center">使用<code>SELECT INTO OUTFILE</code> 和<code>LOAD DATA INFILE</code></td>
</tr>
<tr>
<td align="center"><code>GRANT OPTION</code></td>
<td align="center">使用<code>GRANT</code> 和<code>REVOKE</code></td>
</tr>
<tr>
<td align="center"><code>INDEX</code></td>
<td align="center">使用<code>CREATE INDEX</code> 和<code>DROP INDEX</code></td>
</tr>
<tr>
<td align="center"><code>INSERT</code></td>
<td align="center">使用<code>INSERT</code></td>
</tr>
<tr>
<td align="center"><code>LOCK TABLES</code></td>
<td align="center">使用<code>LOCK TABLES</code></td>
</tr>
<tr>
<td align="center"><code>PROCESS</code></td>
<td align="center">使用<code>SHOW FULL PROCESSLIST</code></td>
</tr>
<tr>
<td align="center"><code>RELOAD</code></td>
<td align="center">使用<code>FLUSH</code></td>
</tr>
<tr>
<td align="center"><code>REPLICATION CLIENT</code></td>
<td align="center">服务器位置的访问</td>
</tr>
<tr>
<td align="center"><code>REPLICATION SLAVE</code></td>
<td align="center">由复制从属使用</td>
</tr>
<tr>
<td align="center"><code>SELECT</code></td>
<td align="center">使用<code>SELECT</code></td>
</tr>
<tr>
<td align="center"><code>SHOW DATABASES</code></td>
<td align="center">使用<code>SHOW DATABASES</code></td>
</tr>
<tr>
<td align="center"><code>SHOW VIEW</code></td>
<td align="center">使用<code>SHOW CREATE VIEW</code></td>
</tr>
<tr>
<td align="center"><code>SHUTDOWN</code></td>
<td align="center">使用<code>mysqladmin shutdown</code> （用来关闭MySQL）</td>
</tr>
<tr>
<td align="center"><code>SUPER</code></td>
<td align="center">使用<code>CHANGE MASTER</code> 、<code>KILL</code> 、<code>LOGS</code> 、<code>PURGE</code> 、<code>MASTER</code> 和<code>SET GLOBAL</code> 。还允许<code>mysqladmin</code> 调试登录</td>
</tr>
<tr>
<td align="center"><code>UPDATE</code></td>
<td align="center">使用<code>UPDATE</code></td>
</tr>
<tr>
<td align="center"><code>USAGE</code></td>
<td align="center">无访问权限</td>
</tr>
</tbody></table>
<br>

<blockquote>
<p><strong>未来的授权</strong>     在使用<code>GRANT</code> 和<code>REVOKE</code> 时，用户账号必须存在，但对所涉及的对象没有这个要求。这允许管理员在创建数据库和表之前设计和实现安全措施。</p>
<p>这样做的副作用是，当某个数据库或表被删除时（用<code>DROP</code> 语句），相关的访问权限仍然存在。而且，如果将来重新创建该数据库或表，这些权限仍然起作用。</p>
</blockquote>
<blockquote>
<p><strong>简化多次授权</strong>     可通过列出各权限并用逗号分隔，将多条<code>GRANT</code> 语句串在一起，如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span> <span class="keyword">ON</span> crashcourse.<span class="operator">*</span> <span class="keyword">TO</span> ben<span class="variable">@localhost</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><br><br><br></p>
<h4 id="28-2-4-更改密码"><a href="#28-2-4-更改密码" class="headerlink" title="28.2.4 更改密码"></a>28.2.4 更改密码</h4><p>修改密码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;新密码&#x27;</span>;	<span class="comment">-- 8.0.25版本可执行语法</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> ben<span class="variable">@localhost</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;	<span class="comment">-- 样例</span></span><br><span class="line"></span><br><span class="line">UPDATE <span class="keyword">USER</span> <span class="keyword">SET</span> PASSWORD <span class="operator">=</span> PASSWORD(<span class="string">&#x27;新密码&#x27;</span>) <span class="keyword">WHERE</span> <span class="keyword">USER</span> <span class="operator">=</span> <span class="string">&#x27;用户名&#x27;</span>;</span><br><span class="line">UPDATE <span class="keyword">USER</span> <span class="keyword">SET</span> PASSWORD <span class="operator">=</span> PASSWORD(<span class="string">&#x27;abc&#x27;</span>) <span class="keyword">WHERE</span> <span class="keyword">USER</span> <span class="operator">=</span> <span class="string">&#x27;ben&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> <span class="operator">=</span> Password(<span class="string">&#x27;新密码&#x27;</span>);</span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> ben<span class="variable">@localhost</span> <span class="operator">=</span> Password(<span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="29-数据库维护"><a href="#29-数据库维护" class="headerlink" title="29. 数据库维护"></a>29. 数据库维护</h2><p>本章学习如何进行常见的数据库维护。</p>
<p><br><br><br><br><br><br></p>
<h3 id="29-1-备份数据"><a href="#29-1-备份数据" class="headerlink" title="29.1 备份数据"></a>29.1 备份数据</h3><h4 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h4><p>MySQL数据库是基于磁盘的文件，普通的备份系统和例程就能备份MySQL的数据。但是，由于这些文件总是处于打开和使用状态，普通的文件副本备份不一定总是有效。</p>
<p>下面列出这个问题的可能解决方案。</p>
<ul>
<li>使用<font color="ffa600">cmd命令行实用程序</font><code>mysqldump</code> 转储所有数据库内容到某个外部文件。在进行常规备份前这个实用程序应该正常运行，以便能正确地备份转储文件。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">########## 备份表 ##########</span></span><br><span class="line">mysqldump -u username -p dbname table1 table2... &gt; BackupName.sql	<span class="comment"># 格式</span></span><br><span class="line"><span class="comment"># 样例如下</span></span><br><span class="line">mysqldump -u root -p crashcourse orders &gt; E:backupOrders.sql	-- 备份crashcourse.orders表</span><br><span class="line">mysqldump -u root -p crashcourse &gt; E:backupCrashcourse.sql		-- 备份crashcourse数据库所有内容</span><br><span class="line"></span><br><span class="line"><span class="comment">########## 备份数据库 ##########</span></span><br><span class="line">mysqldump -u username -p --databases dbname1 dbname2 &gt; E:Backup.sql	-- 同时备份多个数据库</span><br><span class="line"><span class="comment"># 样例如下</span></span><br><span class="line">mysqldump -u root -p --databases db1 db2 &gt; E:backupdb1db2.sql	-- 同时备份多个数据库</span><br></pre></td></tr></table></figure>

<ul>
<li><p>可用命令行实用程序<code>mysqlhotcopy</code> 从一个数据库复制所有数据（并非所有数据库引擎都支持这个实用程序）。</p>
</li>
<li><p>可以使用MySQL的<code>BACKUP TABLE</code> 或<code>SELECT INTO OUTFILE</code> 转储所有数据到某个外部文件。这两条语句都接受将要创建的系统文件名，此系统文件必须不存在，否则会出错。数据可以用<code>RESTORE TABLE</code> 来复原。</p>
</li>
</ul>
<p><br><br></p>
<h4 id="数据还原"><a href="#数据还原" class="headerlink" title="数据还原"></a>数据还原</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p [dbname] &lt; backup.sql	<span class="comment"># 格式</span></span><br><span class="line">mysql -uroot -p123456 dbtest &lt; E:backupOrders.sql</span><br><span class="line">mysql -uroot -p123456 crashcourse &lt;E:backupOrders.sql</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<p><font color="ffa600"><strong>在cmd命令行界面下</strong></font>使用命令<code>mysql -uUser -pPassword [dbname] &lt; backup.sql</code>导入数据时会报错，内容如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ERROR: ASCII <span class="string">&#x27;\0&#x27;</span> appeared <span class="keyword">in</span> the statement, but this is not allowed unless option --binary-mode is enabled and mysql is run <span class="keyword">in</span> non-interactive mode. Set --binary-mode to 1 <span class="keyword">if</span> ASCII <span class="string">&#x27;\0&#x27;</span> is expected. Query: <span class="string">&#x27;?&#x27;</span>.</span><br></pre></td></tr></table></figure>

<p>解决办法：使用任意编辑器打开<code>.sql</code>脚本，将其编码格式转为<code>UTF-8</code>，再重新使用命令恢复数据即可。</p>
<p>问题解决方案链接：<a href="https://stackoverflow.com/questions/17158367/enable-binary-mode-while-restoring-a-database-from-an-sql-dump">mysql - Enable binary mode while restoring a Database from an SQL dump - Stack Overflow</a></p>
</blockquote>
<blockquote>
<p><strong>首先刷新未写数据</strong>     为了保证所有数据被写到磁盘（包括索引数据），可能需要在进行备份前使用<code>FLUSH TABLES</code> 语句。</p>
</blockquote>
<p><br><br><br><br><br><br></p>
<h3 id="29-2-数据库维护"><a href="#29-2-数据库维护" class="headerlink" title="29.2 数据库维护"></a>29.2 数据库维护</h3><p>MySQL提供了一系列的语句，可以（应该）用来保证数据库正确和正常运行。</p>
<br>

<ul>
<li><code>ANALYZE TABLE</code> ，用来检查表键是否正确。<code>ANALYZE TABLE</code> 返回如下所示的状态信息：</li>
</ul>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ANALYZE <span class="keyword">TABLE</span> orders;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+--------------------+---------+----------+----------+</span><br><span class="line">| Table              | Op      | Msg_type | Msg_text |</span><br><span class="line">+--------------------+---------+----------+----------+</span><br><span class="line">| crashcourse.orders | analyze | status   | OK       |</span><br><span class="line">+--------------------+---------+----------+----------+</span><br></pre></td></tr></table></figure>

<ul>
<li><code>CHECK TABLE</code> 用来针对许多问题对表进行检查。在<code>MyISAM</code> 表上还对索引进行检查。<code>CHECK TABLE</code> 支持一系列的用于<code>MyISAM</code> 表的方式。<code>CHANGED</code> 检查自最后一次检查以来改动过的表。<code>EXTENDED</code> 执行最彻底的检查，<code>FAST</code> 只检查未正常关闭的表，<code>MEDIUM</code> 检查所有被删除的链接并进行键检验，<code>QUICK</code> 只进行快速扫描。如下所示，<code>CHECK TABLE</code> 发现和修复问题：</li>
</ul>
<p><strong>输入</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CHECK</span> <span class="keyword">TABLE</span> orders, orderitems;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+------------------------+-------+----------+----------+</span><br><span class="line">| Table                  | Op    | Msg_type | Msg_text |</span><br><span class="line">+------------------------+-------+----------+----------+</span><br><span class="line">| crashcourse.orders     | check | status   | OK       |</span><br><span class="line">| crashcourse.orderitems | check | status   | OK       |</span><br><span class="line">+------------------------+-------+----------+----------+</span><br></pre></td></tr></table></figure>

<ul>
<li>如果<code>MyISAM</code> 表访问产生不正确和不一致的结果，可能需要用<code>REPAIR TABLE</code> 来修复相应的表。这条语句不应该经常使用，如果需要经常使用，可能会有更大的问题要解决。</li>
<li>如果从一个表中删除大量数据，应该使用<code>OPTIMIZE TABLE</code> 来收回所用的空间，从而优化表的性能。</li>
</ul>
<p><br><br><br><br><br><br></p>
<h3 id="29-3-诊断启动问题"><a href="#29-3-诊断启动问题" class="headerlink" title="29.3 诊断启动问题"></a>29.3 诊断启动问题</h3><p>服务器启动问题通常在对MySQL配置或服务器本身进行更改时出现。MySQL在这个问题发生时报告错误，但由于多数MySQL服务器是作为系统进程或服务自动启动的，这些消息可能看不到。</p>
<p>在排除系统启动问题时，首先应该尽量用手动启动服务器。MySQL服务器自身通过在命令行上执行<code>mysqld</code> 启动。下面是几个重要的<code>mysqld</code> 命令行选项：</p>
<ul>
<li><code>--help</code> 显示帮助——一个选项列表；</li>
<li><code>--safe-mode</code> 装载减去某些最佳配置的服务器；</li>
<li><code>--verbose</code> 显示全文本消息（为获得更详细的帮助消息与<code>--help</code> 联合使用）；</li>
<li><code>--version</code> 显示版本信息然后退出。</li>
</ul>
<p>几个另外的命令行选项（与日志文件的使用有关）在 29.4 列出。</p>
<p><br><br><br><br><br><br></p>
<h3 id="29-4-查看日志文件"><a href="#29-4-查看日志文件" class="headerlink" title="29.4 查看日志文件"></a>29.4 查看日志文件</h3><p>MySQL维护管理员依赖的一系列日志文件。主要的日志文件有以下几种。</p>
<ul>
<li>错误日志。它包含启动和关闭问题以及任意关键错误的细节。此日志通常名为<code>hostname.err</code>，位于<code>data</code> 目录中。此日志名可用<code>--log-error</code> 命令行选项更改。</li>
<li>查询日志。它记录所有MySQL活动，在诊断问题时非常有用。此日志文件可能会很快地变得非常大，因此不应该长期使用它。此日志通常名为<code>hostname.log</code> ，位于<code>data</code> 目录中。此名字可以用<code>--log</code> 命令行选项更改。</li>
<li>二进制日志。它记录更新过数据（或者可能更新过数据）的所有语句。此日志通常名为<code>hostname-bin</code> ，位于<code>data</code> 目录内。此名字可以用<code>--log-bin</code> 命令行选项更改。注意，这个日志文件是MySQL 5中添加的，以前的MySQL版本中使用的是更新日志。</li>
<li>缓慢查询日志。顾名思义，此日志记录执行缓慢的任何查询。这个日志在确定数据库何处需要优化很有用。此日志通常名为<code>hostname-slow.log</code> ，位于<code>data</code> 目录中。此名字可以用<code>--log-slow-queries</code> 命令行选项更改。</li>
</ul>
<p>在使用日志时，可用<code>FLUSH LOGS</code> 语句来刷新和重新开始所有日志文件。</p>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="30-改善性能"><a href="#30-改善性能" class="headerlink" title="30. 改善性能"></a>30. 改善性能</h2><ul>
<li>涉及与MySQL性能有关的某些要点。</li>
</ul>
<p><br><br><br><br><br><br></p>
<h3 id="30-1-改善性能"><a href="#30-1-改善性能" class="headerlink" title="30.1 改善性能"></a>30.1 改善性能</h3><p>以下内容并不能完全决定MySQL的性能。此处仅通过回顾前面各章的重点，提供进行性能优化探讨和分析的一个出发点。</p>
<ul>
<li>首先，MySQL（与所有DBMS一样）具有特定的硬件建议。在学习和研究MySQL时，使用任何旧的计算机作为服务器都可以。但对用于生产的服务器来说，应该坚持遵循这些硬件建议。</li>
<li>一般来说，关键的生产DBMS应该运行在自己的专用服务器上。</li>
<li>MySQL是用一系列的默认设置预先配置的，从这些设置开始通常是很好的。但过一段时间后你可能需要调整内存分配、缓冲区大小等。（为查看当前设置，可使用<code>SHOW VARIABLES;</code> 和<code>SHOW STATUS;</code> 。）</li>
<li>MySQL一个多用户多线程的DBMS，换言之，它经常同时执行多个任务。如果这些任务中的某一个执行缓慢，则所有请求都会执行缓慢。如果你遇到显著的性能不良，可使用<code>SHOW PROCESS LIST</code> 显示所有活动进程（以及它们的线程ID和执行时间）。你还可以用<code>KILL</code> 命令终结某个特定的进程（使用这个命令需要作为管理员登录）。【此处测试无法使用SHOW命令】</li>
<li>总是有不止一种方法编写同一条<code>SELECT</code> 语句。应该试验联结、并、子查询等，找出最佳的方法。</li>
<li>使用<code>EXPLAIN</code> 语句让MySQL解释它将如何执行一条<code>SELECT</code> 语句。<ul>
<li><code>EXPLAIN</code>语句详见<a href="https://blog.csdn.net/lvhaizhen/article/details/90763799">mysql 用法 Explain_lvhaizhen的博客-CSDN博客</a></li>
</ul>
</li>
<li>一般来说，<strong>存储过程</strong>执行得比一条一条地执行其中的各条MySQL语句快。</li>
<li>应该总是使用正确的数据类型。</li>
<li>决不要检索比需求还要多的数据。换言之，不要用<code>SELECT*</code> （除非你真正需要每个列）。</li>
<li>有的操作（包括<code>INSERT</code> ）支持一个可选的<code>DELAYED</code> 关键字，如果使用它，将把控制立即返回给调用程序，并且一旦有可能就实际执行该操作。</li>
<li>在<font color="ffa600">导入数据时，应该关闭自动提交</font>。你可能还想删除索引（包括<code>FULLTEXT</code> 索引），然后在导入完成后再重建它们。</li>
<li>必须<font color="ffa600">索引数据库表</font>以改善数据检索的性能。确定索引什么不是一件微不足道的任务，需要分析使用的<code>SELECT</code> 语句以找出重复的<code>WHERE</code> 和<code>ORDER BY</code> 子句。如果一个简单的<code>WHERE</code> 子句返回结果所花的时间太长，则可以断定其中使用的列（或几个列）就是需要索引的对象。</li>
<li>你的<code>SELECT</code> 语句中有一系列复杂的<code>OR</code> 条件吗？通过使用多条<code>SELECT</code> 语句和连接它们的<code>UNION</code>语句【组合查询】，你能看到极大的性能改进。</li>
<li><strong>索引改善数据检索的性能，但损害数据插入、删除和更新的性能。</strong>如果你有一些表，它们收集数据且不经常被搜索，则在有必要之前不要索引它们。（索引可根据需要添加和删除。）</li>
<li><code>LIKE</code> 很慢。一般来说，最好是使用<code>FULLTEXT</code>【全文索引】 而不是<code>LIKE</code> 。</li>
<li>数据库是不断变化的实体。一组优化良好的表一会儿后可能就面目全非了。由于表的使用和内容的更改，理想的优化和配置也会改变。</li>
<li>最重要的规则就是，<font color="ffa600"><strong>每条规则在某些条件下都会被打破</strong></font>。</li>
</ul>
<blockquote>
<p><strong>浏览文档</strong>     位于<a href="http://dev.mysql.com/doc/">http://dev.mysql.com/doc/</a> 的官方MySQL文档有许多提示和技巧（包括用户提供的评论和反馈）。</p>
</blockquote>
<p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="附录0：Tables-in-crashcourse"><a href="#附录0：Tables-in-crashcourse" class="headerlink" title="附录0：Tables_in_crashcourse"></a>附录0：Tables_in_crashcourse</h2><br>

<h3 id="vendors"><a href="#vendors" class="headerlink" title="vendors"></a>vendors</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+----------------+-----------------+-------------+------------+----------+--------------+</span><br><span class="line">| vend_id | vend_name      | vend_address    | vend_city   | vend_state | vend_zip | vend_country |</span><br><span class="line">+---------+----------------+-----------------+-------------+------------+----------+--------------+</span><br><span class="line">|    1001 | Anvils R Us    | 123 Main Street | Southfield  | MI         | 48075    | USA          |</span><br><span class="line">|    1002 | LT Supplies    | 500 Park Street | Anytown     | OH         | 44333    | USA          |</span><br><span class="line">|    1003 | ACME           | 555 High Street | Los Angeles | CA         | 90046    | USA          |</span><br><span class="line">|    1004 | Furball Inc.   | 1000 5th Avenue | New York    | NY         | 11111    | USA          |</span><br><span class="line">|    1005 | Jet Set        | 42 Galaxy Road  | London      | NULL       | N16 6PS  | England      |</span><br><span class="line">|    1006 | Jouets Et Ours | 1 Rue Amusement | Paris       | NULL       | 45678    | France       |</span><br><span class="line">+---------+----------------+-----------------+-------------+------------+----------+--------------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><code>vendors</code> 表存储销售产品的供应商。每个供应商在这个表中有一个记录，供应商ID（<code>vend_id</code> ）列用来匹配产品和供应商。</p>
<p><strong>表B-1 <code>vendors</code> 表的列</strong></p>
<table>
<thead>
<tr>
<th align="center">列</th>
<th align="center">说 明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>vend_id</code></td>
<td align="center">唯一的供应商ID</td>
</tr>
<tr>
<td align="center"><code>vend_name</code></td>
<td align="center">供应商名</td>
</tr>
<tr>
<td align="center"><code>vend_address</code></td>
<td align="center">供应商的地址</td>
</tr>
<tr>
<td align="center"><code>vend_city</code></td>
<td align="center">供应商的城市</td>
</tr>
<tr>
<td align="center"><code>vend_state</code></td>
<td align="center">供应商的州</td>
</tr>
<tr>
<td align="center"><code>vend_zip</code></td>
<td align="center">供应商的邮政编码</td>
</tr>
<tr>
<td align="center"><code>vend_country</code></td>
<td align="center">供应商的国家</td>
</tr>
</tbody></table>
<ul>
<li>所有表都应该有主键。这个表使用<code>vend_id</code> 作为主键。<code>vend_id</code> 为一个自动增量字段。</li>
</ul>
<br>

<h3 id="products"><a href="#products" class="headerlink" title="products"></a>products</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+---------+----------------+------------+----------------------------------------------------------------+</span><br><span class="line">| prod_id | vend_id | prod_name      | prod_price | prod_desc                                                      |</span><br><span class="line">+---------+---------+----------------+------------+----------------------------------------------------------------+</span><br><span class="line">| ANV01   |    1001 | .5 ton anvil   |       5.99 | .5 ton anvil, black, complete with handy hook                  |</span><br><span class="line">| ANV02   |    1001 | 1 ton anvil    |       9.99 | 1 ton anvil, black, complete with handy hook and carrying <span class="keyword">case</span> |</span><br><span class="line">| ANV03   |    1001 | 2 ton anvil    |      14.99 | 2 ton anvil, black, complete with handy hook and carrying <span class="keyword">case</span> |</span><br><span class="line">| DTNTR   |    1003 | Detonator      |      13.00 | Detonator (plunger powered), fuses not included                |</span><br><span class="line">| FB      |    1003 | Bird seed      |      10.00 | Large bag (suitable <span class="keyword">for</span> road runners)                          |</span><br><span class="line">| FC      |    1003 | Carrots        |       2.50 | Carrots (rabbit hunting season only)                           |</span><br><span class="line">| FU1     |    1002 | Fuses          |       3.42 | 1 dozen, extra long                                            |</span><br><span class="line">| JP1000  |    1005 | JetPack 1000   |      35.00 | JetPack 1000, intended <span class="keyword">for</span> single use                          |</span><br><span class="line">| JP2000  |    1005 | JetPack 2000   |      55.00 | JetPack 2000, multi-use                                        |</span><br><span class="line">| OL1     |    1002 | Oil can        |       8.99 | Oil can, red                                                   |</span><br><span class="line">| SAFE    |    1003 | Safe           |      50.00 | Safe with combination lock                                     |</span><br><span class="line">| SLING   |    1003 | Sling          |       4.49 | Sling, one size fits all                                       |</span><br><span class="line">| TNT1    |    1003 | TNT (1 stick)  |       2.50 | TNT, red, single stick                                         |</span><br><span class="line">| TNT2    |    1003 | TNT (5 sticks) |      10.00 | TNT, red, pack of 10 sticks                                    |</span><br><span class="line">+---------+---------+----------------+------------+----------------------------------------------------------------+</span><br><span class="line">14 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><code>products</code> 表包含产品目录，每行一个产品。每个产品有唯一的ID（<code>prod_id</code> 列），通过<code>vend_id</code>（供应商的唯一ID）关联到它的供应商。</p>
<p><strong>表B-2 <code>products</code> 表的列</strong></p>
<table>
<thead>
<tr>
<th align="center">列</th>
<th align="center">说 明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>prod_id</code></td>
<td align="center">唯一的产品ID</td>
</tr>
<tr>
<td align="center"><code>vend_id</code></td>
<td align="center">产品供应商ID（关联到<code>vendors</code> 表中的<code>vend_id</code> ）</td>
</tr>
<tr>
<td align="center"><code>prod_name</code></td>
<td align="center">产品名</td>
</tr>
<tr>
<td align="center"><code>prod_price</code></td>
<td align="center">产品价格</td>
</tr>
<tr>
<td align="center"><code>prod_desc</code></td>
<td align="center">产品描述</td>
</tr>
</tbody></table>
<ul>
<li>所有表都应该有一个主键，这个表用<code>prod_id</code> 作为其主键。</li>
<li>为实施引用完整性，应该在<code>vend_id</code> 上定义一个外键，关联到<code>vendors</code> 的<code>vend_id</code> 。</li>
</ul>
<br>

<h3 id="customers"><a href="#customers" class="headerlink" title="customers"></a>customers</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+----------------+---------------------+-----------+------------+----------+--------------+--------------+---------------------+</span><br><span class="line">| cust_id | cust_name      | cust_address        | cust_city | cust_state | cust_zip | cust_country | cust_contact | cust_email          |</span><br><span class="line">+---------+----------------+---------------------+-----------+------------+----------+--------------+--------------+---------------------+</span><br><span class="line">|   10001 | Coyote Inc.    | 200 Maple Lane      | Detroit   | MI         | 44444    | USA          | Y Lee        | ylee@coyote.com     |</span><br><span class="line">|   10002 | Mouse House    | 333 Fromage Lane    | Columbus  | OH         | 43333    | USA          | Jerry Mouse  | NULL                |</span><br><span class="line">|   10003 | Wascals        | 1 Sunny Place       | Muncie    | IN         | 42222    | USA          | Jim Jones    | rabbit@wascally.com |</span><br><span class="line">|   10004 | Yosemite Place | 829 Riverside Drive | Phoenix   | AZ         | 88888    | USA          | Y Sam        | sam@yosemite.com    |</span><br><span class="line">|   10005 | E Fudd         | 4545 53rd Street    | Chicago   | IL         | 54545    | USA          | E Fudd       | NULL                |</span><br><span class="line">+---------+----------------+---------------------+-----------+------------+----------+--------------+--------------+---------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><code>customers</code> 表存储所有顾客的信息。每个顾客有唯一的ID（<code>cust_id</code> 列）。</p>
<p><strong>表B-3 <code>customers</code> 表的列</strong></p>
<table>
<thead>
<tr>
<th align="center">列</th>
<th align="center">说 明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>cust_id</code></td>
<td align="center">唯一的顾客ID</td>
</tr>
<tr>
<td align="center"><code>cust_name</code></td>
<td align="center">顾客名</td>
</tr>
<tr>
<td align="center"><code>cust_address</code></td>
<td align="center">顾客的地址</td>
</tr>
<tr>
<td align="center"><code>cust_city</code></td>
<td align="center">顾客的城市</td>
</tr>
<tr>
<td align="center"><code>cust_state</code></td>
<td align="center">顾客的州</td>
</tr>
<tr>
<td align="center"><code>cust_zip</code></td>
<td align="center">顾客的邮政编码</td>
</tr>
<tr>
<td align="center"><code>cust_country</code></td>
<td align="center">顾客的国家</td>
</tr>
<tr>
<td align="center"><code>cust_contact</code></td>
<td align="center">顾客的联系名</td>
</tr>
<tr>
<td align="center"><code>cust_email</code></td>
<td align="center">顾客的联系emal地址</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<ul>
<li>所有表都应该定义主键，这个表将使用<code>cust_id</code> 作为它的主键。<code>cust_id</code> 是一个自动增量字段。</li>
</ul>
<br>

<h3 id="orders"><a href="#orders" class="headerlink" title="orders"></a>orders</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-----------+---------------------+---------+</span><br><span class="line">| order_num | order_date          | cust_id |</span><br><span class="line">+-----------+---------------------+---------+</span><br><span class="line">|     20005 | 2005-09-01 00:00:00 |   10001 |</span><br><span class="line">|     20006 | 2005-09-12 00:00:00 |   10003 |</span><br><span class="line">|     20007 | 2005-09-30 00:00:00 |   10004 |</span><br><span class="line">|     20008 | 2005-10-03 00:00:00 |   10005 |</span><br><span class="line">|     20009 | 2005-10-08 00:00:00 |   10001 |</span><br><span class="line">+-----------+---------------------+---------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><code>orders</code> 表存储顾客订单（但不是订单细节）。每个订单唯一地编号（<code>order_num</code> 列）。订单用<code>cust_id</code> 列（它关联到<code>customer</code> 表的顾客唯一ID）与相应的顾客关联。</p>
<p><strong>表B-4 <code>orders</code> 表的列</strong></p>
<table>
<thead>
<tr>
<th align="center">列</th>
<th align="center">说 明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>order_num</code></td>
<td align="center">唯一订单号</td>
</tr>
<tr>
<td align="center"><code>order_date</code></td>
<td align="center">订单日期</td>
</tr>
<tr>
<td align="center"><code>cust_id</code></td>
<td align="center">订单顾客ID（关系到<code>customers</code> 表的 <code>cust_id</code> ）</td>
</tr>
</tbody></table>
<ul>
<li>所有表都应该定义主键，这个表使用<code>order_num</code> 作为它的主键。<code>order_num</code> 是一个自动增量字段。</li>
<li>为实施引用完整性，应该在<code>cust_id</code> 上定义一个外键，关联到<code>customers</code> 的<code>cust_id</code> 。</li>
</ul>
<br>

<h3 id="orderitems"><a href="#orderitems" class="headerlink" title="orderitems"></a>orderitems</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-----------+------------+---------+----------+------------+</span><br><span class="line">| order_num | order_item | prod_id | quantity | item_price |</span><br><span class="line">+-----------+------------+---------+----------+------------+</span><br><span class="line">|     20005 |          1 | ANV01   |       10 |       5.99 |</span><br><span class="line">|     20005 |          2 | ANV02   |        3 |       9.99 |</span><br><span class="line">|     20005 |          3 | TNT2    |        5 |      10.00 |</span><br><span class="line">|     20005 |          4 | FB      |        1 |      10.00 |</span><br><span class="line">|     20006 |          1 | JP2000  |        1 |      55.00 |</span><br><span class="line">|     20007 |          1 | TNT2    |      100 |      10.00 |</span><br><span class="line">|     20008 |          1 | FC      |       50 |       2.50 |</span><br><span class="line">|     20009 |          1 | FB      |        1 |      10.00 |</span><br><span class="line">|     20009 |          2 | OL1     |        1 |       8.99 |</span><br><span class="line">|     20009 |          3 | SLING   |        1 |       4.49 |</span><br><span class="line">|     20009 |          4 | ANV03   |        1 |      14.99 |</span><br><span class="line">+-----------+------------+---------+----------+------------+</span><br><span class="line">11 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><code>orderitems</code> 表存储每个订单中的实际物品，每个订单的每个物品占一行。对<code>orders</code> 中的每一行，<code>orderitems</code> 中有一行或多行。每个订单物品由订单号加订单物品（第一个物品、第二个物品等）唯一标识。订单物品通过<code>order_num</code> 列（关联到<code>orders</code> 中订单的唯一ID）与它们相应的订单相关联。此外，每个订单项包含订单物品的产品ID（它关联物品到<code>products</code> 表）。</p>
<p><strong>表B-5 <code>orderitems</code> 表的列</strong></p>
<table>
<thead>
<tr>
<th align="center">列</th>
<th align="center">说 明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>order_num</code></td>
<td align="center">订单号（关联到<code>orders</code> 表的<code>order_num</code> ）</td>
</tr>
<tr>
<td align="center"><code>order_item</code></td>
<td align="center">订单物品号（在某个订单中的顺序）</td>
</tr>
<tr>
<td align="center"><code>prod_id</code></td>
<td align="center">产品ID（关联到<code>products</code> 表的<code>prod_id</code> ）</td>
</tr>
<tr>
<td align="center"><code>quantity</code></td>
<td align="center">物品数量</td>
</tr>
<tr>
<td align="center"><code>item_price</code></td>
<td align="center">物品价格</td>
</tr>
</tbody></table>
<ul>
<li>所有表都应该有主键，这个表使用<code>order_num</code> 和<code>order_item</code> 作为其主键。</li>
<li>为实施引用完整性，应该在<code>order_num</code> 上定义外键，关联它到<code>orders</code> 的<code>order_num</code> ，在<code>prod_id</code> 上定义外键，关联它到<code>products</code> 的<code>prod_id</code> 。</li>
</ul>
<br>

<h3 id="productnotes"><a href="#productnotes" class="headerlink" title="productnotes"></a>productnotes</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+---------+---------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| note_id | prod_id | note_date           | note_text                                                                                                                                                  |</span><br><span class="line">+---------+---------+---------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|     101 | TNT2    | 2005-08-17 00:00:00 | Customer complaint:</span><br><span class="line">Sticks not individually wrapped, too easy to mistakenly detonate all at once.</span><br><span class="line">Recommend individual wrapping.                         |</span><br><span class="line">|     102 | OL1     | 2005-08-18 00:00:00 | Can shipped full, refills not available.</span><br><span class="line">Need to order new can <span class="keyword">if</span> refill needed.                                                                          |</span><br><span class="line">|     103 | SAFE    | 2005-08-18 00:00:00 | Safe is combination locked, combination not provided with safe.</span><br><span class="line">This is rarely a problem as safes are typically blown up or dropped by customers.         |</span><br><span class="line">|     104 | FC      | 2005-08-19 00:00:00 | Quantity varies, sold by the sack load.</span><br><span class="line">All guaranteed to be bright and orange, and suitable <span class="keyword">for</span> use as rabbit bait.                                      |</span><br><span class="line">|     105 | TNT2    | 2005-08-20 00:00:00 | Included fuses are short and have been known to detonate too quickly <span class="keyword">for</span> some customers.</span><br><span class="line">Longer fuses are available (item FU1) and should be recommended. |</span><br><span class="line">|     106 | TNT2    | 2005-08-22 00:00:00 | Matches not included, recommend purchase of matches or detonator (item DTNTR).                                                                             |</span><br><span class="line">|     107 | SAFE    | 2005-08-23 00:00:00 | Please note that no returns will be accepted <span class="keyword">if</span> safe opened using explosives.                                                                              |</span><br><span class="line">|     108 | ANV01   | 2005-08-25 00:00:00 | Multiple customer returns, anvils failing to drop fast enough or falling backwards on purchaser. Recommend that customer considers using heavier anvils.   |</span><br><span class="line">|     109 | ANV03   | 2005-09-01 00:00:00 | Item is extremely heavy. Designed <span class="keyword">for</span> dropping, not recommended <span class="keyword">for</span> use with slings, ropes, pulleys, or tightropes.                                        |</span><br><span class="line">|     110 | FC      | 2005-09-01 00:00:00 | Customer complaint: rabbit has been able to detect <span class="built_in">trap</span>, food apparently less effective now.                                                               |</span><br><span class="line">|     111 | SLING   | 2005-09-02 00:00:00 | Shipped unassembled, requires common tools (including oversized hammer).                                                                                   |</span><br><span class="line">|     112 | SAFE    | 2005-09-02 00:00:00 | Customer complaint:</span><br><span class="line">Circular hole <span class="keyword">in</span> safe floor can apparently be easily cut with handsaw.                                                                |</span><br><span class="line">|     113 | ANV01   | 2005-09-05 00:00:00 | Customer complaint:</span><br><span class="line">Not heavy enough to generate flying stars around head of victim. If being purchased <span class="keyword">for</span> dropping, recommend ANV02 or ANV03 instead.   |</span><br><span class="line">|     114 | SAFE    | 2005-09-07 00:00:00 | Call from individual trapped <span class="keyword">in</span> safe plummeting to the ground, suggests an escape hatch be added.</span><br><span class="line">Comment forwarded to vendor.                            |</span><br><span class="line">+---------+---------+---------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">14 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<p><code>productnotes</code> 表存储与特定产品有关的注释。并非所有产品都有相关的注释，而有的产品可能有许多相关的注释。</p>
<p><strong>表B-6 <code>productnotes</code> 表的列</strong></p>
<table>
<thead>
<tr>
<th align="center">列</th>
<th align="center">说 明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>note_id</code></td>
<td align="center">唯一注释ID</td>
</tr>
<tr>
<td align="center"><code>prod_id</code></td>
<td align="center">产品ID（对应于<code>products</code> 表中的<code>prod_id</code> ）</td>
</tr>
<tr>
<td align="center"><code>note_date</code></td>
<td align="center">增加注释的日期</td>
</tr>
<tr>
<td align="center"><code>note_text</code></td>
<td align="center">注释文本</td>
</tr>
</tbody></table>
<ul>
<li>所有表都应该有主键，这个表应该使用<code>note_id</code> 作为其主键。</li>
<li>列<code>note_text</code> 必须为<code>FULLTEXT</code> 搜索进行索引。</li>
<li>由于这个表使用全文本搜索，因此必须指定<code>ENGINE=MyISAM</code> 。</li>
</ul>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="附录1：MySQL关键字书写顺序、执行顺序"><a href="#附录1：MySQL关键字书写顺序、执行顺序" class="headerlink" title="附录1：MySQL关键字书写顺序、执行顺序"></a>附录1：MySQL关键字书写顺序、执行顺序</h2><br>

<p>在SQL语句中每个关键字都会按照顺序往下执行，而每一步操作，会生成一个<strong>虚拟表</strong>，最后的虚拟表就是最终结果。</p>
<h3 id="基本-SQL-语句书写顺序如下"><a href="#基本-SQL-语句书写顺序如下" class="headerlink" title="基本 SQL 语句书写顺序如下 :"></a>基本 SQL 语句书写顺序如下 :</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(<span class="number">8</span>)<span class="keyword">SELECT</span> (<span class="number">9</span>)<span class="keyword">DISTINCT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span></span><br><span class="line">(<span class="number">1</span>)<span class="keyword">FROM</span> <span class="operator">&lt;</span>left_table<span class="operator">&gt;</span></span><br><span class="line">(<span class="number">3</span>) <span class="operator">&lt;</span>join_type<span class="operator">&gt;</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span>right_table<span class="operator">&gt;</span></span><br><span class="line">(<span class="number">2</span>)<span class="keyword">ON</span> <span class="operator">&lt;</span>join_condition<span class="operator">&gt;</span></span><br><span class="line">(<span class="number">4</span>)<span class="keyword">WHERE</span> <span class="operator">&lt;</span>where_condition<span class="operator">&gt;</span></span><br><span class="line">(<span class="number">5</span>)<span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>group_by_list<span class="operator">&gt;</span></span><br><span class="line">(<span class="number">6</span>)<span class="keyword">WITH</span>&#123;<span class="keyword">CUBE</span><span class="operator">|</span><span class="keyword">ROLLUP</span>&#125;</span><br><span class="line">(<span class="number">7</span>)<span class="keyword">HAVING</span> <span class="operator">&lt;</span>having_condition<span class="operator">&gt;</span></span><br><span class="line">(<span class="number">10</span>)<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>order_by_list<span class="operator">&gt;</span></span><br><span class="line">(<span class="number">11</span>)LIMIT <span class="operator">&lt;</span>limit_number<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<h3 id="常用执行顺序"><a href="#常用执行顺序" class="headerlink" title="常用执行顺序"></a>常用执行顺序</h3><ol>
<li><code>FROM</code> ： 对FROM左边的表和右边的表计算<strong>笛卡尔积</strong>，产生虚表VT1；</li>
<li><code>ON</code> ： 对虚拟表VT1进行ON筛选，只有那些符合条件的行才会被记录在虚拟表VT2中；</li>
<li><code>JOIN</code> ：如果是OUT JOIN，那么将保留表中（如左表或者右表）未匹配的行作为外部行添加到虚拟表VT2中，从而产生虚拟表VT3；</li>
<li><code>WHERE</code> ：对虚拟表VT3进行 <strong>WHERE 条件过滤</strong>，只有符合的记录才会被放入到虚拟表VT4；</li>
<li><code>GROUP BY</code>：根据GROUP BY子句中的列，对虚拟表VT4进行<strong>分组</strong>操作，产生虚拟表VT5；</li>
<li><code>CUBE|ROLLUP</code>：对虚拟表VT5进行CUBE或者ROLLUP操作，产生虚拟表VT6；</li>
<li><code>HAVING</code> ：对虚拟表VT6进行 <strong>HAVING 条件过滤</strong>，只有符合的记录才会被插入到虚拟表VT7中；</li>
<li><code>SELECT</code> ：执行SELECT操作，<strong>选择指定的列</strong>，插入到虚拟表VT8中；</li>
<li><code>DISTINCT</code> ：对虚拟表VT8中的记录进行<strong>去重</strong>，产生虚拟表VT9；</li>
<li><code>ORDER BY</code> ：将虚拟表VT9中的记录按照进行<strong>排序</strong>操作，产生虚拟表VT10；</li>
<li><code>LIMIT</code> ：取出指定行的记录，<strong>限定行数</strong>，产生虚拟表VT11，并将结果返回。</li>
</ol>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="附录2：SHOW命令用法"><a href="#附录2：SHOW命令用法" class="headerlink" title="附录2：SHOW命令用法"></a>附录2：SHOW命令用法</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 	<span class="keyword">SHOW</span> TABLES 或 <span class="keyword">SHOW</span> TABLES <span class="keyword">FROM</span> database_name; <span class="comment">-- 显示当前数据库中所有表的名称。</span></span><br><span class="line"><span class="number">2.</span> 	<span class="keyword">SHOW</span> DATABASES; <span class="comment">-- 显示mysql中所有数据库的名称。 </span></span><br><span class="line"><span class="number">3.</span> 	<span class="keyword">SHOW</span> COLUMNS <span class="keyword">FROM</span> table_name <span class="keyword">FROM</span> database_name; </span><br><span class="line">	<span class="keyword">SHOW</span> COLUMNS <span class="keyword">FROM</span> database_name.table_name; <span class="comment">-- 显示表中列名称。</span></span><br><span class="line"><span class="number">4.</span> 	<span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> user_name; <span class="comment">-- 显示一个用户的权限，显示结果类似于grant 命令。</span></span><br><span class="line"><span class="number">5.</span> 	<span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> table_name; <span class="comment">-- 显示表的索引。</span></span><br><span class="line"><span class="number">6.</span> 	<span class="keyword">SHOW</span> STATUS; <span class="comment">-- 显示一些系统特定资源的信息，例如，正在运行的线程数量。</span></span><br><span class="line"><span class="number">7.</span> 	<span class="keyword">SHOW</span> VARIABLES; <span class="comment">-- 显示系统变量的名称和值。</span></span><br><span class="line"><span class="number">8.</span> 	<span class="keyword">SHOW</span> PROCESSLIST; <span class="comment">-- 显示系统中正在运行的所有进程，也就是当前正在执行的查询。大多数用户可以查看他们自己的进程，但是如果他们拥有process权限，就可以查看所有人的进程，包括密码。</span></span><br><span class="line"><span class="number">9.</span> 	<span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS; <span class="comment">-- 显示当前使用或者指定的database中的每个表的信息。信息包括表类型和表的最新更新时间。</span></span><br><span class="line"><span class="number">10.</span> <span class="keyword">SHOW</span> PRIVILEGES; <span class="comment">-- 显示服务器所支持的不同权限。</span></span><br><span class="line"><span class="number">11.</span> <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE database_name; <span class="comment">-- 显示create database 语句是否能够创建指定的数据库。</span></span><br><span class="line"><span class="number">12.</span> <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name; <span class="comment">-- 显示create database 语句是否能够创建指定的数据库。</span></span><br><span class="line"><span class="number">13.</span> <span class="keyword">SHOW</span> ENGINES; <span class="comment">-- 显示安装以后可用的存储引擎和默认引擎。</span></span><br><span class="line"><span class="number">14.</span> <span class="keyword">SHOW</span> INNODB STATUS; <span class="comment">-- 显示innoDB存储引擎的状态。</span></span><br><span class="line"><span class="number">15.</span> <span class="keyword">SHOW</span> LOGS; <span class="comment">-- 显示BDB存储引擎的日志。</span></span><br><span class="line"><span class="number">16.</span> <span class="keyword">SHOW</span> WARNINGS; <span class="comment">-- 显示最后一个执行的语句所产生的错误、警告和通知。</span></span><br><span class="line"><span class="number">17.</span> <span class="keyword">SHOW</span> ERRORS; <span class="comment">-- 只显示最后一个执行语句所产生的错误。</span></span><br><span class="line"><span class="number">18.</span> <span class="keyword">SHOW</span> [STORAGE] ENGINES; <span class="comment">--显示安装后的可用存储引擎和默认引擎。</span></span><br><span class="line"><span class="number">19.</span> <span class="keyword">SHOW</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span>;		<span class="comment">-- 查看MySQL所支持的字符集完整列表</span></span><br><span class="line">	<span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;character%&#x27;</span>;	<span class="comment">-- 确定默认的字符集</span></span><br><span class="line"><span class="number">20.</span> <span class="keyword">SHOW</span> <span class="keyword">COLLATION</span>;		<span class="comment">-- 查看MySQL所支持校对的完整列表</span></span><br><span class="line">	<span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;collation%&#x27;</span>;	<span class="comment">-- 确定默认的校对</span></span><br></pre></td></tr></table></figure>

<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="附录3：MySQL数据类型"><a href="#附录3：MySQL数据类型" class="headerlink" title="附录3：MySQL数据类型"></a>附录3：MySQL数据类型</h2><p><br><br></p>
<p>数据类型是定义列中可以存储什么数据以及该数据实际怎样存储的基本规则。</p>
<p>数据类型用于以下目的。</p>
<ul>
<li>数据类型允许限制可存储在列中的数据。例如，数值数据类型列只能接受数值。</li>
<li>数据类型允许在内部更有效地存储数据。可以用一种比文本串更简洁的格式存储数值和日期时间值。</li>
<li>数据类型允许变换排序顺序。如果所有数据都作为串处理，则1位于10之前，而10又位于2之前（串以字典顺序排序，从左边开始比较，一次一个字符）。作为数值数据类型，数值才能正确排序。</li>
</ul>
<p>在设计表时，应该特别重视所用的数据类型。使用错误的数据类型可能会严重地影响应用程序的功能和性能。更改包含数据的列不是一件小事（而且这样做可能会导致数据丢失）。</p>
<p>本附录虽然不是关于数据类型及其如何使用的一个完整的教材，但介绍了MySQL主要的数据类型和用途。</p>
<p><br><br></p>
<h3 id="附录3-1-串数据类型"><a href="#附录3-1-串数据类型" class="headerlink" title="附录3.1 串数据类型"></a>附录3.1 串数据类型</h3><p>最常用的数据类型是串数据类型。它们存储串，如名字、地址、电话号码、邮政编码等。有两种基本的串类型，分别为定长串和变长串（参见表D-1）。</p>
<p>定长串接受长度固定的字符串，其长度是在创建表时指定的。例如，名字列可允许30个字符，而社会安全号列允许11个字符（允许的字符数目中包括两个破折号）。定长列不允许多于指定的字符数目。它们分配的存储空间与指定的一样多。因此，如果串<code>Ben</code> 存储到30个字符的名字字段，则存储的是30个字符，<code>CHAR</code> 属于定长串类型。</p>
<p>变长串存储可变长度的文本。有些变长数据类型具有最大的定长，而有些则是完全变长的。不管是哪种，只有指定的数据得到保存（额外的数据不保存）<code>TEXT</code> 属于变长串类型。</p>
<p>既然变长数据类型这样灵活，为什么还要使用定长数据类型？回答是因为性能。MySQL处理定长列远比处理变长列快得多。此外，MySQL不允许对变长列（或一个列的可变部分）进行索引。这也会极大地影响性能。</p>
<p><strong>表D-1 串数据类型</strong></p>
<table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">说 明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>CHAR</code></td>
<td align="center">1～255个字符的定长串。它的长度必须在创建时指定，否则MySQL假定为<code>CHAR(1)</code></td>
</tr>
<tr>
<td align="center"><code>ENUM</code></td>
<td align="center">接受最多64 K个串组成的一个预定义集合的某个串</td>
</tr>
<tr>
<td align="center"><code>LONGTEXT</code></td>
<td align="center">与<code>TEXT</code> 相同，但最大长度为4 GB</td>
</tr>
<tr>
<td align="center"><code>MEDIUMTEXT</code></td>
<td align="center">与<code>TEXT</code> 相同，但最大长度为16 K</td>
</tr>
<tr>
<td align="center"><code>SET</code></td>
<td align="center">接受最多64个串组成的一个预定义集合的零个或多个串</td>
</tr>
<tr>
<td align="center"><code>TEXT</code></td>
<td align="center">最大长度为64 K的变长文本</td>
</tr>
<tr>
<td align="center"><code>TINYTEXT</code></td>
<td align="center">与<code>TEXT</code> 相同，但最大长度为255字节</td>
</tr>
<tr>
<td align="center"><code>VARCHAR</code></td>
<td align="center">长度可变， 最多不超过255 字节。如果在创建时指定为<code>VARCHAR(n)</code> ，则可存储<code>0</code> 到<code>n</code> 个字符的变长串（其中<code>n</code> ≤255）</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>使用引号</strong>     不管使用何种形式的串数据类型，串值都必须括在引号内（通常单引号更好）。</p>
</blockquote>
<blockquote>
<p><strong>当数值不是数值时</strong>     你可能会认为电话号码和邮政编码应该存储在数值字段中（数值字段只存储数值数据），但是，这样做却是不可取的。如果在数值字段中存储邮政编码01234，则保存的将是数值1234，实际上丢失了一位数字。需要遵守的基本规则是：如果数值是计算（求和、平均等）中使用的数值，则应该存储在数值数据类型列中。如果作为字符串（可能只包含数字）使用，则应该保存在串数据类型列中。</p>
</blockquote>
<p><br><br></p>
<h3 id="附录3-2-数值数据类型"><a href="#附录3-2-数值数据类型" class="headerlink" title="附录3.2 数值数据类型"></a>附录3.2 数值数据类型</h3><p>‘数值数据类型存储数值。MySQL支持多种数值数据类型，每种存储的数值具有不同的取值范围。显然，支持的取值范围越大，所需存储空间越多。此外，有的数值数据类型支持使用十进制小数点（和小数），而有的则只支持整数。表D-2列出了常用的MySQL数值数据类型。</p>
<blockquote>
<p><strong>有符号或无符号</strong>     所有数值数据类型（除<code>BIT</code> 和<code>BOOLEAN</code> 外）都可以有符号或无符号。有符号数值列可以存储正或负的数值，无符号数值列只能存储正数。默认情况为有符号，但如果你知道自己不需要存储负值，可以使用<code>UNSIGNED</code> 关键字，这样做将允许你存储两倍大小的值。</p>
</blockquote>
<p><strong>表D-2 数值数据类型</strong></p>
<table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">说 明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>BIT</code></td>
<td align="center">位字段，1～64位。（在MySQL 5之前，<code>BIT</code> 在功能上等价于<code>TINYINT</code></td>
</tr>
<tr>
<td align="center"><code>BIGINT</code></td>
<td align="center">整数值，支持−9223372036854775808～9223372036854775807（如果是<code>UNSIGNED</code> ，为0～18446744073709551615）的数</td>
</tr>
<tr>
<td align="center"><code>BOOLEAN</code> （或<code>BOOL</code> ）</td>
<td align="center">布尔标志，或者为0或者为1，主要用于开/关（on/off）标志</td>
</tr>
<tr>
<td align="center"><code>DECIMAL</code> （或<code>DEC</code> ）</td>
<td align="center">精度可变的浮点值</td>
</tr>
<tr>
<td align="center"><code>DOUBLE</code></td>
<td align="center">双精度浮点值</td>
</tr>
<tr>
<td align="center"><code>FLOAT</code></td>
<td align="center">单精度浮点值</td>
</tr>
<tr>
<td align="center"><code>INT</code> （或<code>INTEGER</code> ）</td>
<td align="center">整数值，支持−2147483648～2147483647（如果是<code>UNSIGNED</code> ，为0～4294967295）的数</td>
</tr>
<tr>
<td align="center"><code>MEDIUMINT</code></td>
<td align="center">整数值，支持−8388608～8388607（如果是<code>UNSIGNED</code> ，为0～16777215）的数</td>
</tr>
<tr>
<td align="center"><code>REAL</code></td>
<td align="center">4字节的浮点值</td>
</tr>
<tr>
<td align="center"><code>SMALLINT</code></td>
<td align="center">整数值，支持−32768～32767（如果是<code>UNSIGNED</code> ，为0～65535）的数</td>
</tr>
<tr>
<td align="center"><code>TINYINT</code></td>
<td align="center">整数值，支持−128～127（如果为<code>UNSIGNED</code> ，为0～255）的数</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>不使用引号</strong>     与串不一样，数值不应该括在引号内。</p>
</blockquote>
<blockquote>
<p><strong>存储货币数据类型</strong>     MySQL中没有专门存储货币的数据类型，一般情况下使用<code>DECIMAL(8,2)</code></p>
</blockquote>
<p><br><br></p>
<h3 id="附录3-3-日期和时间数据类型"><a href="#附录3-3-日期和时间数据类型" class="headerlink" title="附录3.3 日期和时间数据类型"></a>附录3.3 日期和时间数据类型</h3><p>MySQL使用专门的数据类型来存储日期和时间值（见表D-3）。</p>
<p><strong>表D-3 日期和时间数据类型</strong></p>
<table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">说 明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>DATE</code></td>
<td align="center">表示<code>1000-01-01～9999-12-31</code> 的日期，格式为<code>YYYY-MM-DD</code></td>
</tr>
<tr>
<td align="center"><code>DATETIME</code></td>
<td align="center"><code>DATE</code> 和<code>TIME</code> 的组合</td>
</tr>
<tr>
<td align="center"><code>TIMESTAMP</code></td>
<td align="center">功能和<code>DATETIME</code> 相同（但范围较小）</td>
</tr>
<tr>
<td align="center"><code>TIME</code></td>
<td align="center">格式为<code>HH:MM:SS</code></td>
</tr>
<tr>
<td align="center"><code>YEAR</code></td>
<td align="center">用2位数字表示，范围是70（1970年）～69（2069年），用4位数字表示，范围是1901年～2155年</td>
</tr>
</tbody></table>
<p><br><br></p>
<h3 id="附录3-4-二进制数据类型"><a href="#附录3-4-二进制数据类型" class="headerlink" title="附录3.4 二进制数据类型"></a>附录3.4 二进制数据类型</h3><p>二进制数据类型可存储任何数据（甚至包括二进制信息），如图像、多媒体、字处理文档等（参见表D-4）。</p>
<p><strong>表D-4 二进制数据类型</strong></p>
<table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">说 明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>BLOB</code></td>
<td align="center">Blob最大长度为64 KB</td>
</tr>
<tr>
<td align="center"><code>MEDIUMBLOB</code></td>
<td align="center">Blob最大长度为16 MB</td>
</tr>
<tr>
<td align="center"><code>LONGBLOB</code></td>
<td align="center">Blob最大长度为4 GB</td>
</tr>
<tr>
<td align="center"><code>TINYBLOB</code></td>
<td align="center">Blob最大长度为255字节</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>数据类型对比</strong>     如果你想看一个使用不同数据库的实际例子，请参看样例表的表创建脚本。</p>
</blockquote>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="附录4：MySQL保留字"><a href="#附录4：MySQL保留字" class="headerlink" title="附录4：MySQL保留字"></a>附录4：MySQL保留字</h2><ul>
<li>保留字——即关键字。</li>
</ul>
<p>MySQL是由关键字组成的语言，关键字是一些用于执行MySQL操作的特殊词汇。在命名数据库、表、列和其他数据库对象时，一定不要使 用这些关键字。因此，这些关键字是一定要保留的。本附录列出主要 MySQL（自MySQL 5以后的版本）中所有的保留字。</p>
<table>
<thead>
<tr>
<th><code>ACTION</code></th>
<th><code>CASE</code></th>
<th><code>DATABASE</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>ADD</code></td>
<td><code>CHANGE</code></td>
<td><code>DATABASES</code></td>
</tr>
<tr>
<td><code>ALL</code></td>
<td><code>CHAR</code></td>
<td><code>DATE</code></td>
</tr>
<tr>
<td><code>ALTER</code></td>
<td><code>CHARACTER</code></td>
<td><code>DAY_HOUR</code></td>
</tr>
<tr>
<td><code>ANALYZE</code></td>
<td><code>CHECK</code></td>
<td><code>DAY_MICROSECOND</code></td>
</tr>
<tr>
<td><code>AND</code></td>
<td><code>COLLATE</code></td>
<td><code>DAY_MINUTE</code></td>
</tr>
<tr>
<td><code>AS</code></td>
<td><code>COLUMN</code></td>
<td><code>DAY_SECOND</code></td>
</tr>
<tr>
<td><code>ASC</code></td>
<td><code>CONDITION</code></td>
<td><code>DEC</code></td>
</tr>
<tr>
<td><code>ASENSITIVE</code></td>
<td><code>CONNECTION</code></td>
<td><code>DECIMAL</code></td>
</tr>
<tr>
<td><code>BEFORE</code></td>
<td><code>CONSTRAINT</code></td>
<td><code>DECLARE</code></td>
</tr>
<tr>
<td><code>BETWEEN</code></td>
<td><code>CONTINUE</code></td>
<td><code>DEFAULT</code></td>
</tr>
<tr>
<td><code>BIGINT</code></td>
<td><code>CONVERT</code></td>
<td><code>DELAYED</code></td>
</tr>
<tr>
<td><code>BINARY</code></td>
<td><code>CREATE</code></td>
<td><code>DELETE</code></td>
</tr>
<tr>
<td><code>BIT</code></td>
<td><code>CROSS</code></td>
<td><code>DESC</code></td>
</tr>
<tr>
<td><code>BLOB</code></td>
<td><code>CURRENT_DATE</code></td>
<td><code>DESCRIBE</code></td>
</tr>
<tr>
<td><code>BOTH</code></td>
<td><code>CURRENT_TIME</code></td>
<td><code>DETERMINISTIC</code></td>
</tr>
<tr>
<td><code>BY</code></td>
<td><code>CURRENT_TIMESTAMP</code></td>
<td><code>DISTINCT</code></td>
</tr>
<tr>
<td><code>CALL</code></td>
<td><code>CURRENT_USER</code></td>
<td><code>DISTINCTROW</code></td>
</tr>
<tr>
<td><code>CASCADE</code></td>
<td><code>CURSOR</code></td>
<td><code>DIV</code></td>
</tr>
<tr>
<td><code>DOUBLE</code></td>
<td><code>HOUR_MINUTE</code></td>
<td><code>LINES</code></td>
</tr>
<tr>
<td><code>DROP</code></td>
<td><code>HOUR_SECOND</code></td>
<td><code>LOAD</code></td>
</tr>
<tr>
<td><code>DUAL</code></td>
<td><code>IF</code></td>
<td><code>LOCALTIME</code></td>
</tr>
<tr>
<td><code>EACH</code></td>
<td><code>IGNORE</code></td>
<td><code>LOCALTIMESTAMP</code></td>
</tr>
<tr>
<td><code>ELSE</code></td>
<td><code>IN</code></td>
<td><code>LOCK</code></td>
</tr>
<tr>
<td><code>ELSEIF</code></td>
<td><code>INDEX</code></td>
<td><code>LONG</code></td>
</tr>
<tr>
<td><code>ENCLOSED</code></td>
<td><code>INFILE</code></td>
<td><code>LONGBLOB</code></td>
</tr>
<tr>
<td><code>ENUM</code></td>
<td><code>INNER</code></td>
<td><code>LONGTEXT</code></td>
</tr>
<tr>
<td><code>ESCAPED</code></td>
<td><code>INOUT</code></td>
<td><code>LOOP</code></td>
</tr>
<tr>
<td><code>EXISTS</code></td>
<td><code>INSENSITIVE</code></td>
<td><code>LOW_PRIORITY</code></td>
</tr>
<tr>
<td><code>EXIT</code></td>
<td><code>INSERT</code></td>
<td><code>MATCH</code></td>
</tr>
<tr>
<td><code>EXPLAIN</code></td>
<td><code>INT</code></td>
<td><code>MEDIUMBLOB</code></td>
</tr>
<tr>
<td><code>FALSE</code></td>
<td><code>INTEGER</code></td>
<td><code>MEDIUMINT</code></td>
</tr>
<tr>
<td><code>FETCH</code></td>
<td><code>INTERVAL</code></td>
<td><code>MEDIUMTEXT</code></td>
</tr>
<tr>
<td><code>FLOAT</code></td>
<td><code>INTO</code></td>
<td><code>MIDDLEINT</code></td>
</tr>
<tr>
<td><code>FOR</code></td>
<td><code>IS</code></td>
<td><code>MINUTE_MICROSECOND</code></td>
</tr>
<tr>
<td><code>FORCE</code></td>
<td><code>ITERATE</code></td>
<td><code>MINUTE_SECOND</code></td>
</tr>
<tr>
<td><code>FOREIGN</code></td>
<td><code>JOIN</code></td>
<td><code>MOD</code></td>
</tr>
<tr>
<td><code>FROM</code></td>
<td><code>KEY</code></td>
<td><code>MODIFIES</code></td>
</tr>
<tr>
<td><code>FULLTEXT</code></td>
<td><code>KEYS</code></td>
<td><code>NATURAL</code></td>
</tr>
<tr>
<td><code>GOTO</code></td>
<td><code>KILL</code></td>
<td><code>NO</code></td>
</tr>
<tr>
<td><code>GRANT</code></td>
<td><code>LEADING</code></td>
<td><code>NO_WRITE_TO_BINLOG</code></td>
</tr>
<tr>
<td><code>GROUP</code></td>
<td><code>LEAVE</code></td>
<td><code>NOT</code></td>
</tr>
<tr>
<td><code>HAVING</code></td>
<td><code>LEFT</code></td>
<td><code>NULL</code></td>
</tr>
<tr>
<td><code>HIGH_PRIORITY</code></td>
<td><code>LIKE</code></td>
<td><code>NUMERIC</code></td>
</tr>
<tr>
<td><code>HOUR_MICROSECOND</code></td>
<td><code>LIMIT</code></td>
<td><code>ON</code></td>
</tr>
<tr>
<td><code>OPTIMIZE</code></td>
<td><code>RLIKE</code></td>
<td><code>THEN</code></td>
</tr>
<tr>
<td><code>OPTION</code></td>
<td><code>SCHEMA</code></td>
<td><code>TIME</code></td>
</tr>
<tr>
<td><code>OPTIONALLY</code></td>
<td><code>SCHEMAS</code></td>
<td><code>TIMESTAMP</code></td>
</tr>
<tr>
<td><code>OR</code></td>
<td><code>SECOND_MICROSECOND</code></td>
<td><code>TINYBLOB</code></td>
</tr>
<tr>
<td><code>ORDER</code></td>
<td><code>SELECT</code></td>
<td><code>TINYINT</code></td>
</tr>
<tr>
<td><code>OUT</code></td>
<td><code>SENSITIVE</code></td>
<td><code>TINYTEXT</code></td>
</tr>
<tr>
<td><code>OUTER</code></td>
<td><code>SEPARATOR</code></td>
<td><code>TO</code></td>
</tr>
<tr>
<td><code>OUTFILE</code></td>
<td><code>SET</code></td>
<td><code>TRAILING</code></td>
</tr>
<tr>
<td><code>PRECISION</code></td>
<td><code>SHOW</code></td>
<td><code>TRIGGER</code></td>
</tr>
<tr>
<td><code>PRIMARY</code></td>
<td><code>SMALLINT</code></td>
<td><code>TRUE</code></td>
</tr>
<tr>
<td><code>PROCEDURE</code></td>
<td><code>SONAME</code></td>
<td><code>UNDO</code></td>
</tr>
<tr>
<td><code>PURGE</code></td>
<td><code>SPATIAL</code></td>
<td><code>UNION</code></td>
</tr>
<tr>
<td><code>READ</code></td>
<td><code>SPECIFIC</code></td>
<td><code>UNIQUE</code></td>
</tr>
<tr>
<td><code>READS</code></td>
<td><code>SQL</code></td>
<td><code>UNLOCK</code></td>
</tr>
<tr>
<td><code>REAL</code></td>
<td><code>SQL_BIG_RESULT</code></td>
<td><code>UNSIGNED</code></td>
</tr>
<tr>
<td><code>REFERENCES</code></td>
<td><code>SQL_CALC_FOUND_ROWS</code></td>
<td><code>UPDATE</code></td>
</tr>
<tr>
<td><code>REGEXP</code></td>
<td><code>SQL_SMALL_RESULT</code></td>
<td><code>USAGE</code></td>
</tr>
<tr>
<td><code>RELEASE</code></td>
<td><code>SQLEXCEPTION</code></td>
<td><code>USE</code></td>
</tr>
<tr>
<td><code>RENAME</code></td>
<td><code>SQLSTATE</code></td>
<td><code>USING</code></td>
</tr>
<tr>
<td><code>REPEAT</code></td>
<td><code>SQLWARNING</code></td>
<td><code>UTC_DATE</code></td>
</tr>
<tr>
<td><code>REPLACE</code></td>
<td><code>SSL</code></td>
<td><code>UTC_TIME</code></td>
</tr>
<tr>
<td><code>REQUIRE</code></td>
<td><code>STARTING</code></td>
<td><code>UTC_TIMESTAMP</code></td>
</tr>
<tr>
<td><code>RESTRICT</code></td>
<td><code>STRAIGHT_JOIN</code></td>
<td><code>VALUES</code></td>
</tr>
<tr>
<td><code>RETURN</code></td>
<td><code>TABLE</code></td>
<td><code>VARBINARY</code></td>
</tr>
<tr>
<td><code>REVOKE</code></td>
<td><code>TERMINATED</code></td>
<td><code>VARCHAR</code></td>
</tr>
<tr>
<td><code>RIGHT</code></td>
<td><code>TEXT</code></td>
<td><code>VARCHARACTER</code></td>
</tr>
<tr>
<td><code>VARYING</code></td>
<td><code>WHILE</code></td>
<td><code>XOR</code></td>
</tr>
<tr>
<td><code>WHEN</code></td>
<td><code>WITH</code></td>
<td><code>YEAR_MONTH</code></td>
</tr>
<tr>
<td><code>WHERE</code></td>
<td><code>WRITE</code></td>
<td><code>ZEROFILL</code></td>
</tr>
</tbody></table>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<hr>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="附录5：从本地文件导入数据、数据导出至本地文件的方法"><a href="#附录5：从本地文件导入数据、数据导出至本地文件的方法" class="headerlink" title="附录5：从本地文件导入数据、数据导出至本地文件的方法"></a>附录5：从本地文件导入数据、数据导出至本地文件的方法</h2><h3 id="从本地文件（-csv）导入数据"><a href="#从本地文件（-csv）导入数据" class="headerlink" title="从本地文件（.csv）导入数据"></a>从本地文件（.csv）导入数据</h3><p><strong>步骤一、设置参数<code>secure_file_priv</code>为<code>‘’</code></strong></p>
<p>该参数默认为OFF，应设为ON</p>
<ul>
<li><code>secure_file_priv</code> 为 <code>NULL</code> 时，表示限制 <code>mysqld</code> 不允许导入或导出，此时执行导出命令将提示如下错误</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ERROR 1290 (HY000): The MySQL server is running with the --secure-file-priv option so it cannot execute this statement</span><br></pre></td></tr></table></figure>

<ul>
<li><code>secure_file_priv</code> 为 <code>/tmp</code> 时，表示限制 <code>mysqld</code> 只能在 <code>/tmp</code> 目录中执行导入导出，其他目录不能执行。</li>
<li><code>secure_file_priv</code> 没有值时，表示不限制 <code>mysqld</code> 在任意目录的导入导出。</li>
</ul>
<p>查看变量状态命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%secure_file_priv%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>查询结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认值为NULL</span></span><br><span class="line">+------------------+-------+</span><br><span class="line">| Variable_name    | Value |</span><br><span class="line">+------------------+-------+</span><br><span class="line">| secure_file_priv | NULL  |</span><br><span class="line">+------------------+-------+</span><br></pre></td></tr></table></figure>

<p>设置变量状态：</p>
<p>由于 <code>secure_file_priv</code> 参数是只读参数，不能使用 <code>set global </code>命令修改，所以在 <code>my.ini</code> 文件中手动设置该参数的值。</p>
<p>打开mysql安装根目录下的 <code>my.ini</code>，在 <code>[mysqld]</code> 下添加 <code>secure_file_priv=&#39;&#39;</code></p>
<blockquote>
<p>注意，my.ini配置文件中是在 <code>[mysqld]</code> 下添加 <code>secure_file_priv=&#39;&#39;</code>，而不是直接添加至文件末尾。</p>
</blockquote>
<p>保存后需要重启mysql服务。（右键此电脑 -&gt; 管理 -&gt; 服务和应用程序 -&gt; 服务 -&gt; 找到mysql，先停止再启动）</p>
<br>

<p>步骤二、在mysql界面使用命令导入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LOAD DATA INFILE “E:<span class="operator">/</span>tempdb<span class="operator">/</span>filename.csv” <span class="keyword">INTO</span> <span class="keyword">TABLE</span> tablename <span class="type">CHARACTER</span> <span class="keyword">SET</span> gbk FIELDS TERMINATED <span class="keyword">BY</span> “,” LINES TERMINATED <span class="keyword">BY</span> “\r\n”;</span><br><span class="line"><span class="comment">-- 样例如下</span></span><br><span class="line">LOAD DATA INFILE “E:<span class="operator">/</span>tempdb<span class="operator">/</span>employee.csv” <span class="keyword">INTO</span> <span class="keyword">TABLE</span> employee <span class="type">CHARACTER</span> <span class="keyword">SET</span> gbk FIELDS TERMINATED <span class="keyword">BY</span> “,” LINES TERMINATED <span class="keyword">BY</span> “\r\n”;</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h3 id="导出表数据至本地文件"><a href="#导出表数据至本地文件" class="headerlink" title="导出表数据至本地文件"></a>导出表数据至本地文件</h3><p>命令如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tablename <span class="keyword">INTO</span> OUTFILE “E:<span class="operator">/</span>tempdb<span class="operator">/</span>filename.csv” FIELDS TERMINATED <span class="keyword">BY</span> “,” OPTIONALLY ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span> LINES TERMINATED <span class="keyword">BY</span> “\r\n”;</span><br><span class="line"><span class="comment">-- 样例</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> salary <span class="keyword">INTO</span> OUTFILE “E:<span class="operator">/</span>tempdb<span class="operator">/</span>outputsalary.txt” FIELDS TERMINATED <span class="keyword">BY</span> “,” OPTIONALLY ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span> LINES TERMINATED <span class="keyword">BY</span> “\r\n”;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> salary <span class="keyword">INTO</span> OUTFILE “E:<span class="operator">/</span>tempdb<span class="operator">/</span>outputsalary.csv” FIELDS TERMINATED <span class="keyword">BY</span> “,” LINES TERMINATED <span class="keyword">BY</span> “\r\n”;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：<code>.csv</code>后缀表示以逗号分隔，可使用excel打开。也可以保存为其它类型的文件。</p>
</blockquote>
]]></content>
      <categories>
        <category>CS-Notes</category>
        <category>database</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
</search>
